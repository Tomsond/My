package com.thinkive.fxc.ismp.bus.business.ggt.function;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.FlowNodeModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.FlowNodeService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.ggt.contants.GgtContants;
import com.thinkive.fxc.ismp.bus.business.ggt.service.GgtService;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 港股通--将用户加入开通港股通跑批队列
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月10日 下午6:00:59
 */
public class Function1004205 extends ISMPBaseFunction{
    
    private Long userId;//用户ID   
    
    DataRow thirdRiskInfo = null;
    
    DataRow thirdKnowInfo = null;
    
    private static final Map<String, String> NODE_MAP = new HashMap<String, String>();
    static{
        NODE_MAP.put("fxcp", GgtContants.GGT_RISK);
        NODE_MAP.put("zscp", GgtContants.GGT_KNOWLEDGE);
        NODE_MAP.put("sign", GgtContants.GGT_CHOOSE_ACCOUNT);
        NODE_MAP.put("sign_sn", GgtContants.GGT_SIGN_AGREEMENT);
        //NODE_MAP.put("video_education", GgtContants.GGT_VIDEO_EDUCATION);
    }
    
    @Override
	public ResultVo execute() throws Exception
	{
	    //获取入参并校验
		checkInput();
		
		//查询业务数据
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCode(userId, BusinessConstants.BUSINESS_GGT);
		if (businessEntityModel == null)
		{
		    throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW, "业务办理数据不存在");
		}
		
		Long businessId = businessEntityModel.getId();
		FlowNodeService flowNodeService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_FLOWNODE, FlowNodeService.class);
		
		//查询此次业务完成的步骤
		List<FlowNodeModel> nodeModels = flowNodeService.queryByBusinessId(businessId);
		if(null == nodeModels)
		{
		    throw new BusinessException(ErrorCodeSystem.BUSINESS_NOANYNODE,"所有节点均未提交，无法进入跑批");
		}
		else
		{
		    boolean signFlag=false;//默认ggt_choose_account未完成
		    boolean riskFlag=false;//默认ggt_risk未完成
		    boolean knowledgeFlag=false;//默认ggt_knowledge未完成
		    boolean protocolFlag = false;
		    //boolean video_education = false ; //视频教育
		    for (Iterator<String> i = NODE_MAP.values().iterator(); i.hasNext();) {
		        String nodeId = i.next();//得到value
		        for (FlowNodeModel flowNodeModel : nodeModels){
		            String flowNodeId=flowNodeModel.getNodeId();
		            if(GgtContants.GGT_CHOOSE_ACCOUNT.equals(nodeId)&&flowNodeId.equals(nodeId)){
		                signFlag=true;//完成了ggt_choose_account
		            }else if(GgtContants.GGT_RISK.equals(nodeId)&&flowNodeId.equals(nodeId)){
		                riskFlag=true;//完成了ggt_risk
		            }else if(GgtContants.GGT_KNOWLEDGE.equals(nodeId)&&flowNodeId.equals(nodeId)){
		                knowledgeFlag=true;//完成了ggt_knowledge
		            }else if(GgtContants.GGT_SIGN_AGREEMENT.equals(nodeId)&&flowNodeId.equals(nodeId)){
		            	protocolFlag=true;//完成了ggt_sign_agreement
		            }
		            /*else if(GgtContants.GGT_VIDEO_EDUCATION.equals(nodeId)&&flowNodeId.equals(nodeId)){
		                video_education=true;//完成了ggt_video_education
                    }*/
                }
	        }
		    if(!signFlag){
		        throw new BusinessException(ErrorCodeSystem.BUSINESS_NOAGREEMENT, "未选择账号，无法进入跑批");
		    }
		    
		    if(!protocolFlag){
		        throw new BusinessException(ErrorCodeSystem.BUSINESS_NOAGREEMENT, "协议未签署，无法进入跑批");
		    }
		    
		    if(!riskFlag){
			    throw new BusinessException(ErrorCodeSystem.BUSINESS_NORISK, "风险测评未提交，无法进入跑批");
			}
		    
	    	if(!knowledgeFlag){
		        throw new BusinessException(ErrorCodeSystem.BUSINESS_NOKNOWLEDGE, "业务知识测评未提交，无法进入跑批");
		    }
	    	
	    	/*if(!video_education){
                throw new InvokeException(4, "未完成投资者视频教育,无法进入跑批");
            }*/
		}
		
		//添加跑批任务，并修改业务实例处理结果
		businessEntityModel.setNodeId(DictionaryConstants.FLOW_LASTSTEP_NEXT);
		GgtService ggtService = SpringHelper.getBean(GgtContants.SERVER_ID_GGT, GgtService.class);
		ggtService.addTaskAndUpdateDealResult(businessEntityModel);

		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void checkInput() throws InvokeException{
	    userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
	}
	
}
