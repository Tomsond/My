package com.thinkive.fxc.ismp.bus.third.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;

/**
 * @描述: 第三方接口交易帐号服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月25日 下午4:16:47
 */
public class ThirdTrdAccountServiceImpl implements ThirdTrdAccountService
{
	
	@Override
	public List<DataRow> queryThirdTraAccount(String stkbd, String trdacct_excls, UserInfoVo userInfoVo, String queryType) throws Exception
	{
		ThirdInterface thirdInterface = (ThirdInterface) SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE);
		String trdacct_type = DataFormatUtils.getTrdacctTypeByStkbdAndCls(stkbd, trdacct_excls);
		
		DataRow input = DataFormatUtils.packThirdInput(userInfoVo);
		input.set("trdacct_type", trdacct_type);
		input.set("stkbd", stkbd);
		input.set("trdacct_excls", trdacct_excls);
		if (ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT.equals(queryType))
		{
			return thirdInterface.queryRegistAccount(input);
		}
		else if (ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_ZD.equals(queryType))
		{
			return thirdInterface.queryZdAccount(input);
		}
		else if (ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GTANDZD.equals(queryType))
		{
			//柜台接口查询的交易帐号
			List<DataRow> gtAccountList = thirdInterface.queryRegistAccount(input);
			//中登查询交易帐号
			List<DataRow> zdAccountList = thirdInterface.queryZdAccount(input);
			//比较中登和柜台交易账户数据
			return compareZdAndGtTrdAccount(zdAccountList, gtAccountList);
		}
		return null;
		
	}
	
	@Override
	public List<DataRow> queryThirdTraAccountByTrdacctExcls(String trdacct_excls, UserInfoVo userInfoVo, String queryType) throws Exception
	{
		return queryThirdTraAccount("", trdacct_excls, userInfoVo, queryType);
	}
	
	@Override
	public List<DataRow> queryThirdTraAccountByStkbd(String stkbd, UserInfoVo userInfoVo, String queryType) throws Exception
	{
		return queryThirdTraAccount(stkbd, "", userInfoVo, queryType);
	}
	
	@Override
	public List<DataRow> queryThirdTraAccount(UserInfoVo userInfoVo, String queryType) throws Exception
	{
		return queryThirdTraAccount("", "", userInfoVo, queryType);
	}
	
	private List<DataRow> compareZdAndGtTrdAccount(List<DataRow> zdAccountList, List<DataRow> gtAccountList)
	{
		List<DataRow> allAccountList = new ArrayList<DataRow>();
		if (zdAccountList != null && zdAccountList.size() > 0)
		{//中登有数据返回，对比柜台数据
			for (DataRow zdItem : zdAccountList)
			{
				//默认未绑定
				zdItem.set("bind_state", DictionaryConstants.BOL_FALSE);
				for (DataRow gtItem : gtAccountList)
				{
					if (zdItem.getString("trdacct").equals(gtItem.getString("trdacct")))
					{//如果中登帐号在柜台存在，默认已绑定
						zdItem.set("bind_state", DictionaryConstants.BOL_TRUE);
						//如果是沪A，根据中登判断指定状态,确认绑定状态
						if (ThirdTBASConstants.STKBD_TYPE_HAG.equals(zdItem.getString("trdacct_type")))
						{
							String hAState = ThirdTBASConstants.GTHAACCOUNTSTATE_TO_TRDACCOUNTSTATE.get(zdItem.getString("treg_status"));
							zdItem.set("bind_state", hAState);
						}
					}
				}
			}
			allAccountList = zdAccountList;
		}
		else
		{//中登无数据，获取柜台数据
			allAccountList = gtAccountList;
		}
		return allAccountList;
	}
	
	@Override
	public Map<String, Object> queryAndCheckGtSzaState(UserInfoVo userInfoVo)
	{
		List<DataRow> trdAccountList = null;
		try
		{
			trdAccountList = queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SZA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo, ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		}
		catch (Exception e)
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOTRDACCOUNT, "交易帐号获取失败");
		}
		String accountState = checkSzaState(trdAccountList);
		Map<String, Object> stateMap = new HashMap<String, Object>();
		stateMap.put("accountState", accountState);
		stateMap.put("accountList", trdAccountList);
		return stateMap;
	}
	
	@Override
	public String checkSzaState(List<DataRow> trdAccountList)
	{
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		//因为查询的是柜台帐号，先检查是否存在深A帐号，再检查深A帐号状态是否正常
		if (trdAccountList != null && trdAccountList.size() != 0)
		{
			//有已加挂的深A帐号，默认状态为不正常
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			//遍历所有已加挂的深A证券帐号
			for (DataRow accountItem : trdAccountList)
			{
				//只要有一个帐号状态为正常，既可以视为深A证券帐号状态正常
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(accountItem.getString("state")))
				{
					accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
					break;
				}
			}
		}
		return accountState;
	}
	
	@Override
	public Map<String, Object> queryAndCheckGtShaState(UserInfoVo userInfoVo, boolean newPointIsRight)
	{
		List<DataRow> trdAccountList = null;
		try
		{
			trdAccountList = queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SHA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo, ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		}
		catch (Exception e)
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOTRDACCOUNT, "交易帐号获取失败");
		}
		String accountState = checkGtShaState(trdAccountList, newPointIsRight);
		Map<String, Object> stateMap = new HashMap<String, Object>();
		stateMap.put("accountState", accountState);
		stateMap.put("accountList", trdAccountList);
		return stateMap;
	}
	
	@Override
	public String checkGtShaState(List<DataRow> trdAccountList, boolean newPointIsRight)
	{
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		//如果是沪A帐号，因为查询的是柜台数据，查询到的帐号都是已加挂帐号
		if (trdAccountList != null && trdAccountList.size() != 0)
		{
			//有已加挂的沪A帐号，默认帐号不正常
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			//遍历所有已加挂的沪A证券帐号
			for (DataRow accountItem : trdAccountList)
			{
				//只要有一个帐号状态正常且已指定交易，既可以视为沪A证券帐号状态正常
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(accountItem.getString("state")))
				{
					//如果遍历到的帐号同时也处于已指定状态，既可以视为沪A证券帐号状态正常，停止循环
					if (ThirdTBASConstants.TRDACCOUNT_STATE_BINDED.equals(accountItem.getString("bind_state"))
							|| (ThirdTBASConstants.TRDACCOUNT_STATE_NEWAPPOINT.equals(accountItem.getString("bind_state")) && newPointIsRight))
					{
						accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
						break;
					}
					accountState = DictionaryConstants.ZQACCOUNTSTATE_NOAPPOINT;
				}
			}
		}
		return accountState;
	}
	
	@Override
	public Map<String, Object> queryAndCheckGtAllAccountState(UserInfoVo userInfoVo, boolean newPointIsRight)
	{
		List<DataRow> trdAccountList = new ArrayList<DataRow>();
		try
		{
			trdAccountList = queryThirdTraAccountByTrdacctExcls(ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo, ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		}
		catch (Exception e)
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOTRDACCOUNT, "交易帐号获取失败");
		}
		
		String accountState = checkGtAllAccountState(trdAccountList, newPointIsRight);
		Map<String, Object> stateMap = new HashMap<String, Object>();
		stateMap.put("accountState", accountState);
		stateMap.put("accountList", trdAccountList);
		return stateMap;
	}
	
	@Override
	public String checkGtAllAccountState(List<DataRow> trdAccountList, boolean newPointIsRight)
	{
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		if (trdAccountList != null && trdAccountList.size() != 0)
		{
			//默认所有帐号状态都异常
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			//遍历所有已加挂的证券帐号
			for (DataRow accountItem : trdAccountList)
			{
				//如果有状态正常的帐号
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(accountItem.getString("state")))
				{
					//如果有一个深A帐号状态为正常，则业务办理的整体帐号状态正常
					if (ThirdInterfaceConstant.STKBD_SZA.equals(accountItem.getString("stkbd")))
					{
						accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
						break;
					}
					//如果有一个沪A帐号正常
					if (ThirdInterfaceConstant.STKBD_SHA.equals(accountItem.getString("stkbd")))
					{
						//如果遍历到的帐号同时也处于已指定状态，既可以视为沪A证券帐号状态正常，停止循环
						if (ThirdTBASConstants.TRDACCOUNT_STATE_BINDED.equals(accountItem.getString("bind_state"))
								|| (ThirdTBASConstants.TRDACCOUNT_STATE_NEWAPPOINT.equals(accountItem.getString("bind_state")) && newPointIsRight))
						{
							accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
							break;
						}
						//未指定交易
						accountState = DictionaryConstants.ZQACCOUNTSTATE_NOAPPOINT;
					}
				}
			}
		}
		return accountState;
	}
}
