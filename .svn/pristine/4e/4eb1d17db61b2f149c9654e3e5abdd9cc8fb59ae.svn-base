package com.thinkive.fxc.ismp.bus.business.util;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Map;
import java.util.Map.Entry;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorkerHelper;

/**
 * @描述: 
 * @版权: Copyright (c) 2019
 * @公司: 思迪科技
 * @作者: 农仕冰
 * @版本: 2.0
 * @创建日期: 2019年5月7日
 * @创建时间: 下午8:47:17
 */
public class HtmlToPDFUtils
{
    
    /**
     * @描述: Html转PDF
     * @作者: 农仕冰
     * @时间: 2019年5月8日 下午2:45:40
     * @param htmlpath
     * @param pdfpath
     * @param keyWords
     */
    public static void htmlToPDF (String htmlpath , String pdfpath ,Map<String, String> keyWords)
    {
        try 
        {
            Document document = new Document(PageSize.A4);
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(pdfpath));
            document.open();
            document.addCreationDate();
            //获取模板html内容
            String html = readToString(htmlpath);
            //填充替换模板把内容
            String htmlContent = getSendMsg(html, keyWords);
            XMLWorkerHelper worker = XMLWorkerHelper.getInstance();
            //worker.parseXHtml(pdfWriter, document, new ByteArrayInputStream(html.getBytes()), null, new AsianFontProvider());
            worker.parseXHtml(pdfWriter, document, new ByteArrayInputStream(htmlContent.getBytes()), null, null, new AsianFontProvider());
            document.close();
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        
    }
    
    /**
     * @描述: Html直接转PDF,不读取模板
     * @作者: 农仕冰
     * @时间: 2019年5月8日 下午2:45:40
     * @param htmlContent
     * @param pdfpath
     * @param keyWords
     * @throws IOException 
     * @throws DocumentException 
     */
    public static void htmlContentToPDF (String htmlContent , String pdfpath ,Map<String, String> keyWords) throws IOException, DocumentException
    {
        try 
        {
            Document document = new Document(PageSize.A4);
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(pdfpath));
            document.open();
            document.addCreationDate();
            //填充替换模板把内容
            htmlContent = getSendMsg(htmlContent, keyWords);
            XMLWorkerHelper worker = XMLWorkerHelper.getInstance();
            //worker.parseXHtml(pdfWriter, document, new ByteArrayInputStream(html.getBytes()), null, new AsianFontProvider());
            worker.parseXHtml(pdfWriter, document, new ByteArrayInputStream(htmlContent.getBytes()), null, null, new AsianFontProvider());
            document.close();
        } 
        catch (IOException e) 
        {
            //e.printStackTrace();
            throw new IOException(e+"");
        }
        
    }
    
    /**
     * @描述: Html转PDF,返回html文本内容
     * @作者: 农仕冰
     * @时间: 2019年5月8日 下午2:45:40
     * @param htmlpath
     * @param pdfpath
     * @param keyWords
     */
    public static String htmlToPDFReturnStr(String htmlpath , String pdfpath ,Map<String, String> keyWords)
    {
        String returnStr = null ;
        try 
        {
            Document document = new Document(PageSize.A4);
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(pdfpath));
            document.open();
            document.addCreationDate();
            //获取模板html内容
            String html = readToString(htmlpath);
            //填充替换模板把内容
            String htmlContent = getSendMsg(html, keyWords);
            XMLWorkerHelper worker = XMLWorkerHelper.getInstance();
            //worker.parseXHtml(pdfWriter, document, new ByteArrayInputStream(html.getBytes()), null, new AsianFontProvider());
            worker.parseXHtml(pdfWriter, document, new ByteArrayInputStream(htmlContent.getBytes()), null, null, new AsianFontProvider());
            document.close();
            returnStr = htmlContent;
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        return returnStr;
    }
    /**
     * 描述:替换文件中的关键字
     * @author MIKE
     * @created 2017年6月8日 
     * @param modelMsg 模版文本
     * @param keyWords 关键字  key为替换的字段，value为替换后的文字
     * @return
     */
    public static String getSendMsg(String modelMsg, Map<String, String> keyWords)
    {
        if(keyWords == null)
        {
            return modelMsg;
        }
        for (Entry<String, String> item : keyWords.entrySet())
        {
            String key = item.getKey();
            String value = item.getValue();
            String keys="\\{"+ key+"\\}";
            modelMsg = modelMsg.replaceAll(keys, value);
        }
        return modelMsg;
    }
    
    /**
     * @描述: 读取模板文件内容
     * @作者: 农仕冰
     * @时间: 2019年5月8日 上午11:18:42
     * @param fileName 模板路径
     * @return
     */
    public static String readToString(String fileName)
    {
        File file = new File(fileName);
        Long filelength = file.length();
        byte[] filecontent = new byte[filelength.intValue()];
        try
        {
            FileInputStream in = new FileInputStream(file);
            in.read(filecontent);
            in.close();
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        try
        {
            return new String(filecontent, "UTF-8");
        }
        catch (UnsupportedEncodingException e)
        {
            e.printStackTrace();
            return null;
        }
    }

}
