package com.thinkive.fxc.ismp.bus.third.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.DateHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.BankInfoModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.BankService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.SurveyService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.QuestionInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ToolsHelper;
import com.thinkive.fxc.ismp.bus.business.otc.model.OtcInfo;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.constant.ErrorCodeBusiness;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;


/**
 * @描述: 调用第三方接口的模拟类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月26日 下午12:54:22
 */
public class TestThirdInterfaceImpl extends ISMPBaseDao implements ThirdInterface
{ 
	
	String dbtype = Configuration.getString("system.dbtype", SystemConstants.DB_TYPE_ORACLE);
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> getBingingBankCards(DataRow thirdInput)
	{
		
		String client_id = thirdInput.getString("client_id");
		String fundAccount = thirdInput.getString("account");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT TUB.BANK_NO,TUB.BANK_NUM,TUB.STATUS,TUB.ZJ_ACCOUNT,TUB.BANKTOSECURITY_FLAG,TUB.SECURITYTOBANK_FLAG ");
		sql.append(" FROM T_TEST_USER_BANK TUB WHERE TUB.CLIENT_ID = ? AND TUB.MAIN_FUNDACCOUNT = ?");
		List<DataRow> list = getJdbcTemplate().query(sql.toString(), new Object[] { client_id, fundAccount });
		List<DataRow> result = new ArrayList<DataRow>();
		if (list != null && list.size() != 0)
		{
			for (int i = 0; i < list.size(); i++)
			{
				DataRow item = list.get(i);
				DataRow outItem = new DataRow();
				outItem.set("bank_code", item.getString("bank_no"));
				outItem.set("account", item.getString("bank_num"));
				if (item.getString("status").equals("1"))
				{
					outItem.set("is_main_card", "0");
				}
				else if (item.getString("status").equals("0"))
				{
					outItem.set("is_main_card", "1");
				}
				outItem.set("fund_account", item.getString("zj_account"));
				outItem.set("contract_status", "0");
				outItem.set("money_type", ThirdInterfaceConstant.MONEY_TYPE_RMB);
				outItem.set("bankToSecurity_flag", item.getString("banktosecurity_flag")); //银行转证券密码标示 0-不需认证,1-资金密码,2-交易密码,3-外部机构账号密码
				outItem.set("securityToBank_flag", item.getString("securitytobank_flag")); //银行转证券密码标示 0-不需认证,1-资金密码,2-交易密码,3-外部机构账号密码
				result.add(outItem);
			}
		}
		return result;
	}
	
	@Override
	public List<DataRow> getAssetInfo(DataRow thirdInput)
	{
		
		DataRow outData = new DataRow();
		List<DataRow> outList = new ArrayList<DataRow>();
		String account_type = thirdInput.getString("account_type");
		String client_id = thirdInput.getString("client_id");
		String op_account= thirdInput.getString("fund_account");
		if (ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ.equals(account_type))
		{
			StringBuffer sql = new StringBuffer();
			sql.append(" select * from t_test_user_ext_info uei where 1=1 ");
			sql.append(" and uei.client_id = ? and fundtype = ? and account=? ");
			DataRow dr = getJdbcTemplate().queryMap(sql.toString(), new Object[] { client_id, account_type, op_account});
			if(dr!=null&&dr.size()>0){
				outData.set("stkvalue", dr.getString("stkvalue"));//证券市值
				outData.set("fund_account", dr.getString("account"));
				outData.set("marketvalue", dr.getString("marketvalue"));//总资产
				outData.set("fund", dr.getString("fund")); //资金资产
				outData.set("fundbal", dr.getString("fundbal")); //余额fundbal
				outData.set("available_balance", dr.getString("available_balance"));//可用资金
				outData.set("fetch_balance", dr.getString("fetch_balance"));//可取资金
				outData.set("net_asset", dr.getString("marketvalue"));//净资产（信用账户）
			}
			outList.add(outData);
			return outList;
		}
		else if (ThirdInterfaceConstant.USER_ACCOUNT_TYPE_XY.equals(account_type))
		{
			String sql = "select * from t_test_user_ext_info uei left join t_test_user_xyassetextend xyasext on uei.client_id = xyasext.client_id and xyasext.account = uei.account where uei.client_id = ? and uei.fundtype = ? ";
			DataRow dr = getJdbcTemplate().queryMap(sql.toString(), new Object[] { client_id, account_type });
			if(dr!=null&&dr.size()>0){
				outData.set("fundid", dr.getString("account"));
				//t_test_user_ext_info表数据
				outData.set("fetch_balance", dr.getString("fetch_balance")); //可取资金
				outData.set("stkvalue", dr.getString("stkvalue")); //证券市值
				outData.set("marketvalue", dr.getString("marketvalue")); //资产总值
				//t_test_user_xyassetextend表数据
				outData.set("fund_asset", dr.getString("fund_asset")); //现金金额
				outData.set("total_debt", dr.getString("total_debt")); //总负债
				outData.set("fin_income", dr.getString("fin_income")); //融资合约盈亏
				outData.set("slo_income", dr.getString("slo_income")); //融券合约盈亏 说明：融资合约盈亏+融券合约盈亏
				outData.set("enable_bail_balance", dr.getString("enable_bail_balance")); //可用保证金
				outData.set("used_bail_balance", dr.getString("used_bail_balance")); //已用保证金
				outData.set("per_assurescale_value", dr.getString("per_assurescale_value")); //个人维持担保比例
				outData.set("assure_secudis_balance", dr.getString("assure_secudis_balance")); //证券担保折算资产  冲抵证券
				outData.set("net_asset", dr.getString("net_asset"));//净资产（信用账户）
				if (StringUtils.isBlank(dr.getString("net_asset")))
				{
					outData.set("net_asset", 0);//净资产（信用账户）
				}
				outData.set("fin_compact_balance", dr.getString("fin_compact_balance")); //融资合约金额
				outData.set("fin_compact_fare", dr.getString("fin_compact_fare")); //融资合约费用
				outData.set("fin_compact_interest", dr.getString("fin_compact_interest")); //融资合约利息
				outData.set("fin_market_value", dr.getString("fin_market_value")); //融资市值
				outData.set("slo_compact_balance", dr.getString("slo_compact_balance")); //融券合约金额
				outData.set("slo_compact_fare", dr.getString("slo_compact_fare")); //融券合约费用
				outData.set("slo_compact_interest", dr.getString("slo_compact_interest")); //融券合约利息
				outData.set("slo_market_value", dr.getString("slo_market_value")); //融券市值
			}
			outList.add(outData);
			return outList;
		}
		else if (ThirdInterfaceConstant.USER_ACCOUNT_TYPE_LC.equals(account_type))
		{
			StringBuffer sql = new StringBuffer();
			sql.append(" select * from t_test_user_ext_info uei where 1=1 ");
			sql.append(" and uei.client_id = ? and fundtype = ?");
			DataRow dr = getJdbcTemplate().queryMap(sql.toString(), new Object[] { client_id, account_type });
			outData.set("stkvalue", dr.getString("stkvalue"));//证券市值
			outData.set("fundid", dr.getString("account"));
			outData.set("marketvalue", dr.getString("marketvalue"));//总资产
			outData.set("fund", dr.getString("fund")); //资金资产
			outData.set("fundbal", dr.getString("fundbal")); //余额
			outData.set("available_balance", dr.getString("available_balance"));//可用资金
			outData.set("fetch_balance", dr.getString("fetch_balance"));//可取资金
			outData.set("net_asset", dr.getString("marketvalue"));//净资产（信用账户）
			outList.add(outData);
			return outList;
		}
		return outList;
	}
	
	@Override
	public List<DataRow> queryBillList(DataRow input)
	{
		String account = input.getString("account"); //资金帐号
		String client_id = input.getString("client_id");//客户号
		StringBuffer sql = new StringBuffer();
		List<String> params = new ArrayList<String>();
		sql.append(" select * from t_test_user_bill tub where 1=1 ");
		if(StringHelper.isNotEmpty(client_id)){
		 sql.append(" and tub.client_id = ? ");
		 params.add(client_id);
	   }
		if(StringHelper.isNotEmpty(account)){
			sql.append(" and tub.account = ? ");
			params.add(account);
        }
		if (!StringHelper.isBlank(input.getString("strdate")))
		{
			sql.append(" and to_date(substr(trade_date,1,10),'yyyy-MM-dd') >= to_date(substr(?,1,8),'yyyyMMdd')");
			params.add(input.getString("strdate"));
		}
		if (!StringHelper.isBlank(input.getString("enddate")))
		{
			sql.append(" and to_date(substr(trade_date,1,10),'yyyy-MM-dd') <= to_date(substr(?,1,8),'yyyyMMdd')");
			params.add(input.getString("enddate"));
		}
		sql.append(" order by tub.trade_date desc");
		List<DataRow> billList = getJdbcTemplate().query(sql.toString(), params.toArray());
		List<DataRow> outList = new ArrayList<DataRow>();
		if (billList != null && billList.size() > 0)
		{
			for (DataRow item : billList)
			{
				DataRow outData = new DataRow();
				outData.set("client_id", item.getString("client_id"));//客户id
				outData.set("account", account); //资金帐号
				outData.set("type", item.getString("type")); //账单类型 0：充值，1：提现
				outData.set("business_type", item.getString("business_type")); //业务类型 0：银证转账 1：开户转入
				outData.set("state", item.getString("state")); //账单状态 0：处理中，1：已完成，2：失败
				outData.set("amount", item.getString("amount")); //金额
				outData.set("description", item.getString("description")); //交易描述
				outData.set("trade_num", item.getString("trade_num")); //交易号
				outData.set("trade_date", item.getString("trade_date")); //交易时间
				outData.set("fundbal", item.getString("fundbal")); //账户余额
				outList.add(outData);
			}
		}
		return outList;
	}
	
	@Override
	public List<DataRow> queryXYAsset(DataRow thirdInput)
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public List<DataRow> queryStockAsset(DataRow input)
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public List<DataRow> queryRegistAccount(DataRow input)
	{
		input.set("bind_state", DictionaryConstants.BOL_TRUE);
		return this.queryTrdaccount(input);
	}
	
	@Override
	public List<DataRow> queryZdAccount(DataRow input)
	{
		input.set("bind_state", DictionaryConstants.BOL_FALSE);
		return this.queryTrdaccount(input);
	}
	
	@Override
	public Double getTwentyDayAverageAssets(DataRow thirdInput)
	{
		Double amount = 0.00;
		//融资融券预约，检测20日日平均交易额是否大于20W
		String sql = "select totalfundamount from t_test_shareholding_percentage where client_id = ?";
		String totalfundamount = this.getJdbcTemplate().queryString(sql, new Object[] { thirdInput.getString("client_id") });
		if (StringUtils.isNotBlank(totalfundamount))
		{
			amount = Double.valueOf(totalfundamount);
		}
		return amount;
	}
	
	@Override
	public DataRow getFirstTransactionDate(DataRow input)
	{
		DataRow output = new DataRow();
		String sql = "select firsTransactionDate from t_test_user_info where client_id =?";
		String firsTransactionDate = getJdbcTemplate().queryString(sql, new Object[] { input.getString("client_id") });
		output.set("firsTransactionDate", firsTransactionDate); //首次交易日 YYYYMMDD,没有返回空串
		return output;
	}
	
	@SuppressWarnings("unchecked")
	private List<DataRow> queryTrdaccount(DataRow input)
	{
		String client_id = input.getString("client_id");
		String stkbd = input.getString("stkbd");
		String trdacct_excls = input.getString("trdacct_excls");
		String bind_state = input.getString("bind_state");
		String sql = "select * from t_test_user_trdaccount where 1=1 and client_id = ? ";
		List<String> arr = new ArrayList<String>();
		arr.add(client_id);
		if (!StringHelper.isBlank(stkbd))
		{
			sql += " and stkbd = ?";
			arr.add(stkbd);
		}
		if (!StringHelper.isBlank(trdacct_excls))
		{
			sql += " and trdacct_excls = ?";
			arr.add(trdacct_excls);
		}
		if (!StringHelper.isBlank(bind_state))
		{
			if (DictionaryConstants.BOL_TRUE.equals(bind_state))
			{
				sql += " and bind_state != ?";
				arr.add("0");
			}
			else
			{
				sql += " and bind_state = ?";
				arr.add(bind_state);
			}
		}
		List<DataRow> sysData = getJdbcTemplate().query(sql, arr.toArray());
		List<DataRow> resultList = new ArrayList<DataRow>();
		if (sysData != null && sysData.size() != 0)
		{ //有数据
			for (int i = 0; i < sysData.size(); i++)
			{
				DataRow item = sysData.get(i);
				item.set("trdacct_status", item.getString("state"));
				resultList.add(item);
			}
		}
		return resultList;
	}
	
	/**
	 * @描述：根据资金账号获取风险测评信息(接口文档是否提供：NO)
	 * @作者：刘恺
	 * @时间：2014-10-20 下午07:25:47
	 * @param user_id
	 * @param zj_account
	 * @return
	 * @throws Exception
	 */
	public DataRow getQuestionnaire(DataRow input)
	{
		String client_id = input.getString("client_id");
		String zj_account = input.getString("account");
		String survey_sn = input.getString("survey_sn");
		String sql = " select id,risklevel,riskvalue, client_id, account, risk, out_date from t_test_risklevel t where t.client_id = ? and t.account = ? and t.survey_sn = ? ";
		DataRow dr = getJdbcTemplate().queryMap(sql, new Object[] { client_id, zj_account, survey_sn });
		if (dr != null)
		{
			String date = dr.getString("out_date");
			if(date==null||date==""){
				dr.set("status", ThirdDictionaryConstants.SFCG_STATUS_NONEXISTENT);
			}else{
				//0已失效；1未失效
				boolean flag = ToolsHelper.compareDate(date);
				if (flag)
				{
					//未失效
					dr.set("status", ThirdDictionaryConstants.SFCG_STATUS_VALID);
				}
				else
				{
					dr.set("status", ThirdDictionaryConstants.SFCG_STATUS_INVALID);
				}
			}
			
		}
		if (dr == null)
		{
			dr = new DataRow();
			dr.set("status", ThirdDictionaryConstants.SFCG_STATUS_NONEXISTENT);
			//			dr.set("risklevel", "B");
			//			dr.set("riskvalue", "78");
			//			dr.set("subitemname", "保险型");
			return dr;
		}
		dr.set("upddate", "");
		dr.set("subitemname", dr.getString("risk"));
		return dr;
	}
	
	public DataRow addOrUpdateQuestionnaire(DataRow input)
	{
		String client_id = input.getString("client_id");
		String account = input.getString("account");
		String risk = input.getString("riskName");
		String risklevel = input.getString("riskLevel");
		String riskvalue = input.getString("riskValue");
		String survey_sn = input.getString("survey_sn");
		String answer = input.getString("answer");
		if (StringUtils.isBlank(riskvalue))
		{
			int score = 0;
			String[] args = answer.split("\\|");
			if (args != null && args.length > 0)
			{
				for (int i = 0; i < args.length; i++)
				{
					
					String q_a_row = args[i];
					if (q_a_row != null && !"".equals(q_a_row))
					{
						String[] q_a = q_a_row.split("_");
						if (q_a != null && q_a.length == 3)
						{
							DataRow data = new DataRow();
							data.set("que_id", q_a[0]);
							data.set("ans_id", q_a[1]);
							data.set("remark1", q_a[2]);
							String mark = q_a[2];
							
							if (mark == null || "null".equals(mark))
							{
								mark = "0";
							}
							score += Integer.valueOf(mark);
						}
					}
				}
			}
			riskvalue = score + "";
		}
		String sql = " select id,risklevel,riskvalue,client_id, account, risk, out_date from t_test_risklevel t where t.client_id = ? and t.account = ? and t.survey_sn = ? ";
		DataRow riskRow = getJdbcTemplate().queryMap(sql, new Object[] { client_id, account, survey_sn });
		if (StringHelper.isBlank(risklevel))
		{
			if (Integer.parseInt(riskvalue) < 20)
			{
				risklevel = "E";
				risk = "保守型C1";
			}
			if (20 <= Integer.parseInt(riskvalue) && Integer.parseInt(riskvalue) <= 36)
			{
				risklevel = "D";
				risk = "谨慎型C2";
			}
			if (37 <= Integer.parseInt(riskvalue)&& Integer.parseInt(riskvalue) <= 53)
			{
				risklevel = "C";
				risk = "稳健型C3";
			}
			if (54 <= Integer.parseInt(riskvalue)&& Integer.parseInt(riskvalue) <= 82)
			{
				risklevel = "B";
				risk = "积极型C4";
			}
			if (83 <= Integer.parseInt(riskvalue))
			{
				risklevel = "A";
				risk = "激进型C5";
			}
		}
		if (riskRow != null && riskRow.size() > 0)
		{
			//获取当前日期n年后的日期
			String out_date = ToolsHelper.getDateAfterYear(2);
			riskRow.set("out_date", out_date);
			riskRow.set("risklevel", risklevel);
			riskRow.set("risk", risk);
			riskRow.set("riskvalue", riskvalue);
			getJdbcTemplate().update("t_test_risklevel", riskRow, "id", riskRow.getString("id"));
		}
		else
		{
			riskRow = new DataRow();
			String id = getSeqValue(SystemConstants.DB_ISMP, "t_test_risklevel");
			riskRow.set("id", id);
			riskRow.set("client_id", client_id);
			riskRow.set("account", account);
			riskRow.set("risk", risk);
			riskRow.set("risklevel", risklevel);
			riskRow.set("riskvalue", riskvalue);
			riskRow.set("survey_sn", survey_sn);
			
			//获取当前日期n年后的日期
			String out_date = ToolsHelper.getDateAfterYear(2);
			riskRow.set("out_date", out_date);
			getJdbcTemplate().insert("t_test_risklevel", riskRow);
		}
		DataRow output = new DataRow();
		output.set("risklevel", riskRow.getString("risklevel"));
		output.set("subitemname", riskRow.getString("risk"));
		output.set("riskvalue", riskRow.getString("riskvalue"));
		return output;
	}
	
	@Override
	public DataRow accountBindBankCard(DataRow input)
	{
		String client_id = input.getString("client_id");
		String bank_code = input.getString("bank_code");
		String bank_num = input.getString("card_num");
		String zj_account = input.getString("account");
		String id = getSeqValue(SystemConstants.DB_ISMP, "t_test_user_bank");
		DataRow dr = new DataRow();
		dr.set("id", id);//主键ID
		dr.set("client_id", client_id);
		dr.set("bank_no", bank_code);
		dr.set("bank_num", bank_num);
		dr.set("main_fundaccount", zj_account);
		//如果数据库中没有主卡，则绑定的是主卡
		String querybank = "select count(*) from t_test_user_bank where client_id = ? and status = '0' and zj_account = ? ";
		int count = getJdbcTemplate().queryInt(querybank, new Object[] { client_id, zj_account });
		if (0 == count)
		{
			dr.set("status", "0");
			dr.set("zj_account", zj_account);
		}
		else
		{
			dr.set("status", "1");
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.YEAR, 10);
			Long ss = calendar.getTime().getTime();
			String num = ss.toString().substring(1);
			dr.set("zj_account", num);
		}
		getJdbcTemplate().insert("t_test_user_bank", dr);
		DataRow returnDr = new DataRow();
		returnDr.set("flag", true); //true-销卡成功；false-销卡失败
		returnDr.set("message", "绑定成功"); //绑定成功
		return returnDr;
	}
	
	@Override
	public String hasTodayWt(DataRow input)
	{
		return DictionaryConstants.BOL_FALSE;
	}
	
	@Override
	public String hasBanktransFerflow(DataRow input)
	{
		
		Date nowDate = new Date();
		input.set("strdate", DateHelper.formatDate(nowDate, "yyyyMMdd"));
		input.set("enddate", DateHelper.formatDate(nowDate, "yyyyMMdd"));
		List<DataRow> resultList = this.queryBankTransferFlow(input);
		if (resultList == null || resultList.size() == 0)
		{
			return DictionaryConstants.BOL_FALSE;
		}
		return DictionaryConstants.BOL_TRUE;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryBankTransferFlow(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String op_account = thirdInput.getString("op_account");
		String strdate = thirdInput.getString("strdate");
		String enddate = thirdInput.getString("enddate");
		String sql = "select * from t_test_banktransfer where client_id = ? and fund_account = ? ";
		List<String> params = new ArrayList<String>();
		params.add(client_id);
		params.add(op_account);
		if (StringUtils.isNotBlank(strdate))
		{
			if (SystemConstants.DB_TYPE_MYSQL.equals(dbtype))
			{
				sql += " and date_format(?,'%Y-%m-%d') <= date_format(substr(entrust_time,1,10),'%Y-%m-%d')";
				params.add(strdate);
			}
			else if (SystemConstants.DB_TYPE_ORACLE.equals(dbtype))
			{
				sql += " and to_date(?,'yyyy-MM-dd') <= to_date(substr(entrust_time,1,10),'yyyy-MM-dd')";
				params.add(strdate);
			}
		}
		if (StringUtils.isNotBlank(enddate))
		{
			if (SystemConstants.DB_TYPE_MYSQL.equals(dbtype))
			{
				sql += " and date_format(?,'%Y-%m-%d') >= date_format(substr(entrust_time,1,10),'%Y-%m-%d')";
				params.add(enddate);
			}
			else if (SystemConstants.DB_TYPE_ORACLE.equals(dbtype))
			{
				sql += " and to_date(?,'yyyy-MM-dd') >= to_date(substr(entrust_time,1,10),'yyyy-MM-dd')";
				params.add(enddate);
			}
		}
		List<DataRow> resultList = getJdbcTemplate().query(sql, params.toArray());
		List<DataRow> outputList = new ArrayList<DataRow>();
		for (int i = 0; i < resultList.size(); i++)
		{
			DataRow resultItem = (DataRow) resultList.get(i);
			DataRow outputItem = new DataRow();
			outputItem.set("client_id", resultItem.getString("client_id"));//客户号
			outputItem.set("fund_account", resultItem.getString("fund_account"));//资金账号
			outputItem.set("bank_name", resultItem.getString("bank_name"));//银行名称
			outputItem.set("banktype", resultItem.getString("banktype"));//银行代码
			outputItem.set("entrust_time", resultItem.getString("entrust_time"));//委托时间
			outputItem.set("entrust_status", resultItem.getString("entrust_status"));//委托状态（数据字典）
			outputItem.set("entrust_error_info", resultItem.getString("entrust_error_info"));//废单原因+银行错误信息
			outputItem.set("transfer_balance", resultItem.getString("transfer_balance"));//交易金额
			outputItem.set("transfer_info", resultItem.getString("transfer_info"));//交易类型描述
			outputItem.set("transfer_type", resultItem.getString("transfer_type"));//交易类型
			outputList.add(outputItem);
		}
		return outputList;
	}
	
	@Override
	public String hasZtBusiness(DataRow thirdInput)
	{
		return DictionaryConstants.BOL_FALSE;
	}
	
	@Override
	public DataRow cancelAccountBindBankCard(DataRow input)
	{
		DataRow dr = new DataRow();
		String client_id = input.getString("client_id");
		String op_account = input.getString("op_account");
		String bank_code = input.getString("bank_code");
		//验证资金密码
		String sql = " delete t_test_user_bank where client_id = ? and bank_no = ? and zj_account = ? ";
		//删除解除绑定的银行卡数据
		getJdbcTemplate().update(sql, new Object[] { client_id, bank_code, op_account });
		dr.set("flag", true); //true-销卡成功；false-销卡失败
		dr.set("message", "销卡成功"); //销卡结果说明
		return dr;
	}
	
	@Override
	public DataRow checkLogin(String account, String password, String loginType,String opStation)
	{
		
		//检查客户信息证件类型是否是身份类型
		String sqlNew = "select * from t_Test_User_Info fo where fo.client_id=(select client_id from t_test_user_account nt where nt.account=?) ";
		DataRow dataRowUser = getJdbcTemplate().queryMap(sqlNew, new Object[] { account });
		
	
		if(dataRowUser!=null&&dataRowUser.size()>0){
			if(!"00".equals(dataRowUser.getString("identity_type"))){
				throw new BusinessException(ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_IDENTITY_TYPE);
			}
		}else{
			throw new BusinessException(ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_NULL);
		}
	 
	
		//检查客户委托方式开通情况
	    //step3:根据资金账号从第三方接口获取该资金账号开通的委托方式
		String sql1 = "select * from t_test_wtfs where client_id =(select fo.client_id from t_test_user_account fo where fo.account=?)";
		DataRow dr = getJdbcTemplate().queryMap(sql1, new Object[] { account });
		if (dr != null)
		{
			String entrusts = dr.getString("entrust_code");
			if(entrusts.indexOf("2")<0){
		    	throw new BusinessException(ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_OPERWAYITEM);
		    }
		}
		 //检查资金账号货币类型
		 String sql2 = "select * from t_test_user_bank  nk where nk.zj_account=?";
		 DataRow moneytypeData = getJdbcTemplate().queryMap(sql2, new Object[] { account });
		 
		 if(moneytypeData!=null&&moneytypeData.size()>0){
			 String data = moneytypeData.getString("money_type");
			 int nub = data.indexOf(data);
			 if(nub!=0){
				 throw new BusinessException(ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_MONEY_TYPE);
			 }
		 }
		
		//检查帐号是否正常
		String sqls = "select * from t_test_user_account fo where fo.account=?";
		DataRow dataRow = this.getJdbcTemplate().queryMap(sqls, new Object[] { account});
		String sqls1 ="select * from t_test_user_trdaccount tr where tr.client_id=?";
		List<DataRow> dataRows = this.getJdbcTemplate().query(sqls1, new Object[] { dataRow.getString("client_id")});
		 String state="0";
		 String trdacct_excls="0";
			boolean flag =true;
			
				if(dataRow.getString("state").equals("1")){
					throw new BusinessException(
							ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_STATE);
				}else if(dataRow.getString("state").equals("2")){
					throw new BusinessException(
							ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_MONEY_TYPE_XH);
				}
			for (int i = 0; i < dataRows.size(); i++) {
				if(dataRows.get(i).getString("trdacct_excls").equals("1")){
					trdacct_excls="1";
				}
			}
		
		   if ("1".equals(trdacct_excls)){
				throw new BusinessException(
						ErrorCodeBusiness.LOGIN_LOGINPWDERROTIME_TRDACCT_EXCLS);
			}
			
		DataRow thirdUserInfo = null;
		if (ThirdTBASConstants.LOGIN_TYPE_CAPITALACCOUNT.equals(loginType))
		{
			String sql = "select client_id,org_id from t_test_user_info where client_id = (select client_id from T_TEST_USER_ACCOUNT where account = ? and password = ?)";
			thirdUserInfo = this.getJdbcTemplate().queryMap(sql, new Object[] { account, password });
		}
		else if (ThirdTBASConstants.LOGIN_TYPE_TRDACCOUNT.equals(loginType))
		{
			String sql = "select tui.client_id,tui.org_id,tua.account from t_test_user_info tui left join t_test_user_account tua on tui.client_id = tua.client_id left join t_test_user_trdaccount tuta on tuta.client_id = tua.client_id and tuta.ZJACC_TYPE = tua.account_type where tuta.trdacct = ? and password = ?";
			thirdUserInfo = this.getJdbcTemplate().queryMap(sql, new Object[] { account, password });
		}
		else if (ThirdTBASConstants.LOGIN_TYPE_CLIENTID.equals(loginType))
		{
			String sql = "select * from t_test_user_info where client_id = ? and password = ?";
			thirdUserInfo = this.getJdbcTemplate().queryMap(sql, new Object[] { account, password });
		}
		DataRow resultRow = new DataRow();
		if (thirdUserInfo == null)
		{
			resultRow.set("loginflag", false);
			resultRow.set("msg", "帐号或密码错误！");
			return resultRow;
		}
		resultRow.set("loginflag", true);//true登录成功
		resultRow.set("msg", "登录成功！");
		resultRow.set("client_id", thirdUserInfo.getString("client_id"));
		resultRow.set("org_id", thirdUserInfo.getString("org_id"));
		resultRow.set("fund_account", thirdUserInfo.getString("account"));
		resultRow.set("error_no", "0");
		return resultRow;
	}
	
	@Override
	public List<DataRow> queryStockEntrustRecord(DataRow input)
	{
		// TODO 查询证券委托交易记录
		List<DataRow> list = new ArrayList<DataRow>();
		return list;
	}
	
	
	public List<DataRow> getAccoutFlag(DataRow input)
	{
		    String fund_account =input.getString("fund_account");
			String sqls = "select * from t_test_user_trdaccount tr where tr.client_id=(select fo.client_id from t_test_user_account fo where fo.account=?)";
			List<DataRow> dataRow = this.getJdbcTemplate().query(sqls, new Object[] { fund_account});	
		    return dataRow;
	}
	
	@Override
	public void jiexiBankCard(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String account = thirdInput.getString("op_account");
		String sql = "update t_test_user_ext_info set fundbal = fundbal+10,marketvalue = marketvalue+10,available_balance = available_balance+10,fetch_balance = fetch_balance+10 where client_id = ? and account = ? ";
		this.getJdbcTemplate().update(sql, new Object[] { client_id, account });
		
	}
	
	/**
	 * @描述：根据资金账号查询用户信息(接口文档是否提供：YES)
	 * @作者：吴江波
	 * @时间：2014-10-21 上午11:08:33
	 * @param account
	 * @return
	 * @throws Exception
	 */
	public DataRow queryUserInfoByAccount(DataRow input) throws Exception
	{
		String account = input.getString("account");
		String password = input.getString("password");
		String client_id = input.getString("client_id");
		String identity_num = input.getString("identity_num");
		String name = input.getString("name");
		String sql = "select * from t_test_user_info where client_id = (select client_id from T_TEST_USER_ACCOUNT where account = ? and password = ?)";
		List<String> param = new LinkedList<String>();
		param.add(account);
		param.add(password);
		if (!StringHelper.isBlank(client_id))
		{
			sql = "select * from t_test_user_info where client_id = ?";
			param.clear();
			param.add(client_id);
		}
		else if (!StringHelper.isBlank(account) && !StringHelper.isBlank(password))
		{
			sql = "select * from t_test_user_info where client_id = (select client_id from T_TEST_USER_ACCOUNT where account = ? and password = ?)";
			param.clear();
			param.add(account);
			param.add(password);
		}
		else if (!StringHelper.isBlank(identity_num) && !StringHelper.isBlank(name) && !StringHelper.isBlank(account))
		{
			sql = "select * from t_test_user_info where client_id = (select client_id from T_TEST_USER_ACCOUNT where account = ? ) and identity_num = ? and name = ? ";
			param.clear();
			param.add(account);
			param.add(identity_num);
			param.add(name);
		}
		else if (!StringHelper.isBlank(identity_num) && !StringHelper.isBlank(name))
		{
			sql = "select * from t_test_user_info where identity_num = ? and name = ? ";
			param.clear();
			param.add(identity_num);
			param.add(name);
		}
		//如果无客户号，则试用身份证信息查询
		DataRow thirdUserInfo = this.getJdbcTemplate().queryMap(sql, param.toArray());
		DataRow resultRow = new DataRow();
		if (thirdUserInfo != null && !thirdUserInfo.isEmpty())
		{
			resultRow.set("account", account);//资金账号
			resultRow.set("identity_type", thirdUserInfo.getString("identity_type"));//00表示证件类型为：身份证
			resultRow.set("identity_num", thirdUserInfo.getString("identity_num"));//身份证号
			resultRow.set("name", thirdUserInfo.getString("name"));//姓名
			resultRow.set("nick_name", thirdUserInfo.getString("nick_name"));//昵称
			resultRow.set("sex", thirdUserInfo.getString("sex"));//性别
			resultRow.set("birthday", thirdUserInfo.getString("birthday"));//生日
			resultRow.set("mobile", thirdUserInfo.getString("mobile"));//手机号码
			resultRow.set("email", thirdUserInfo.getString("email"));//电子邮箱
			resultRow.set("telephone", thirdUserInfo.getString("telephone"));//联系电话
			resultRow.set("address", thirdUserInfo.getString("address"));//联系地址
			resultRow.set("post_code", thirdUserInfo.getString("post_code"));//邮政编码
			resultRow.set("country", thirdUserInfo.getString("country"));//156表示国籍：中国
			resultRow.set("sign_office", thirdUserInfo.getString("sign_office"));//签发机关
			resultRow.set("papers_addr", thirdUserInfo.getString("papers_addr"));//证件地址
			resultRow.set("validity_begin", thirdUserInfo.getString("validity_begin"));//证件有效期开始
			resultRow.set("validity_end", thirdUserInfo.getString("validity_end"));//证件有效期结束
			resultRow.set("occupational", thirdUserInfo.getString("occupational"));//职业（1专业技术人员）
			resultRow.set("adapter", thirdUserInfo.getString("adapter"));//学历（2学士）
			resultRow.set("is_freeze", "0");//是否冻结(0正常，1冻结)
			resultRow.set("client_id", thirdUserInfo.getString("client_id"));
			resultRow.set("branch_no", thirdUserInfo.getString("org_id"));
			resultRow.set("org_id", thirdUserInfo.getString("org_id"));
			resultRow.set("control_person", thirdUserInfo.getString("control_person"));
			resultRow.set("benefit_person", thirdUserInfo.getString("benefit_person"));
			resultRow.set("credit_record", thirdUserInfo.getString("credit_record"));
		}
		return resultRow;
	}
	
	@Override
	public DataRow getEntrustOpenInfo(DataRow input) throws Exception
	{
		String fund_account = input.getString("fund_account");
		String sql1 = "select * from t_test_wtfs where client_id =(select fo.client_id from t_test_user_account fo where fo.account=?)";
		DataRow dr = getJdbcTemplate().queryMap(sql1, new Object[] { fund_account });
		DataRow result = new DataRow();
		if (dr != null)
		{
			String entrusts = dr.getString("entrust_code");
			char[] operwayArr = entrusts.toCharArray();
			List<String> outputList = new ArrayList<String>();
			for (int i = 0; i < operwayArr.length; i++)
			{
				char operwayItem = operwayArr[i];
				outputList.add(String.valueOf(operwayItem));
			}
			result.set("entrustString", entrusts);
			result.set("entrustList", outputList);
		}
		return result;
	}
	
	@Override
	public DataRow getMoneyType(DataRow input) throws Exception
	{
		String fund_account = input.getString("fund_account");
		String sql = "select * from t_test_user_bank  nk where nk.zj_account=?";
		DataRow dr = getJdbcTemplate().queryMap(sql, new Object[] { fund_account });
		return dr;
	}
	
	
	@Override
	public DataRow ChangeEntrust(DataRow input) throws Exception
	{
		DataRow dr = new DataRow();
		String client_id = input.getString("client_id");
		String entrust_code = input.getString("newoperway");
		String sql = " update t_test_wtfs set entrust_code = ? where client_id = ? ";
		getJdbcTemplate().update(sql, new Object[] { entrust_code, client_id });
		dr.set(ThirdDictionaryConstants.DATAROWSTATUS, DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		return dr;
	}
	
	@Override
	public DataRow closeEntrust(DataRow dr) throws Exception
	{
		//status：0未开通；1已开通
		DataRow returnDr = new DataRow();
		String sql = " update t_test_wtfs set status = ? where user_id = ? and entrust_code = ?";
		getJdbcTemplate().update(sql, new Object[] { ThirdDictionaryConstants.WTFS_CLOSE, dr.getString("user_id"), dr.getString("entrust_code") });
		returnDr.set(ThirdDictionaryConstants.DATAROWSTATUS, DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		return returnDr;
	}
	
	@Override
	public DataRow updateUserInfo(DataRow dr) throws Exception
	{
		String identity_num = dr.getString("identity_num");
		String identity_type = dr.getString("identity_type");
		String occupational = dr.getString("occupational");
		String mobile = dr.getString("mobile");
		String telephone = dr.getString("telephone");
		String email = dr.getString("email");
		String address = dr.getString("address");
		String post_code = dr.getString("post_code");
		String adapter = dr.getString("adapter");
		String control_person = dr.getString("control_person");
		String benefit_person = dr.getString("benefit_person");
		String credit_record = dr.getString("credit_record");
		
		DataRow inputParam = new DataRow();
		inputParam.set("account", dr.getString("account"));
		inputParam.set("orgid", dr.getString("org_id"));
		inputParam.set("password", dr.getString("password"));
		inputParam.set("custid", dr.getString("client_id"));
		DataRow updateData = new DataRow();
		if (StringHelper.isNotBlank(identity_num))
		{
			inputParam.set("idno", identity_num);
			updateData.set("identity_num", identity_num);
		}
		if (StringHelper.isNotBlank(identity_type))
		{
			inputParam.set("idtype", identity_type);
			updateData.set("identity_type", identity_type);
		}
		if (StringHelper.isNotBlank(mobile))
		{
			inputParam.set("mobileno", mobile);
			updateData.set("mobile", mobile);
		}
		if (StringHelper.isNotBlank(telephone))
		{
			inputParam.set("telno", telephone);
			updateData.set("telephone", telephone);
		}
		if (StringHelper.isNotBlank(email))
		{
			inputParam.set("email", email);
			updateData.set("email", email);
		}
		if (StringHelper.isNotBlank(address))
		{
			inputParam.set("addr", address);
			updateData.set("address", address);
		}
		if (StringHelper.isNotBlank(post_code))
		{
			inputParam.set("postid", post_code);
			updateData.set("post_code", post_code);
		}
		if (StringHelper.isNotBlank(adapter))
		{
			inputParam.set("edu", adapter);
			updateData.set("adapter", adapter);
		}
		if (StringHelper.isNotBlank(occupational))
		{
			inputParam.set("occtype", occupational);
			updateData.set("occupational", occupational);
		}
		
		if (StringHelper.isNotBlank(control_person))
		{
			inputParam.set("control_person", control_person);
			updateData.set("control_person", control_person);
		}
		
		if (StringHelper.isNotBlank(benefit_person))
		{
			inputParam.set("benefit_person", benefit_person);
			updateData.set("benefit_person", benefit_person);
		}
		
		if (StringHelper.isNotBlank(credit_record))
		{
			inputParam.set("credit_record", credit_record);
			updateData.set("credit_record", credit_record);
		}
		
		int nub=this.getJdbcTemplate().update("t_test_user_info", updateData, "client_id", dr.getString("client_id"));
		if(nub==0){
			updateData.set("client_id", dr.getString("client_id"));
			this.getJdbcTemplate().insert("t_test_user_info", updateData);
		}
		DataRow returnDr = new DataRow();
		returnDr.set(ThirdDictionaryConstants.DATAROWSTATUS, DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		return returnDr;
	}
	
	@Override
	public void updateContact(DataRow contact)
	{
		String linkman_id = contact.getString("emergency_id");
		String linkman_name = contact.getString("emergency_name");
		String linkman_relation = contact.getString("emergency_relation");
		String linkman_tel = contact.getString("emergency_tel");
		String linkman_mobile = contact.getString("emergency_mobile");
		String linkman_email = contact.getString("emergency_email");
		String linkman_address = contact.getString("emergency_address");
		DataRow linkMan = new DataRow();
		linkMan.set("client_id", contact.getString("client_id"));
		linkMan.set("linkman_name", linkman_name);
		linkMan.set("linkman_relation", linkman_relation);
		linkMan.set("linkman_tel", linkman_tel);
		linkMan.set("linkman_mobile", linkman_mobile);
		linkMan.set("linkman_email", linkman_email);
		linkMan.set("linkman_address", linkman_address);
		linkMan.set("fund_account", contact.getString("fund_account"));
		//更新
		if (StringUtils.isNotBlank(linkman_id))
		{
			linkMan.set("linkman_id", linkman_id);
			getJdbcTemplate().update("t_test_user_linkman", linkMan, "linkman_id", linkman_id);
		}
		else
		{
			
			linkMan.set("linkman_id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_linkman"));
			getJdbcTemplate().insert("t_test_user_linkman", linkMan);
		}
		
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public DataRow updateBusinessPwd(DataRow input)
	{
		String client_id = input.getString("client_id");
		String account = input.getString("account");
		String newpwd = input.getString("newpwd");
		String oldpwd = input.getString("password");
		
		String qureySql = "select * from t_test_user_account where client_id = ? and account = ? and password = ?";
		DataRow sysData = this.getJdbcTemplate().queryMap(qureySql, new Object[] { client_id, account, oldpwd });
		if (sysData == null)
		{
			throw new InvokeException(-711, "原帐号密码不匹配");
		}
		String sql = "update t_test_user_account set password = ? where client_id = ? and account = ?";
		this.getJdbcTemplate().update(sql, new Object[] { newpwd, client_id, account });
		DataRow outData = new DataRow();
		return outData;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public DataRow updateZjPassword(DataRow input)
	{
		String oldpwd = input.getString("oldpwd");
		String newpwd = input.getString("newpwd");
		String client_id = input.getString("client_id");
		String account = input.getString("account");
		String qureySql = "select * from t_test_user_account where client_id = ? and account = ? and fundpassword = ?";
		DataRow sysData = this.getJdbcTemplate().queryMap(qureySql, new Object[] { client_id, account, oldpwd });
		if (sysData == null)
		{
			throw new InvokeException(-711, "原帐号密码不匹配");
		}
		String sql = "update t_test_user_account set fundpassword = ? where client_id = ? and account = ?";
		this.getJdbcTemplate().update(sql, new Object[] { newpwd, client_id, account });
		DataRow outData = new DataRow();
		return outData;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public DataRow OprAccount(DataRow dataRow) throws Exception
	{
		StringBuffer sql = new StringBuffer();
		DataRow dr = new DataRow();
		String client_id = dataRow.getString("client_id");//客户号
		String fundAccount = dataRow.getString("account");//资金账号
		Double money = dataRow.getDouble("transfer_balance");//金额300-100
		String transfer_type = dataRow.getString("transfer_type");
		String opAccount = dataRow.getString("account");//操作的资金帐号
		String bankNum = dataRow.getString("bank_no");//银行卡号
		String bank_password = dataRow.getString("bank_password");//银行卡密码
		String operationpwd = "";
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_RECHARGE.equals(transfer_type))
		{//充值需要银行密码
			operationpwd = dataRow.getString("bank_password");
		}
		else if (ThirdTBASConstants.BANKTRANSFER_TYPE_WITHDRAW.equals(transfer_type))
		{
			operationpwd = dataRow.getString("fund_password");
		}
		
		DataRow testDr = getJdbcTemplate().queryMap(" select * from t_test_user_ext_info where client_id = ? and account = ?", new Object[] { client_id, fundAccount });
		Double fundbal = 0.00;
		Double marketvalue = 0.00;
		Double available_balance =0.00;
		Double fetch_balance= 0.00;
		
		if (testDr == null&&!ThirdTBASConstants.BANKTRANSFER_TYPE_RECHARGE.equals(transfer_type))
		{
			throw new InvokeException(-30, "该资金帐号下资产不存在！");
		}else if(testDr != null){
			fundbal = testDr.getDouble("fundbal");
			marketvalue = testDr.getDouble("marketvalue");
			available_balance = testDr.getDouble("available_balance");
			fetch_balance= testDr.getDouble("fetch_balance");
		}
		
		
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_WITHDRAW.equals(transfer_type) && money - fetch_balance > 0)
		{ //取款,但取款经验大于余额
			throw new InvokeException(-31, "余额不足，请重新输入金额！");
		}
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_RECHARGE.equals(transfer_type))
		{//充值，但银行卡余额不足
			String sql2 = "select * from t_test_user_bank where zj_account = ? and bank_num = ?";
			DataRow bankInfo = getJdbcTemplate().queryMap(sql2, new Object[] { opAccount, bankNum });
			if (bankInfo == null || bankInfo.isEmpty())
			{
				throw new InvokeException(-11111, "银行卡不存在");
			}
			if (!bank_password.equals(bankInfo.getString("bank_password")))
			{
				throw new InvokeException(-11111, "银行卡密码错误");
			}
			if (money > bankInfo.getDouble("balance"))
			{
				throw new InvokeException(-11111, "银行卡余额不足");
			}
		}
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_RECHARGE.equals(transfer_type))
		{//充值
			fundbal += money;
			marketvalue += money;
			available_balance += money;
			fetch_balance += money;
		}
		else if (ThirdTBASConstants.BANKTRANSFER_TYPE_WITHDRAW.equals(transfer_type))
		{//提现
			String querySql = "select count(*) from t_test_user_account where account = ? and fundpassword = ?";
			if (this.getJdbcTemplate().queryLong(querySql, new Object[] { fundAccount, operationpwd }) == 0)
			{
				throw new InvokeException(-666, "资金密码验证失败");
			}
			fundbal -= money;
			marketvalue -= money;
			available_balance -= money;
			fetch_balance -= money;
		}
		else
		{
			throw new InvokeException(-32, "充值/提现标示类型错误！");
		}
		if(testDr==null){
			DataRow data = new DataRow();
			data.set("id", this.getSeqValue("t_test_user_ext_info"));
			data.set("fundbal", fundbal);
			data.set("marketvalue", marketvalue);
			data.set("available_balance", available_balance);
			data.set("fetch_balance", fetch_balance);
			data.set("client_id", client_id);
			data.set("account", fundAccount);
			data.set("fundtype", "4");
			getJdbcTemplate().insert("t_test_user_ext_info", data);
		}else{
			sql.append(" update t_test_user_ext_info set fundbal = ?,marketvalue = ?,available_balance=?,fetch_balance=? where client_id = ? and account = ?");
			getJdbcTemplate().update(sql.toString(), new Object[] { fundbal, marketvalue, available_balance, fetch_balance, client_id, fundAccount });
		}
		dr.set("flag", DictionaryConstants.BOL_TRUE);
		//添加银证转账流水记录（模拟第三方）
		DataRow bankFlow = new DataRow();
		bankFlow.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_banktransfer"));
		bankFlow.set("client_id", client_id);
		bankFlow.set("fund_account", dataRow.getString("account"));
		BankService bankService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_BANK, BankService.class);
		BankInfoModel bankInfo = bankService.queryByBankNo(dataRow.getString("banktype"));
		if (bankInfo != null)
		{
			bankFlow.set("bank_name", bankInfo.getBankName());
		}
		bankFlow.set("banktype", dataRow.getString("banktype"));
		bankFlow.set("entrust_time", DateHelper.formatDate(new Date(), DateHelper.pattern_time));
		bankFlow.set("entrust_status", "1");
		bankFlow.set("transfer_balance", money);
		bankFlow.set("transfer_type", transfer_type);
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_WITHDRAW.equals(transfer_type))
		{
			bankFlow.set("transfer_info", "转出");
		}
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_RECHARGE.equals(transfer_type))
		{//充值
			bankFlow.set("transfer_info", "转入");
		}
		getJdbcTemplate().insert("t_test_banktransfer", bankFlow);
		//修改余额
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_WITHDRAW.equals(transfer_type) && money - fundbal > 0)
		{ //取款
			String sql3 = "update t_test_user_bank set balance = balance+" + money + " where zj_account = ?";
			getJdbcTemplate().update(sql3, new Object[] { opAccount });
		}
		if (ThirdTBASConstants.BANKTRANSFER_TYPE_RECHARGE.equals(transfer_type))
		{//充值
			String sql4 = "update t_test_user_bank set balance = balance-" + money + " where zj_account = ?";
			getJdbcTemplate().update(sql4, new Object[] { opAccount });
		}
		return dr;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryZJAccount(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String sql = "select * from t_test_user_account where client_id = ?";
		List<DataRow> zjAccList = this.getJdbcTemplate().query(sql, new Object[] { client_id });
		List<DataRow> outPutList = new ArrayList<DataRow>();
		if (zjAccList != null && zjAccList.size() != 0)
		{
			for (int i = 0; i < zjAccList.size(); i++)
			{
				DataRow item = zjAccList.get(i);
				DataRow outItem = new DataRow();
				outItem.set("client_id", item.getString("client_id"));
				outItem.set("bronch_no", item.getString("bronch_no")); //营业部
				outItem.set("fund_account", item.getString("account")); //资金帐号
				outItem.set("main_flag", DictionaryConstants.BOL_TRUE); //是否为住资金帐号  0：辅 1：主
				outItem.set("fundacc_type", item.getString("account_type")); //帐号类型
				outItem.set("open_date", item.getString("open_date")); //开通日期
				outPutList.add(outItem);
			}
		}
		return outPutList;
	}
	
	@Override
	public DataRow signAgreement(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		DataRow dataRow = new DataRow();
		dataRow.set("client_id", client_id);
		dataRow.set("fund_account", thirdInput.getString("account"));
		dataRow.set("authority_type", "dzqmyds");
		dataRow.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_zjaccount_authority"));
		this.getJdbcTemplate().insert("t_test_zjaccount_authority", dataRow);
		return null;
	}
	
	@Override
	public List<DataRow> queryAgreement(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String sql = "select * from t_test_zjaccount_authority where client_id = ? and authority_type = ?";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, "dzqmyds" });
		List<DataRow> outPutList = new ArrayList<DataRow>();
		DataRow outItem = new DataRow();
		outItem.set("sign_flag", DictionaryConstants.BOL_TRUE);
		if (authoritys == null)
		{
			outItem.set("sign_flag", DictionaryConstants.BOL_FALSE);
		}
		outPutList.add(outItem);
		return outPutList;
	}
	
	@Override
	public void openGznhg(DataRow input)
	{
		String client_id = input.getString("client_id");
		String trdaccount = input.getString("trdaccount");
		String gzjhgType = ThirdTBASConstants.AUTHORITY_TYPE_HGRQ;
		String sql = "select * from t_test_user_authority where client_id = ? and cust_agmt_type = ? and trdaccount = ?";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, gzjhgType, trdaccount });
		if (authoritys == null || authoritys.isEmpty())
		{
			DataRow data = new DataRow();
			data.set("trdaccount", input.getString("trdaccount"));
			data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_authority"));
			data.set("client_id", client_id);
			data.set("cust_agmt_type", gzjhgType);
			data.set("eft_date", "2014-09-09 19:22:33");
			data.set("exp_date", "2024-09-09 19:22:33");
			data.set("cuacct_code", input.getString("fund_account"));
			this.getJdbcTemplate().insert("t_test_user_authority", data);
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryAuthority(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String sql = "SELECT ID,CLIENT_ID,TRDACCOUNT TRDACCT,CUST_AGMT_TYPE,EFT_DATE,EXP_DATE,CUACCT_CODE,STKBD FROM T_TEST_USER_AUTHORITY WHERE CLIENT_ID = ?";
		List<DataRow> authoritys = this.getJdbcTemplate().query(sql, new Object[] { client_id });
		if (authoritys == null)
		{
			authoritys = new ArrayList<DataRow>();
		}
		return authoritys;
	}
	
	@Override
	public void openFxjs(DataRow input)
	{
		String client_id = input.getString("client_id");
		String gzjhgType = ThirdTBASConstants.AUTHORITY_TYPE_FXJS;
		String sql = "select * from t_test_user_authority where client_id = ? and cust_agmt_type = ?";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, gzjhgType });
		if (authoritys == null || authoritys.isEmpty())
		{
			DataRow data = new DataRow();
			data.set("trdaccount", input.getString("trdaccount"));
			data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_authority"));
			data.set("client_id", client_id);
			data.set("cust_agmt_type", gzjhgType);
			data.set("eft_date", "2014-09-09 19:22:33");
			data.set("exp_date", "2024-09-09 19:22:33");
			data.set("cuacct_code", input.getString("fund_account"));
			this.getJdbcTemplate().insert("t_test_user_authority", data);
		}
	}
	
	@Override
	public void openHgt(DataRow input)
	{
		String client_id = input.getString("client_id");
		String gzjhgType = ThirdTBASConstants.AUTHORITY_TYPE_GGT;
		String sql = "select * from t_test_user_authority where client_id = ? and cust_agmt_type = ?";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, gzjhgType });
		if (authoritys == null || authoritys.isEmpty())
		{
			DataRow data = new DataRow();
			data.set("trdaccount", input.getString("trdaccount"));
			data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_authority"));
			data.set("client_id", client_id);
			data.set("cust_agmt_type", gzjhgType);
			data.set("eft_date", "2014-09-09 19:22:33");
			data.set("exp_date", "2024-09-09 19:22:33");
			data.set("cuacct_code", input.getString("fund_account"));
			this.getJdbcTemplate().insert("t_test_user_authority", data);
		}
	}
	
	@Override
	public DataRow queryGGTAccount(DataRow input)
	{
		String client_id = input.getString("client_id");
		String stkbd = ThirdInterfaceConstant.STKBD_GGT;
		String trdacct_excls = ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD;
		String sql = "select * from t_test_user_trdaccount where 1=1 and client_id = ? and stkbd = ? and trdacct_excls = ?";
		DataRow sysData = getJdbcTemplate().queryMap(sql, new Object[] { client_id, stkbd, trdacct_excls });
		if (sysData == null || sysData.isEmpty())
		{
			sysData = new DataRow();
			sysData.set("query_flag", "0");
			return sysData;
		}
		sysData.set("query_flag", "1");
		return sysData;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> getAllAssetInfo(DataRow input) throws Exception
	{
		String account = input.getString("account");
		String client_id = input.getString("client_id");
		StringBuffer sql = new StringBuffer();
		sql.append(" select * from t_test_user_ext_info uei where 1=1 ");
		sql.append(" and uei.client_id = ? ");
		List<DataRow> assetInfoList = getJdbcTemplate().query(sql.toString(), new Object[] { client_id });
		List<DataRow> outList = new ArrayList<DataRow>();
		if (assetInfoList != null && assetInfoList.size() > 0)
		{
			for (DataRow item : assetInfoList)
			{
				DataRow outData = new DataRow();
				outData.set("stkvalue", item.getString("stkvalue"));//证券市值
				outData.set("fundid", account);
				outData.set("marketvalue", item.getString("marketvalue"));//总资产
				outData.set("fund", item.getString("fund")); //资金资产
				outData.set("fundbal", item.getString("fundbal"));//余额
				outData.set("fundtype", item.getString("fundtype"));//资金帐号类型
				outData.set("fundid", item.getString("account"));//资金帐号
				outList.add(outData);
			}
		}
		return outList;
	}
	
	@Override
	public List<DataRow> getQuestionnaireQues(DataRow input)
	{
		Map<String, String> subidCode = new HashMap<String, String>();
		subidCode.put("1", "fxcp");
		subidCode.put("2", "ggt_zscp");
		String subjectCode = subidCode.get(input.getString("sub_id"));
		SurveyService surveyService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_SURVEY, SurveyService.class);
		List<QuestionInfoVo> infoVos = null;
		infoVos = surveyService.queryBySubjectCode(subjectCode);
		if (null == infoVos)
		{
			throw new BusinessException(ErrorCodeSystem.QUESTION_QUERY_FAIL);
		}
		//step4:打包脚本
		List<DataRow> result = new ArrayList<DataRow>();
		for (QuestionInfoVo questionInfoVo : infoVos)
		{
			DataRow item = new DataRow();
			item.set("sub_id", questionInfoVo.getSubId());// 问卷主题ID
			item.set("que_id", questionInfoVo.getQueId());//问题ID
			item.set("q_name", questionInfoVo.getQuestionContent());//问题内容
			item.set("type", questionInfoVo.getType());//问题类型（0：单选，1：多选）
			item.set("ans_id", questionInfoVo.getAId());//答案ID
			item.set("a_name", questionInfoVo.getName());//答案内容
			item.set("mark", questionInfoVo.getMark());//答案分数
			item.set("is_check", questionInfoVo.getIsCheck());//该答案是否被选择：true被选择，false未被选择
			result.add(item);
		}
		return result;
	}
	
	@Override
	public List<DataRow> openedFundAccountList(DataRow input) throws InvokeException
	{
		List<DataRow> resultList = new ArrayList<DataRow>();
		DataRow outputItem = new DataRow();
		outputItem.set("ta_code", "1");//基金代码
		outputItem.set("ta_acct", "781765");//基金帐号
		outputItem.set("open_date", "2014-01-19");//开立日期 yyyy-MM-dd
		outputItem.set("ta_name", "安心基金");//基金名称
		resultList.add(outputItem);
		return resultList;
	}
	
	@SuppressWarnings("unused")
	@Override
	public DataRow queryCYBAccount(DataRow input)
	{
		String client_id = input.getString("client_id");
		String trdacct = input.getString("trdaccount");
		String stkbd = ThirdInterfaceConstant.STKBD_CYB;
		String trdacct_excls = ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD;
		String sql = "select * from t_test_user_trdaccount where 1=1 and client_id = ? and stkbd = ? and trdacct_excls = ? and trdacct = ?";
		List<String> list = new ArrayList<String>();
		DataRow sysData = getJdbcTemplate().queryMap(sql, new Object[] { client_id, stkbd, trdacct_excls, trdacct });
		if (sysData == null || sysData.isEmpty())
		{
			sysData = new DataRow();
			sysData.set("query_flag", "0");
			return sysData;
		}
		sysData.set("query_flag", "1");
		sysData.set("sign_date", "2014-03-01");
		sysData.set("open_type", "2");
		return sysData;
	}
	
	@Override
	public DataRow openFundAccount(DataRow input)
	{
		DataRow resultData = new DataRow();
		return resultData;
	}
	
	@Override
	public DataRow queryFundRiskInfo(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String sql = "select status, message from t_test_user_jjkhrisk where client_id = ?";
		DataRow outDataRow = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id });
		if (outDataRow == null || outDataRow.isEmpty())
		{
			outDataRow = new DataRow();
			outDataRow.set("status", "0");//-1 已过期，0 未提交过 1-正常
			outDataRow.set("message", "未提交过");//状态说明
		}
		return outDataRow;
	}
	
	@SuppressWarnings({ "deprecation" })
	@Override
	public List<DataRow> queryFundRiskQuestions(DataRow input) throws InvokeException
	{
		SurveyService surveyService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_SURVEY, SurveyService.class);
		List<QuestionInfoVo> questions = surveyService.queryBySubjectCode("fxcp");
		if (questions == null || questions.isEmpty())
		{
			throw new InvokeException(-999, "查询题目失败!");
		}
		//打包脚本
		List<DataRow> result = new ArrayList<DataRow>();
		for (QuestionInfoVo questionInfoVo : questions)
		{
			DataRow item = new DataRow();
			item.set("sub_id", questionInfoVo.getSubId());// 问卷主题ID
			item.set("que_id", questionInfoVo.getQueId());//问题ID
			item.set("q_name", questionInfoVo.getQuestionContent());//问题内容
			item.set("type", questionInfoVo.getType());//问题类型（0：单选，1：多选）
			item.set("ans_id", questionInfoVo.getAId());//答案ID
			item.set("a_name", questionInfoVo.getName());//答案内容
			item.set("mark", questionInfoVo.getMark());//答案分数
			item.set("is_check", questionInfoVo.getIsCheck());//该答案是否被选择：true被选择，false未被选择
			result.add(item);
		}
		return result;
	}
	
	@Override
	public DataRow submitFundRiskAnswers(DataRow thirdInput)
	{
		String sql = "update t_test_user_jjkhrisk set status = '1', message = '正常' where client_id = ?";
		this.getJdbcTemplate().update(sql, new Object[] { thirdInput.getString("client_id") });
		DataRow data = new DataRow();
		data.set("status", DictionaryConstants.BOL_TRUE);
		data.set("message", "正常");
		return data;
	}
	
	@Override
	public DataRow getFirsTransactionData(DataRow input)
	{
		//先查询数据库是否有数据，没有再查询中登
		Long userId = input.getLong("user_id");
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserExtendModel userExtend = userInfoService.queryUserExtendByUserId(userId);
		if (userExtend != null && !StringHelper.isBlank(userExtend.getFirstTradingDay()))
		{
			DataRow result = new DataRow();
			result.set("firsTransactionData", userExtend.getFirstTradingDay());
			return result;
		}
		//判断是否是交易时间
		DataRow output = new DataRow();
		output.set("isTrade", DictionaryConstants.BOL_FALSE); //是否是交易时间
		TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
		if (tradeTimeService.checkZdTradeTime())
		{
			DataRow resultData = new DataRow();
			resultData.set("first_trdDate", "20120805");
			output.set("isTrade", DictionaryConstants.BOL_TRUE); //是否是交易时间
			output.set("firsTransactionData", resultData.getString("first_trdDate")); //首次交易日 YYYYMMDD,没有返回空串
			if (!StringHelper.isBlank(resultData.getString("first_trdDate")))
			{
				UserExtendModel updateExtend = new UserExtendModel();
				updateExtend.setUserId(userId);
				updateExtend.setFirstTradingDay(resultData.getString("first_trdDate"));
				userInfoService.updateUserExtend(updateExtend);
			}
		}
		return output;
	}
	
	@Override
	public void openTsgp(DataRow input)
	{
		String client_id = input.getString("client_id");
		String tsgpType = ThirdTBASConstants.AUTHORITY_TYPE_TSGP;
		String sql = "select * from t_test_user_authority where client_id = ? and cust_agmt_type = ?";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, tsgpType });
		if (authoritys == null || authoritys.isEmpty())
		{
			DataRow data = new DataRow();
			data.set("trdaccount", input.getString("trdaccount"));
			data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_authority"));
			data.set("client_id", client_id);
			data.set("cust_agmt_type", tsgpType);
			data.set("eft_date", "2014-09-09 19:22:33");
			data.set("exp_date", "2024-09-09 19:22:33");
			data.set("cuacct_code", input.getString("fund_account"));
			this.getJdbcTemplate().insert("t_test_user_authority", data);
		}
		
	}
	
	@Override
	public List<DataRow> queryJJdetailInfoList()
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public List<DataRow> queryFundCompanyList(DataRow input) throws InvokeException
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public DataRow policeCheck(DataRow input)
	{
		String idno = input.getString("identity_num");
		String name = input.getString("name");
		String sql = "select id_no,name,imgdata from t_test_police_idcard_info where id_no = ? and name = ?";
		DataRow info = getJdbcTemplate().queryMap(sql, new Object[] { idno, name });
		DataRow outData = new DataRow();
		
		String check_flag = DictionaryConstants.BOL_FALSE;
		if (info != null && !info.isEmpty())
		{
			outData.set("identity_num", info.getString("idno"));//身份证号码
			outData.set("name", info.getString("name"));//姓名
			outData.set("photos", info.getString("imgdata"));//身份证大头照base64
			outData.set("retFlag", DictionaryConstants.BOL_TRUE);//校验结果   >=0表示信息正确，<0表示错误
			outData.set("retMsg", "");//返回说明
			check_flag = DictionaryConstants.BOL_TRUE;
		}
		outData.set("check_flag", check_flag);
		outData.set("source", "1");//公安校验渠道类型(1:中登;2:众融;3:昊一;4:金证;5:龙团;)
		return outData;
	}
	
	@Override
	public void regJg(DataRow input)
	{
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void regZdjy(DataRow input)
	{
		// TODO Auto-generated method stub
		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryOTCAccount(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String sql = "select * from t_test_user_otc where client_id = ? ";
		return this.getJdbcTemplate().query(sql, new Object[] { client_id });
	}

	@Override
	public List<OtcInfo> queryAllOTCInfo(DataRow thirdInput) {
		return null;
	}

	@Override
	public DataRow openOTCAccount(DataRow thirdInput)
	{
		return null;
	}
	
	@Override
	public void checkFundNotTrade(DataRow thirdInput)
	{
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public DataRow isOpenGpzyhg(DataRow thirdInput)
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public void openGpzyhgAccount(DataRow thirdInput)
	{
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public DataRow resetPwd(DataRow input)
	{
		DataRow outData = new DataRow();
		outData.set("flag", false);
		outData.set("message", "设置失败");
		if (ThirdTBASConstants.PWD_TYPE_CAPITAL.equals(input.getString("password_type")))
		{
			String client_id = input.getString("client_id");
			String account = input.getString("account");
			String password = input.getString("new_password");
			String sql = "update t_test_user_account set password = ? where client_id = ? and account = ?";
			this.getJdbcTemplate().update(sql, new Object[] { password, client_id, account });
			outData.set("flag", true);
			outData.set("message", "设置成功");
			return outData;
		}
		if (ThirdTBASConstants.PWD_TYPE_BUSINESS.equals(input.getString("password_type")))
		{
			String client_id = input.getString("client_id");
			String account = input.getString("account");
			String password = input.getString("new_password");
			String sql = "update t_test_user_account set fundpassword = ? where client_id = ? and account = ?";
			this.getJdbcTemplate().update(sql, new Object[] { password, client_id, account });
			outData.set("flag", true);
			outData.set("message", "设置成功");
			return outData;
		}
		return outData;
	}
	
	/**
	 * 作者：MIKE
	 * 公司：深圳市思迪信息技术股份公司
	 * 日期时间：2017年2月24日 下午6:24:27
	 * 说明：对账单查询
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> accountStatement(DataRow input) throws InvokeException
	{
		List<DataRow> outList = new ArrayList<DataRow>();
		StringBuffer buffer = new StringBuffer();
		List<String> args = new ArrayList<String>();
		buffer.append(" select * from t_test_accountstatement acc where 1=1");
		if (StringHelper.isNotEmpty(input.getString("fund_account")))
		{
			buffer.append(" and acc.fundid=? ");
			args.add(input.getString("fund_account"));
		}
		
		if (StringHelper.isNotEmpty(input.getString("strdate")))
		{
			buffer.append(" and acc.happentime>=? ");
			args.add(input.getString("enddate"));
		}
		if (StringHelper.isNotEmpty(input.getString("enddate")))
		{
			buffer.append(" and acc.happentime<=? ");
			args.add(input.getString("enddate"));
		}
		List<DataRow> data = getJdbcTemplate().query(buffer.toString(), args.toArray());
		for (DataRow resultItem : data)
		{
			DataRow outputItem = new DataRow();
			outputItem.set("orderdate", resultItem.getString("happentime")); //发生日期
			outputItem.set("digestname", resultItem.getString("businessnote")); //业务说明
			outputItem.set("client_id", input.getString("client_id")); //客户号
			outputItem.set("orgid", input.getString("branchno")); //机构号
			outputItem.set("fundid", input.getString("fund_account")); //资金帐号
			outputItem.set("secuid", resultItem.getString("trdacct")); //股东代码  交易帐号
			outputItem.set("stkcode", resultItem.getString("stkcode")); //证券代码
			outputItem.set("stkname", resultItem.getString("stkname")); //证券名称
			outputItem.set("matchqty", resultItem.getString("transactcount")); //成交数量
			outputItem.set("matchprice", resultItem.getString("transactprice"));//成交价格
			outputItem.set("matchamt", resultItem.getString("transactmoney")); //成交金额
			outputItem.set("fee_sxf", resultItem.getString("handlingcharge")); //佣金
			outputItem.set("fee_yhs", resultItem.getString("stampduty")); //印花税
			outputItem.set("fee_ghf", resultItem.getString("transferfee")); //过户费
			outList.add(outputItem);
		}
		return outList;
	}
	
	@Override
	public DataRow openOtc(DataRow thirdInput)
	{
		DataRow data = new DataRow();
		data.set("client_id", thirdInput.getString("client_id"));
		data.set("otc_code", thirdInput.getString("otccode"));
		String sql = "select * from t_ismp_otcinfo where otc_code = ?";
		DataRow info = getJdbcTemplate().queryMap(sql, new Object[] { thirdInput.getString("otccode") });
		data.set("otc_name", info.getString("otc_name"));
		data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_otc"));
		StringBuffer otc_account= new StringBuffer();
		for (int i = 0; i <8; i++) {
			int nub =(int)(Math.random()*9+1);
			otc_account.append(nub);
		}
		
		data.set("otc_acct", otc_account.toString());
		data.set("trans_acct", otc_account.toString());
		getJdbcTemplate().insert("t_test_user_otc", data);
		return data;
	}
	
	@Override
	public DataRow changeMainFund(DataRow thirdInput)
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public DataRow queryBankBalance(DataRow thirdInput)
	{
		String fund_password = thirdInput.getString("fund_password");
		String bank_password = thirdInput.getString("bank_password");
		String zj_account = thirdInput.getString("op_account");
		String bankNum = thirdInput.getString("bankcode");
		//校验资金密码
		String sql = "select * from t_test_user_account where account = ?";
		DataRow accountInfo = getJdbcTemplate().queryMap(sql, new Object[] { zj_account });
		if (accountInfo == null || accountInfo.isEmpty())
		{
			throw new InvokeException(-11111, "账户不存在");
		}
		if (!fund_password.equals(accountInfo.getString("fundpassword")))
		{
			throw new InvokeException(-11111, "资金密码错误");
		}
		String sql2 = "select * from t_test_user_bank where zj_account = ? and bank_num = ?";
		DataRow bankInfo = getJdbcTemplate().queryMap(sql2, new Object[] { zj_account, bankNum });
		if (bankInfo == null || bankInfo.isEmpty())
		{
			throw new InvokeException(-11111, "银行卡不存在");
		}
		if (!bank_password.equals(bankInfo.getString("bank_password")))
		{
			throw new InvokeException(-11111, "银行卡密码错误");
		}
		return bankInfo;
	}
	
	@Override
	public DataRow openLof(DataRow input)
	{
		String client_id = input.getString("client_id");
		String gzjhgType = ThirdTBASConstants.AUTHORITY_TYPE_LOF;
		String sql = "select * from t_test_user_authority where client_id = ? and cust_agmt_type = ?";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, gzjhgType });
		if (authoritys == null || authoritys.isEmpty())
		{
			DataRow data = new DataRow();
			data.set("trdaccount", input.getString("trdaccount"));
			data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_authority"));
			data.set("client_id", client_id);
			data.set("cust_agmt_type", gzjhgType);
			data.set("eft_date", "2014-09-09 19:22:33");
			data.set("exp_date", "2024-09-09 19:22:33");
			data.set("cuacct_code", input.getString("fund_account"));
			this.getJdbcTemplate().insert("t_test_user_authority", data);
		}
		DataRow dataRow = new DataRow();
		return dataRow;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryZJAccAuthority(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String sql = "SELECT * FROM T_TEST_USER_AUTHORITY WHERE CLIENT_ID = ?";
		List<DataRow> authoritys = this.getJdbcTemplate().query(sql, new Object[] { client_id });
		if (authoritys == null)
		{
			authoritys = new ArrayList<DataRow>();
		}
		return authoritys;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryContactList(DataRow thirdInput)
	{
		String client_id = thirdInput.getString("client_id");
		String fund_account = thirdInput.getString("account");
		String sql = "select client_id,fund_account,linkman_id id,linkman_name emergency_name,linkman_relation emergency_relation,linkman_tel emergency_tel,linkman_address emergency_address,linkman_mobile,linkman_email,linkman_idtype,linkman_postcode,linkman_idno,linkman_sex from t_test_user_linkman where client_id = ? and fund_account = ?";
		List<DataRow> datas = this.getJdbcTemplate().query(sql, new Object[] { client_id, fund_account });
		return datas;
	}

	@Override
	public DataRow queryInsert(DataRow params) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow queryEvaluationResult(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow queryResultValidation(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow queryUserKeyGeneration(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow queryUserIdentityAuthentication(DataRow input)
			throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow checkCancelBankAccount(DataRow input) throws Exception {
		return null;
	}

	@Override
	public DataRow svrbankPreDrawReg(DataRow input) throws Exception {
		return null;
	}

    @Override
    public DataRow querySubRiskFlag(DataRow input)
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List queryFundCompanyOrCode(DataRow thirdInput)
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public DataRow signRiskContract(DataRow thirdInput)
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public DataRow exteilgTemplateQry(DataRow thirdRow)
    {
        // TODO Auto-generated method stub
        return null;
    }

	@Override
	public List signEcontract(DataRow thirdInput) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow queryTracct(DataRow thirdInput) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow queryContract(DataRow thirdInput) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void openKCB(DataRow input)
	{
		String client_id = input.getString("client_id");
		String tsgpType = ThirdTBASConstants.AUTHORITY_TYPE_KC;
		String trdaccount =  input.getString("trdaccount");
		String sql = "select * from t_test_user_authority where client_id = ? and cust_agmt_type = ? and trdaccount=? ";
		DataRow authoritys = this.getJdbcTemplate().queryMap(sql, new Object[] { client_id, tsgpType,trdaccount});
		if (authoritys == null || authoritys.isEmpty())
		{
			DataRow data = new DataRow();
			data.set("trdaccount", input.getString("trdaccount"));
			data.set("id", getSeqValue(SystemConstants.DB_ISMP,"t_test_user_authority"));
			data.set("client_id", client_id);
			data.set("cust_agmt_type", tsgpType);
			data.set("eft_date", "2014-09-09 19:22:33");
			data.set("exp_date", "2024-09-09 19:22:33");
			data.set("cuacct_code", input.getString("fund_account"));
			this.getJdbcTemplate().insert("t_test_user_authority", data);
		}
		
	}

	@Override
	public DataRow signFundElectronicContract(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow checkHKAsset(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataRow qryClientPrefer(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

    @Override
    public DataRow changeBindBankCard(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public DataRow queryYwQqJg(String client_id, String ywqqid,String fund_account) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public DataRow KcbCheckHKAsset(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

	@Override
	public List<DataRow> queryThirdEnumList(DataRow input) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

    @Override
    public DataRow funcExtacctMonitoracctCheck(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List<DataRow> queryGGTRights(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List funcClientExtAssetmanageReg(DataRow thirdInput)
    {
        // TODO Auto-generated method stub
        return null;
    }


    @Override
    public List<DataRow> queryExtsecumAcct(DataRow thirdInput)
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public DataRow queryThirdBankStatus(DataRow thirdInput)
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List<DataRow> checkAssistRepository(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List<DataRow> isOnWayTrade(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List<DataRow> productShare(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List<DataRow> queryBondRigths(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public List<DataRow> isEntrustTrade(DataRow input) throws Exception
    {
        // TODO Auto-generated method stub
        return null;
    }
 

}
