package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.SurveyService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.QuestionInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.SurveyNodePropertyConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.SurveyAnswerRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.SurveyAnswerResultService;
import com.thinkive.fxc.ismp.bus.base.business.service.SurveyOperationService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;

/**
 * @描述: 测评问卷操作服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年9月1日 下午11:59:01
 */
public class SurveyOperationServiceImpl implements SurveyOperationService
{
	
	@Override
	@SuppressWarnings("unchecked")
	public DataRow surveyCheck(String answerStr, UserInfoVo userInfo, Map<String, String> surveyNodeProperty) throws Exception
	{
		if (StringUtils.isBlank(answerStr))
		{
			return autoCheckSurvey(userInfo, surveyNodeProperty);
		}
		
		//如果配置为：问卷来自第三方，问卷提交到本地（不支持）
		if (DictionaryConstants.QUESTION_SOURCE_THIRD.equals(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_QUESTION_SOURCE))
				&& DictionaryConstants.QUESTION_COMMIT_TYPE_LOCAL.equals(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_COMMIT_TYPE)))
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_CONFIG_ERROR);
		}
		DataRow countData = new DataRow();
		Map<String, QuestionInfoVo> standardAnsersMap = new HashMap<String, QuestionInfoVo>();
		if (DictionaryConstants.QUESTION_SOURCE_LOCAL.equals(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_QUESTION_SOURCE)))
		{
			SurveyService surveyService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_SURVEY, SurveyService.class);
			Map<String, Object> result = surveyService.countUserAnswersByLocalSource(answerStr, surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_LOCAL_CODE));
			countData = (DataRow) result.get("countData");
			standardAnsersMap = (Map<String, QuestionInfoVo>) result.get("standardQuestionAndAnsersMap");
		}
		countData.set("status", ThirdDictionaryConstants.SFCG_STATUS_VALID);
		
		//如果问卷需要提交第三方，以第三方提交后的结果为准（如果问卷来源第三方，直接提交问卷答案即可，如果问卷来源数据库，由于第三方接口差异除了答案还需要提供算出来的分数）
		if (DictionaryConstants.QUESTION_COMMIT_TYPE_THIRD.equals(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_COMMIT_TYPE)))
		{
			ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
			DataRow thirdInput = DataFormatUtils.packThirdInput(userInfo);
			thirdInput.set("riskValue", countData.getString("score"));//问卷分数
			thirdInput.set("riskName", countData.getString("levelName"));//问卷等级名称
			thirdInput.set("riskLevel", countData.getString("level"));//问卷等级
			thirdInput.set("answer", answerStr);//答案
			thirdInput.set("survey_sn", surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_THIRD_CODE));
			if (DictionaryConstants.QUESTION_COMMIT_TYPE_LOCAL.equals(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_QUESTION_SOURCE)))
			{
				thirdInput.set("answer", DataFormatUtils.formatDDAnswer(answerStr, standardAnsersMap));
			}
			DataRow ouput = thirdInterface.addOrUpdateQuestionnaire(thirdInput);
			if (!StringHelper.isBlank(ouput.getString("riskvalue")))
			{
				countData.set("riskvalue", ouput.getString("riskvalue"));
			}
			countData.set("risklevel", ouput.getString("risklevel"));
			countData.set("subitemname", ouput.getString("subitemname"));
		}
		String passGrades = surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_PASS_GRADE);
		String passValues = surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_PASS_VALUE);
		return checkAnswerPass(countData, passGrades, passValues);
	}
	
	@Override
	public DataRow surveyCheckAndSave(String answerStr, UserInfoVo userInfo, Map<String, String> surveyNodeProperty, Long businessId, String submitNodeId) throws Exception
	{
		DataRow checkResult = surveyCheck(answerStr, userInfo, surveyNodeProperty);
		//校验通过则保存数据
		if (DictionaryConstants.BOL_TRUE.equals(checkResult.getString("check_flag")))
		{
			saveUserAnswer(answerStr, surveyNodeProperty, businessId, submitNodeId, checkResult);
		}
		return checkResult;
	}
	
	@Override
	public Map<String, Object> surveyCheckAndCreateBusinessAndSave(String answerStr, UserInfoVo userInfo, Map<String, String> surveyNodeProperty, Long businessId, String submitNodeId)
			throws Exception
	{
		DataRow checkResult = surveyCheck(answerStr, userInfo, surveyNodeProperty);
		Map<String, Object> result = new HashMap<String, Object>();
		if (DictionaryConstants.BOL_TRUE.equals(checkResult.getString("check_flag")))
		{
			BusinessEntityModel businessEntity = createBusinessAndSave(answerStr, surveyNodeProperty, businessId, submitNodeId, checkResult);
			result.put("businessEntity", businessEntity);
		}
		result.put("checkResult", checkResult);
		return result;
	}
	
	private BusinessEntityModel createBusinessAndSave(String answerStr, Map<String, String> surveyNodeProperty, Long businessId, String submitNodeId, DataRow checkResult)
	{
		// TODO 实现功能---创建业务办理实例，并保存用户答案（在一个事务中）
		return null;
	}
	
	@Override
	public DataRow autoCheckSurvey(UserInfoVo userInfo, Map<String, String> surveyNodeProperty) throws Exception
	{
		boolean isAutoCheck = DictionaryConstants.BOL_TRUE.equals(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_AUTO_CHECK));
		
		if (!isAutoCheck)
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_ANSWERSTR);
		}
		DataRow questionResult = queryThirdQuestionnaire(userInfo, surveyNodeProperty);
		
		String passGrades = surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_PASS_GRADE);
		String passValues = surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_PASS_VALUE);
		return checkAnswerPass(questionResult, passGrades, passValues);
	}
	
	private DataRow queryThirdQuestionnaire(UserInfoVo userInfo, Map<String, String> surveyNodeProperty) throws Exception
	{
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfo);
		thirdInput.set("survey_sn", surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_THIRD_CODE));
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		return thirdInterface.getQuestionnaire(thirdInput);
	}
	
	@Override
	public DataRow checkAnswerPass(DataRow questionResult, String passGrades, String passValues) throws Exception
	{
		boolean checkFlag = false;
		if (ThirdDictionaryConstants.SFCG_STATUS_VALID.equals(questionResult.getString("status")))
		{
			boolean gradeFlag = checkSurveyGrade(questionResult, passGrades);
			
			boolean valueFlag = checkSurveyValue(questionResult, passValues);
			if (gradeFlag && valueFlag)
			{
				checkFlag = true;
			}
		}
		questionResult.set("check_flag", checkFlag ? DictionaryConstants.BOL_TRUE : DictionaryConstants.BOL_FALSE);
		return questionResult;
	}
	
	@Override
	public boolean checkSurveyGrade(DataRow questionResult, String passGrades)
	{
		if (StringUtils.isBlank(passGrades))
		{
			return true;
		}
		
		boolean gradeFlag = false;
		String[] gradeArr = passGrades.split(",");
		String userGrade = questionResult.getString("subitemname");
		for (String gradeItem : gradeArr)
		{
			if (userGrade.equals(gradeItem))
			{
				gradeFlag = true;
				break;
			}
		}
		return gradeFlag;
	}
	
	@Override
	public boolean checkSurveyValue(DataRow questionResult, String passValues)
	{
		if (StringUtils.isBlank(passValues))
		{
			return true;
		}
		
		boolean valueFlag = false;
		String[] passValue = passValues.split("\\|");
		int userValue = Integer.parseInt(questionResult.getString("riskvalue"));
		for (String valueItem : passValue)
		{
			String[] valueItemInfo = valueItem.split(",");
			int minValue = Integer.parseInt(valueItemInfo[0]);
			int maxValue = Integer.parseInt(valueItemInfo[1]);
			if (userValue >= minValue && minValue <= maxValue)
			{
				valueFlag = true;
				break;
			}
		}
		return valueFlag;
	}
	
	@Override
	public void saveUserAnswer(String answerStr, Map<String, String> surveyNodeProperty, Long businessId, String submitNodeId, DataRow checkResult) throws Exception
	{
		if (StringUtils.isBlank(answerStr))
		{
			return;
		}
		Long subId = null;
		String quetionSource = surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_QUESTION_SOURCE);
		if (DictionaryConstants.QUESTION_SOURCE_LOCAL.equals(quetionSource))
		{
			subId = checkResult.getLong("subId");
		}
		else if (DictionaryConstants.QUESTION_SOURCE_THIRD.equals(quetionSource))
		{
			subId = Long.parseLong(surveyNodeProperty.get(SurveyNodePropertyConstants.PROPERTY_KEY_THIRD_CODE));
		}
		SurveyAnswerRecordService surveyAnswerRecordMode = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SURVEYANSWERRECORD, SurveyAnswerRecordService.class);
		surveyAnswerRecordMode.addOrUpdateAnswer(answerStr, businessId, subId, submitNodeId);
		SurveyAnswerResultService surveyAnswerResultService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SURVEYANSWERRESULT, SurveyAnswerResultService.class);
		surveyAnswerResultService.addOrUpdateAnswer(businessId, subId, submitNodeId, checkResult.getString("riskvalue"), checkResult.getString("risklevel"), checkResult.getString("subitemname"));
	}
}
