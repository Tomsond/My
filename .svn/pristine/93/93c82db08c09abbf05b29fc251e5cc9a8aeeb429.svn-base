package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.jdbc.session.SessionFactory;
import com.thinkive.fxc.ismp.bus.base.business.dao.UserExtendDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.UserFundAccountDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.UserInfoDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.UserSnapShotDao;
import com.thinkive.fxc.ismp.bus.base.business.model.BillingContactNameModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserFundAccountModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserInfoModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserRetentionModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserSnapShotModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.CertUserInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.business.service.impl.BusinessCommonServiceImpl;
import com.thinkive.fxc.ismp.bus.business.util.PwdEncryptUtil;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;

/**
 * @描述: 客户信息服务层接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月23日 下午3:25:44
 */
public class UserInfoServiceImpl extends BusinessCommonServiceImpl implements UserInfoService
{
	
	private UserInfoDao userInfoDao;
	
	private UserExtendDao userExtendDao;
	
	private UserFundAccountDao userFundAccountDao;
	
	private UserSnapShotDao userSnapShotDao;
	
	public void setUserFundAccountDao(UserFundAccountDao userFundAccountDao)
	{
		this.userFundAccountDao = userFundAccountDao;
	}
	
	public void setUserExtendDao(UserExtendDao userExtendDao)
	{
		this.userExtendDao = userExtendDao;
	}
	
	public void setUserInfoDao(UserInfoDao userInfoDao)
	{
		this.userInfoDao = userInfoDao;
	}
	
	public void setUserSnapShotDao(UserSnapShotDao userSnapShotDao)
	{
		this.userSnapShotDao = userSnapShotDao;
	}
	
	@Override
	public UserInfoVo queryUserInfoVo(DataRow params)
	{
		return userInfoDao.queryUserInfoVo(params);
	}
	
	@Override
	public UserInfoVo queryAndCheckUserByUserIdAndAccount(Long userId, String fundAccount) throws Exception
	{
		DataRow params = new DataRow();
		params.set("userId", userId);
		params.set("fundAccount", fundAccount);
		params.set("isMain", DictionaryConstants.BOL_TRUE);
		UserInfoVo userInfoVo = queryUserInfoVo(params);
		return checkUserInfoVoPwd(userInfoVo);
	}
	
	@Override
	public UserInfoVo queryAndCheckUserByUserIdAndType(Long userId, String type) throws Exception
	{
		DataRow params = new DataRow();
		params.set("userId", userId);
		params.set("type", type);
		params.set("isMain", DictionaryConstants.BOL_TRUE);
		UserInfoVo userInfoVo = queryUserInfoVo(params);
		return checkUserInfoVoPwd(userInfoVo);
	}
	
	private UserInfoVo checkUserInfoVoPwd(UserInfoVo userInfoVo) throws Exception
	{
		//step1：用户信息不存在则报错
		if (userInfoVo == null)
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFUNDACCOUNT);
		}
		//step2：如果第三方接口需要密码
		if (DictionaryConstants.BOL_TRUE.equals(Configuration.getString(SystemConstants.CONFIG_KEY_SYSTEM_THIRD_NEED_PWD, DictionaryConstants.BOL_TRUE)))
		{
			String pwd = userInfoVo.getPwd();
			//step2.1：没有获取到密码则报错
			if (StringUtils.isBlank(pwd))
			{
				throw new BusinessException(ErrorCodeSystem.FUNDACCOUNT_NOPWD);
			}
			//userInfoVo.setPwd(PwdEncryptUtil.decryptionPsw(pwd));
		}
		return userInfoVo;
	}
	
	@Override
	public UserExtendModel queryUserExtendByUserId(Long userId)
	{
		return userExtendDao.queryByUserId(userId);
	}
	
	@Override
	public int updateUserExtend(UserExtendModel updateExtend)
	{
		return userExtendDao.update(updateExtend);
	}
	
	@Override
	public UserInfoModel queryUserInfoByUserId(Long userId)
	{
		return userInfoDao.queryByUserId(userId);
	}
	
	@Override
	public CertUserInfoVo queryCertUser(Long userId)
	{
		return userInfoDao.queryCertUser(userId);
	}
	
	@Override
	public Boolean updateUserExtend(UserExtendModel userExtendModel, BusinessEntityModel businessEntityModel,String str) throws Exception
	{
		Boolean flag = true;
		Session session = null;
		try
		{
			//step1.创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//step2:获取用户信息和用户拓展信息
			UserInfoModel olduserInfoModel = userInfoDao.queryByUserId(userExtendModel.getUserId());
			UserExtendModel oldUserExtendModel = userExtendDao.queryByUserId(userExtendModel.getUserId());
			//step3.修改用户拓展信息
			int total = userExtendDao.update(userExtendModel, session);
			if (1 != total || null == olduserInfoModel || null == oldUserExtendModel)
			{
				
				flag = false;
				session.rollbackTrans();
			}
			else
			{
				
				UserExtendModel newUserExtendModel = userExtendDao.queryByUserId(userExtendModel.getUserId());
				businessEntityModel = this.addBusinessEntityModel(businessEntityModel, session);
				
				//step5:新增流程节点记录(三方存管新绑定方式为一步式)
				Long businessId = businessEntityModel.getId();
				String nodeId = businessEntityModel.getNodeId();
				String ip = businessEntityModel.getIp();
				String opSource = businessEntityModel.getOpSource();
				String opStation = businessEntityModel.getOpStation();
				this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
				
				//step6：添加节点操作记录
				this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
				
				//step7:办理业务资料记录
				UserRetentionModel userSnapShotModel = new UserRetentionModel();
				userSnapShotModel.setBusinessId(businessId);
				userSnapShotModel.setIdentityType(olduserInfoModel.getIdentityType());
				userSnapShotModel.setIdentityNum(olduserInfoModel.getIdentityNum());
				userSnapShotModel.setName(olduserInfoModel.getName());
				userSnapShotModel.setSex(olduserInfoModel.getSex());
				userSnapShotModel.setNationality(olduserInfoModel.getNationality());
				userSnapShotModel.setNickname(olduserInfoModel.getNickName());
				userSnapShotModel.setBirthday(olduserInfoModel.getBirthday());
				userSnapShotModel.setMobile(olduserInfoModel.getMobile());
				userSnapShotModel.setSignOffice(olduserInfoModel.getSignOffice());
				userSnapShotModel.setPapersAddr(olduserInfoModel.getPapersAddr());
				userSnapShotModel.setValidityBegin(olduserInfoModel.getValidityBegin());
				userSnapShotModel.setValidityEnd(olduserInfoModel.getValidityEnd());
				userSnapShotModel.setBranchno(olduserInfoModel.getBranchNo());
				userSnapShotModel.setClientid(olduserInfoModel.getClientId());
				userSnapShotModel.setFundaccount(olduserInfoModel.getFundaccount());
				userSnapShotModel.setEthnicName(oldUserExtendModel.getEthnicName());
				userSnapShotModel.setTelephone(oldUserExtendModel.getTelephone());
				userSnapShotModel.setEmail(oldUserExtendModel.getEmail());
				userSnapShotModel.setAddress(oldUserExtendModel.getAddress());
				userSnapShotModel.setPostCode(oldUserExtendModel.getPostCode());
				userSnapShotModel.setOccupation(oldUserExtendModel.getOccupation());
				userSnapShotModel.setEducation(oldUserExtendModel.getEducation());
				userSnapShotModel.setControlperson(oldUserExtendModel.getControlPerson());
				userSnapShotModel.setBenefitperson(oldUserExtendModel.getBenefitPerson());
				userSnapShotModel.setCreditrecord(oldUserExtendModel.getCreditrecord());
				userSnapShotModel.setBusinessCode(businessEntityModel.getBusinessCode());
				userSnapShotModel.setOpStation(businessEntityModel.getOpStation());
				userSnapShotModel.setDescribe(str);
				userSnapShotDao.addUserLog(userSnapShotModel, session);
				
				
				//step7:存储快照
				UserSnapShotModel userSnapShotModelUpdate = new UserSnapShotModel();
				userSnapShotModelUpdate.setBusinessId(businessId);
				userSnapShotModelUpdate.setIdentityType(olduserInfoModel.getIdentityType());
				userSnapShotModelUpdate.setIdentityNum(olduserInfoModel.getIdentityNum());
				userSnapShotModelUpdate.setName(olduserInfoModel.getName());
				userSnapShotModelUpdate.setSex(olduserInfoModel.getSex());
				userSnapShotModelUpdate.setEthnicName(newUserExtendModel.getEthnicName());
				userSnapShotModelUpdate.setBirthday(olduserInfoModel.getBirthday());
				userSnapShotModelUpdate.setMobile(olduserInfoModel.getMobile());
				userSnapShotModelUpdate.setSignOffice(olduserInfoModel.getSignOffice());
				userSnapShotModelUpdate.setPapersAddr(olduserInfoModel.getPapersAddr());
				userSnapShotModelUpdate.setValidityBegin(olduserInfoModel.getValidityBegin());
				userSnapShotModelUpdate.setValidityEnd(olduserInfoModel.getValidityEnd());
				userSnapShotModelUpdate.setTelephone(newUserExtendModel.getTelephone());
				userSnapShotModelUpdate.setAddress(newUserExtendModel.getAddress());
				userSnapShotModelUpdate.setPostCode(newUserExtendModel.getPostCode());
				userSnapShotModelUpdate.setOccupation(newUserExtendModel.getOccupation());
				userSnapShotModelUpdate.setEducation(newUserExtendModel.getEducation());
				userSnapShotModelUpdate.setEmail(newUserExtendModel.getEmail());
				userSnapShotDao.add(userSnapShotModelUpdate, session);
				session.commitTrans();
			}
		}
		catch (Exception e)
		{
			flag = false;
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return flag;
	}
	
	@Override
	public UserInfoVo queryUserInfoVoByFundAccount(String fundAccount)
	{
		DataRow params = new DataRow();
		params.set("fundAccount", fundAccount);
		return userInfoDao.queryUserInfoVo(params);
	}
	
	@Override
	public int updatePwdErrorTimeByUserIdAndAccount(Long userId, String fundAccount, int errorTime)
	{
		UserFundAccountModel userFundAccountModel = new UserFundAccountModel();
		userFundAccountModel.setUserId(userId);
		userFundAccountModel.setFundAccount(fundAccount);
		userFundAccountModel.setpwdLoginErrorTime(errorTime);
		return userFundAccountDao.updateByUserIdAndAccount(userFundAccountModel);
	}
	
	@Override
	public int updatePwdErrorTimeByUserId(Long userId, int errorTime)
	{
		UserFundAccountModel userFundAccountModel = new UserFundAccountModel();
		userFundAccountModel.setUserId(userId);
		userFundAccountModel.setpwdLoginErrorTime(errorTime);
		return userFundAccountDao.updateByUserId(userFundAccountModel);
	}
	
	@Override
	public int updateFundAccountById(UserFundAccountModel userFundAccountModel)
	{
		return userFundAccountDao.update(userFundAccountModel);
	}
	
	@Override
	public UserInfoModel queryUserInfobyIdNumAndName(String identityType, String identityNum, String name, String clientId)
	{
		UserInfoModel userInfoModel = new UserInfoModel();
		userInfoModel.setIdentityType(identityType);
		userInfoModel.setIdentityNum(identityNum);
		userInfoModel.setName(name);
		userInfoModel.setClientId(clientId);
		return userInfoDao.queryByParams(userInfoModel);
	}
	
	@Override
	public DataRow queryBillingContact(Long user_id)
	{
		return userInfoDao.getBillingContact(Long.valueOf(user_id));
	}
	
	@Override
	public void addUserInfoAndExtendAndAccount(UserInfoModel userInfoModel, UserExtendModel userExtendModel, UserFundAccountModel userFundAccountModel,DataRow data) throws Exception
	{
		
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//新增用户信息
			userInfoModel = userInfoDao.add(userInfoModel, session);
			Long userId = userInfoModel.getUserId();
			userExtendModel.setUserId(userId);
			userExtendDao.add(userExtendModel, session);
			userFundAccountModel.setUserId(userId);
			userFundAccountDao.add(userFundAccountModel, session);
			data.set("user_id", userId);
			userInfoDao.addLinkman(data, session);
			//提交事务
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public void updateUserInfoAndExtendAndAccount(UserInfoModel userInfoModel, UserExtendModel userExtendModel, UserFundAccountModel userFundAccountModel,DataRow data) throws Exception
	{
		
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//新增用户信息
			Long userId = userInfoModel.getUserId();
			userInfoDao.update(userInfoModel, session);
			userExtendModel.setUserId(userId);
			userExtendDao.update(userExtendModel, session);
			userFundAccountModel.setUserId(userId);
			int total = userFundAccountDao.updateByUserIdAndType(userFundAccountModel, session);
			if (total == 0)
			{
				userFundAccountDao.add(userFundAccountModel, session);
			}
			
			data.set("user_id", userId);
			int tatals=userInfoDao.updateLinkman(data,session);
			
			if (tatals == 0)
			{
				userInfoDao.addLinkman(data, session);
			}
			//提交事务
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public void addUserInfoAndExtend(UserInfoModel userInfoModel, UserExtendModel userExtendModel) throws Exception
	{
		
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//新增用户信息
			userInfoModel = userInfoDao.add(userInfoModel, session);
			Long userId = userInfoModel.getUserId();
			userExtendModel.setUserId(userId);
			userExtendDao.add(userExtendModel, session);
			//提交事务
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public void updateUserInfoAndExtend(UserInfoModel userInfoModel, UserExtendModel userExtendModel) throws Exception
	{
		
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//新增用户信息
			Long userId = userInfoModel.getUserId();
			userInfoDao.update(userInfoModel, session);
			userExtendModel.setUserId(userId);
			userExtendDao.update(userExtendModel, session);
			//提交事务
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public void updateBillingContact(BillingContactNameModel billingcontact) throws Exception
	{
		
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//新增用户信息
			Long userId = billingcontact.getUserId();
			
			DataRow datarow = userInfoDao.getBillingContact(userId);
			if (datarow != null && datarow.size() > 0)
			{
				billingcontact.setId(Long.valueOf(datarow.getString("id")));
				userExtendDao.updateBillingContact(billingcontact, session);
			}
			else
			{
				userExtendDao.addBillingContact(billingcontact, session);
			}
			
			//提交事务
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public int updatePasswordByAccount(Long userId, String fundAccount, String newPwd)
	{
		UserFundAccountModel userFundAccountModel = new UserFundAccountModel();
		userFundAccountModel.setUserId(userId);
		userFundAccountModel.setFundAccount(fundAccount);
		userFundAccountModel.setPwd(newPwd);
		return userFundAccountDao.updateByUserIdAndAccount(userFundAccountModel);
	}
	
	@Override
	public BusinessEntityModel addBusinessInfo(BusinessEntityModel businessEntityModel) throws Exception
	{
		Long businessId = null;
		Session session = null;
		try
		{
			//step1.创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//step2.添加修改交易密码业务实例
			businessEntityModel = this.addBusinessEntityModel(businessEntityModel, session);
			
			//step3:新增流程节点记录(修改交易密码只有一步)
			businessId = businessEntityModel.getId();
			String nodeId = businessEntityModel.getNodeId();
			String ip = businessEntityModel.getIp();
			String opSource = businessEntityModel.getOpSource();
			String opStation = businessEntityModel.getOpStation();
			
			this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//step4：添加节点操作记录
			this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
			
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return businessEntityModel;
	}
	
	@Override
	public BusinessEntityModel updateUserInfoModel(UserInfoModel userInfoModel, BusinessEntityModel businessEntityModel, UserInfoVo userInfoVo) throws Exception
	{
		Boolean flag = true;
		Session session = null;
		try
		{
			//step1.创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//step2:获取用户拓展信息
			UserExtendModel oldUserExtendModel = userExtendDao.queryByUserId(userInfoModel.getUserId());
			
			//step3.修改用户信息
			int total = userInfoDao.update(userInfoModel, session);
			if (1 != total || null == userInfoVo || null == oldUserExtendModel)
			{
				flag = false;
				session.rollbackTrans();
			}
			else
			{
				//step4.
				businessEntityModel = this.addBusinessEntityModel(businessEntityModel, session);
				
				//step5:新增流程节点记录(三方存管新绑定方式为一步式)
				Long businessId = businessEntityModel.getId();
				String nodeId = businessEntityModel.getNodeId();
				String ip = businessEntityModel.getIp();
				String opSource = businessEntityModel.getOpSource();
				String opStation = businessEntityModel.getOpStation();
				this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
				
				//step6：添加节点操作记录
				this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
				
				//step7:存储快照(此处原用户基本信息要从userInfoVo里面取，用户拓展信息从oldUserExtendModel里面取)
				UserSnapShotModel userSnapShotModel = new UserSnapShotModel();
				userSnapShotModel.setBusinessId(businessId);
				userSnapShotModel.setIdentityType(userInfoVo.getIdentityType());
				userSnapShotModel.setIdentityNum(userInfoVo.getIdentityNum());
				userSnapShotModel.setName(userInfoVo.getName());
				userSnapShotModel.setSex(userInfoVo.getSex());
				userSnapShotModel.setEthnicName(oldUserExtendModel.getEthnicName());
				userSnapShotModel.setBirthday(userInfoVo.getBirthday());
				userSnapShotModel.setMobile(userInfoVo.getMobile());
				userSnapShotModel.setSignOffice(userInfoVo.getSignOffice());
				userSnapShotModel.setPapersAddr(userInfoVo.getPapersAddr());
				userSnapShotModel.setValidityBegin(userInfoVo.getValidityBegin());
				userSnapShotModel.setValidityEnd(userInfoVo.getValidityEnd());
				userSnapShotModel.setTelephone(oldUserExtendModel.getTelephone());
				userSnapShotModel.setAddress(oldUserExtendModel.getAddress());
				userSnapShotModel.setPostCode(oldUserExtendModel.getPostCode());
				userSnapShotModel.setOccupation(oldUserExtendModel.getOccupation());
				userSnapShotModel.setEducation(oldUserExtendModel.getEducation());
				userSnapShotModel.setEmail(oldUserExtendModel.getEmail());
				userSnapShotDao.add(userSnapShotModel, session);
				
				session.commitTrans();
			}
		}
		catch (Exception e)
		{
			flag = false;
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return businessEntityModel;
	}
	
	@Override
	public boolean existMobile(String mobile)
	{
		boolean flag = false;
		int total = userInfoDao.countByMobile(mobile);
		if (total > 0)
		{
			flag = true;
		}
		return flag;
	}
	
	@Override
	public DataRow addOrUpdateUserAccount(List<DataRow> zjAccountList, Long userId)
	{
		if (zjAccountList == null || zjAccountList.isEmpty() || 0 == userId)
		{
			return null;
		}
		
		//查询用户所有资金帐号
		UserFundAccountModel queryParam = new UserFundAccountModel();
		queryParam.setUserId(userId);
		List<UserFundAccountModel> localAccounts = userFundAccountDao.queryByParams(queryParam);
		//如果有数据，转或list为map
		Map<String, UserFundAccountModel> localAccountsMap = new HashMap<String, UserFundAccountModel>();
		if (localAccounts != null && !localAccounts.isEmpty())
		{
			for (UserFundAccountModel item : localAccounts)
			{
				localAccountsMap.put(item.getFundAccount(), item);
			}
			
		}
		
		DataRow result = new DataRow();
		for (DataRow item : zjAccountList)
		{
			String fundAccount = item.getString("fund_account");
			String thirdAccountState = item.getString("state");//资金帐号状态
			String thirdAccountType = item.getString("fundacc_type");//资金帐号类型
			String mainFlag = item.getString("main_flag");//主辅状态
			
			//过滤辅卡
			if (!DictionaryConstants.BOL_TRUE.equals(mainFlag))
			{
				continue;
			}
			//如果第三方没有返回资金帐号状态，则帐号默认正常
			if (StringUtils.isBlank(thirdAccountState))
			{
				thirdAccountState = ThirdTBASConstants.FUNDACCOUNT_THIRDSTATE_NOMAL;
			}
			
			//本地数据库有帐号
			if (!localAccountsMap.isEmpty() && localAccountsMap.containsKey(fundAccount))
			{
				UserFundAccountModel localAccount = localAccountsMap.get(fundAccount);
				
				//如果主辅状态、帐号状态、帐号类型有变更
				if (!thirdAccountState.equals(localAccount.getState()) || !thirdAccountType.equals(localAccount.getType()) || !mainFlag.equals(localAccount.getIsMain()))
				{
					UserFundAccountModel updateData = new UserFundAccountModel();
					updateData.setId(localAccount.getId());
					updateData.setState(thirdAccountState);
					updateData.setType(thirdAccountType);
					updateData.setIsMain(mainFlag);
					userFundAccountDao.update(updateData);
				}
			}
			else
			{
				UserFundAccountModel addData = new UserFundAccountModel();
				addData.setUserId(userId);
				addData.setFundAccount(fundAccount);
				addData.setType(thirdAccountType);
				addData.setIsMain(mainFlag);
				addData.setState(thirdAccountState);
				userFundAccountDao.add(addData);
			}
			//不存在则新增
			result.set(thirdAccountType, fundAccount);
			localAccountsMap.remove(fundAccount);
		}
		
		//如果数据库中有多余的帐号数据，置为销户状态
		if (!localAccountsMap.isEmpty())
		{
			for (Entry<String, UserFundAccountModel> entryItem : localAccountsMap.entrySet())
			{
				UserFundAccountModel item = entryItem.getValue();
				UserFundAccountModel updateItem = new UserFundAccountModel();
				updateItem.setId(item.getId());
				updateItem.setState(ThirdTBASConstants.FUNDACCOUNT_THIRDSTATE_CANCEL);
				userFundAccountDao.update(updateItem);
			}
		}
		
		return result;
	}
	
	@Override
	public DataRow queryUserAllInfo(Long userId)
	{
		return userInfoDao.queryUserAllInfo(userId);
	}
	
	@Override
	public Boolean updateUserInfoModelAndUpdateBusinessEntity(UserInfoModel userInfoModel, BusinessEntityModel businessEntityModel, UserInfoVo userInfoVo) throws Exception
	{
		Boolean flag = true;
		Session session = null;
		try
		{
			//step1.创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//step2:获取用户拓展信息
			UserExtendModel oldUserExtendModel = userExtendDao.queryByUserId(userInfoModel.getUserId());
			
			//step3.修改用户信息
			int total = userInfoDao.update(userInfoModel, session);
			if (1 != total || null == userInfoVo || null == oldUserExtendModel)
			{
				flag = false;
				session.rollbackTrans();
			}
			else
			{
				//step4.添加三方存管业务实例
				this.updateBusinessEntityModel(businessEntityModel, session);
				
				Long businessId = businessEntityModel.getId();
				
				//step5:存储快照(此处原用户基本信息要从userInfoVo里面取，用户拓展信息从oldUserExtendModel里面取)
				UserSnapShotModel userSnapShotModel = new UserSnapShotModel();
				userSnapShotModel.setBusinessId(businessId);
				userSnapShotModel.setIdentityType(userInfoVo.getIdentityType());
				userSnapShotModel.setIdentityNum(userInfoVo.getIdentityNum());
				userSnapShotModel.setName(userInfoVo.getName());
				userSnapShotModel.setSex(userInfoVo.getSex());
				userSnapShotModel.setEthnicName(oldUserExtendModel.getEthnicName());
				userSnapShotModel.setBirthday(userInfoVo.getBirthday());
				userSnapShotModel.setMobile(userInfoVo.getMobile());
				userSnapShotModel.setSignOffice(userInfoVo.getSignOffice());
				userSnapShotModel.setPapersAddr(userInfoVo.getPapersAddr());
				userSnapShotModel.setValidityBegin(userInfoVo.getValidityBegin());
				userSnapShotModel.setValidityEnd(userInfoVo.getValidityEnd());
				userSnapShotModel.setTelephone(oldUserExtendModel.getTelephone());
				userSnapShotModel.setAddress(oldUserExtendModel.getAddress());
				userSnapShotModel.setPostCode(oldUserExtendModel.getPostCode());
				userSnapShotModel.setOccupation(oldUserExtendModel.getOccupation());
				userSnapShotModel.setEducation(oldUserExtendModel.getEducation());
				userSnapShotModel.setEmail(oldUserExtendModel.getEmail());
				userSnapShotDao.add(userSnapShotModel, session);
				
				session.commitTrans();
			}
		}
		catch (Exception e)
		{
			flag = false;
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return flag;
	}
	
	public DataRow certificatesFlag(Long user_id, String endtime){
		if(StringUtils.isEmpty(String.valueOf(user_id)) || StringUtils.isEmpty(endtime)){
			return null;
		}
		return userInfoDao.certificatesFlag(user_id,endtime);
	}
}
