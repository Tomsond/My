package com.thinkive.fxc.ismp.bus.business.user.function;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserInfoModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserRetentionModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserSnapShotService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.user.contants.UserConstants;
import com.thinkive.fxc.ismp.bus.business.user.contants.UserErrorCodeContants;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.business.util.PwdEncryptUtil;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 修改交易密码
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月8日 上午10:05:29
 */
public class Function1004133 extends ISMPBaseFunction
{
    
    private Long                userId;             //用户ID
                                                     
    private String              fundAccount;        //资金账号
                                                     
    private String              oldPassword;        //旧交易密码
                                                     
    private String              newPassword;        //新交易密码
                                                     
    private ThirdInterface      thirdInterface;
    
    private UserInfoService     userInfoService;
    
    private UserSnapShotService userSnapShotService;
    
    private UserSnapShotService  usersnapshotservice = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT, UserSnapShotService.class);
	
    
    @Override
    public ResultVo execute() throws Exception
    {
        //step1:获取入参并校验
        checkInput();
        
        //step2:查询用户基本信息和用户账号信息
        userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
        UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);
        
        //step3:拼装参数，调用第三方接口去更改用户交易密码
        DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
        thirdInput.set("password", oldPassword);
        thirdInput.set("org_id", userInfoVo.getBranchNo());
        thirdInput.set("newpwd", newPassword);
        thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
        thirdInterface.updateBusinessPwd(thirdInput); //TODO 此处第三方接口应该要有返回值去判断是否修改成功，需不需要终止程序执行
        
        //step4:添加消息
        //TODO 调用短信接口发送短信通知用户修改成功
        
        //step5:更新云柜台数据库用户账号信息
        if ( DictionaryConstants.BOL_TRUE.equals(Configuration.getString(UserConstants.SECRET_PWDNEEDENCRYPT,
                DictionaryConstants.BOL_TRUE)) )
        {
            newPassword = PwdEncryptUtil.decryptionPsw(newPassword);
        }
        userInfoService.updatePasswordByAccount(userId, fundAccount, newPassword);
        
        //step6:添加业务办理记录
        BusinessEntityModel businessEntityModel = new BusinessEntityModel(userId,
                BusinessConstants.BUSINESS_UPDATEJYPWD, DictionaryConstants.FLOW_LASTSTEP_NEXT,
                DictionaryConstants.BOL_TRUE, DictionaryConstants.DEAL_RESULT_SUCCESS, opSource, opStation, ip);
        businessEntityModel = userInfoService.addBusinessInfo(businessEntityModel);
        
        //step6：添加业务办理快照
        userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT,
                UserSnapShotService.class);
        userSnapShotService.addUserSnapShot(businessEntityModel.getId(), userInfoVo);

        //获取用户信息和用户拓展信息办理业务时数据
		UserInfoModel olduserInfoModel = userInfoService.queryUserInfoByUserId(userInfoVo.getUserId());
		UserExtendModel oldUserExtendModel = userInfoService.queryUserExtendByUserId(userInfoVo.getUserId());
		
		
		UserRetentionModel userretentionmodel = new UserRetentionModel();
		userretentionmodel.setEntrustway(entrust_way);
 		userretentionmodel.setStockaccount(stock_account);
 		userretentionmodel.setRiskvalue(riskvalue);
 		userretentionmodel.setRisklevel(risklevel);
 		userretentionmodel.setSubitemname(subitemname);
 		userretentionmodel.setSurveysn(survey_sn);
 		userretentionmodel.setBankname(bank_name);
 		userretentionmodel.setBankCardNumber(bank_card_number);
 		userretentionmodel.setOperationtype(operation_type);
 		userretentionmodel.setAmountOfMoney(amount_of_money);
 		userretentionmodel.setMarket(market);
		
 		usersnapshotservice.InsertRetention(olduserInfoModel, oldUserExtendModel, businessEntityModel, userretentionmodel);//添加 客户业务办理时信息记录表



        ResultVo resultVo = new ResultVo();
        resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
        resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
        resultVo.setResult(businessEntityModel);
        return resultVo;
    }
    
    private void checkInput() throws InvokeException
    {
        userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
        fundAccount = this.getAndCheckBlankStrParam("zj_account", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
        oldPassword = this.getAndCheckBlankStrParam("oldPassword", UserErrorCodeContants.BLANK_OLD_PASSWORD);
        newPassword = this.getAndCheckBlankStrParam("jy_password", UserErrorCodeContants.BLANK_NEW_PASSWORD);
    }
    
    
}
