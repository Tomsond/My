package com.thinkive.fxc.ismp.bus.business.zq.function;


import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.SurveySubjectModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.AgreeMentService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.SurveyService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.AgreementInfoVo;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.QuestionInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.AgreeRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.NodePropertyConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.NodePropertyConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.SurveyAnswerRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.kc.contants.KcbContants;
import com.thinkive.fxc.ismp.bus.business.kc.service.KCEditionReservationService;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.business.zq.constants.ZqConstants;
import com.thinkive.fxc.ismp.bus.business.zq.service.ZqService;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Calendar; 
import java.util.Date;
import java.util.HashMap; 
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.log4j.Logger; 

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.WritableDirectElement;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.itextpdf.tool.xml.ElementHandler;
import com.itextpdf.tool.xml.Writable;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.pipeline.WritableElement;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfStamper;
import com.thinkive.base.config.Configuration;
import com.thinkive.base.jdbc.DataRow; 
import com.thinkive.base.util.DateHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.fileupload.bean.FileUploadResultVo;
import com.thinkive.fxc.fileupload.util.FileUploadClientHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.EnumInfoService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.impl.EnumInfoServiceImpl;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.ProtocolService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;
import com.thinkive.server.util.SpringUtil;
import com.thinkive.fxc.ismp.bus.base.util.MD5;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;


/**
 * @描述: 债券合格投资者开通--提交知识测评
 * @版权: Copyright (c) 2019 
 * @公司: 思迪科技 
 * @作者: 江昶
 * @版本: 1.0 
 * @创建日期: 2019年12月18日 
 * @创建时间: 下午2:44:47
 */
public class Function1004240 extends ISMPBaseFunction
{
	
    private Long userId;//用户编号
	
	private String answerStr;//答案信息1_1_0|2_3&2&1_0|3_1&2_0
	
	private String question_source; 
	
	private String  agreeCode = ZqConstants.ZQ_KNOWLEDGE_SURVEY;//知识测评协议类型
	
	private UserInfoService userInfoService;
	   
    private NodePropertyConfigService nodePropertyConfigService;
    
    private SurveyAnswerRecordService surveyAnswerRecordService;
    
    private SurveyService surveyService;
    
    private UserInfoVo userInfo;
	
	@SuppressWarnings("unchecked")
    public ResultVo execute() throws Exception
	{
		
		checkInput();
		
		userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
	        
        //查询正在办理的债券开通业务数据
		ZqService service = SpringHelper.getBean(ZqConstants.SERVER_ID_ZQ, ZqService.class);
        BusinessEntityModel businessEntityModel=service.queryOrAddBusinessInfo(userId, ZqConstants.ZQ_KNOWLEDGE, opSource, opStation, ip);
        logger.info("新建实例businessEntityModel："+businessEntityModel);
        
        //更新为知识测评节点
        BusinessEntityService businessEntityService  = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
        businessEntityModel.setNodeId(ZqConstants.ZQ_KNOWLEDGE); 
        businessEntityService.update(businessEntityModel);
        logger.info("修改知识测评节点businessEntityModel："+businessEntityModel);
        
        //查询科创板风险测评节点提交到本地数据库问卷编号
        nodePropertyConfigService=SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_NODEPROPERTYCONFIG, NodePropertyConfigService.class);
        NodePropertyConfigModel nodePropertyConfigModel=nodePropertyConfigService.queryByNodeIdAndStateAndPropertyKey(ZqConstants.ZQ_KNOWLEDGE, ZqConstants.ZQ_KNOWLEDGE_LOCAL_CODE, DictionaryConstants.BOL_TRUE);
        if(null == nodePropertyConfigModel){
            throw new BusinessException(100424001,"债券合格投资者开通业务知识测评节点属性配置错误");
        }
        String subjectCode=nodePropertyConfigModel.getPropertyValue();//要提交的本地问卷编号
        logger.info("本地的问卷编号："+subjectCode);
        
        surveyService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_SURVEY, SurveyService.class); 
        SurveySubjectModel surveySubjectModel=surveyService.queryBySubject(subjectCode);
        if(null == surveySubjectModel){
            throw new BusinessException(-100424002, "未找到对应主题的业务知识测评问卷");
        }
        
        //提交答案到数据库
        surveyAnswerRecordService=SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SURVEYANSWERRECORD, SurveyAnswerRecordService.class);
        
        //先去掉多选的&
        String answerStrConvert = answerStr.replaceAll("&","");
        surveyAnswerRecordService.addOrUpdateAnswer(answerStrConvert, businessEntityModel.getId(), surveySubjectModel.getId(), ZqConstants.ZQ_KNOWLEDGE);
        DataRow riskRow=surveyAnswerRecordService.querySourceAndDefine(businessEntityModel.getId(), ZqConstants.ZQ_KNOWLEDGE);
		logger.info("riskRow1："+riskRow+"0");
		
		
        //将问卷数据提交到第三方接口
        ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE,
                ThirdInterface.class);
        DataRow input = DataFormatUtils.packThirdInput(userInfo);
        input.set("riskValue", riskRow.getString("score"));
        input.set("riskName", riskRow.getString("define"));
        input.set("riskLevel", riskRow.getString("define_value"));
        input.set("answer", answerStr);
        input.set("survey_sn", ThirdTBASConstants.SNO_ZQTZJBCP); //4 债券投资者基本知识问卷
        if ( DictionaryConstants.QUESTION_COMMIT_TYPE_LOCAL.equals(question_source) )
        {//问卷来源 0：本地数据库  1：第三方接口
            
            Map<String, Object> result = surveyService.countUserAnswersByLocalSource(answerStr, subjectCode);
            Map<String, QuestionInfoVo> standardAnsersMap = (Map<String, QuestionInfoVo>) result.get("standardQuestionAndAnsersMap");
            input.set("answer", DataFormatUtils.formatDDAnswer(answerStr, standardAnsersMap));
        }
        DataRow thirdRow = thirdInterface.addOrUpdateQuestionnaire(input);
        logger.info("问卷提交返回结果："+thirdRow);
        
        //获取债券业务知识测评可通过等级
        NodePropertyConfigModel propertyConfigModel=nodePropertyConfigService.queryByNodeIdAndStateAndPropertyKey(ZqConstants.ZQ_KNOWLEDGE, ZqConstants.ZQ_KNOWLEDGE_PASS_VALUE, DictionaryConstants.BOL_TRUE);
        if(null == propertyConfigModel){
            throw new BusinessException(-100424003, "债券合格投资者业务知识测评节点属性配置错误");
        }
        String passValue=propertyConfigModel.getPropertyValue();
        String[] passValues=passValue.split(",");
        
        String score=thirdRow.getString("riskvalue");
        if(null == score){
            score=riskRow.getString("score");
        }
		String check_flag = DictionaryConstants.BOL_FALSE;//默认业务知识测评不通过
		//分数满足要求，更新业务办理流程数据
		if (Double.valueOf(score) >= Integer.valueOf(passValues[0])&&Double.valueOf(score)  <= Integer.valueOf(passValues[1]))
		{
			service.UpdateZqNode(businessEntityModel.getId(), ZqConstants.ZQ_CHOOSE_ACCOUNT, opSource, opStation, ip);
		    check_flag = DictionaryConstants.BOL_TRUE;
		}
		
		
		//生成知识测评pdf
		userInfo.set("score", score);
		AgreeMentService serviceA = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_AGREEMENT, AgreeMentService.class);
		AgreementInfoVo agreementInfoVo = serviceA.queryInfoAndContentByCode(agreeCode);
		
//		ProtocolService protocolservice = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_PROTOCOLSERVICE, ProtocolService.class);
//        DataRow data = protocolservice.queryProtocol(agreeCode);
        //获取每题的答案
        String[] answerList = answerStr.split("\\|");
        for (String answerItem : answerList)
        {
            String[] answerInfo = answerItem.split("_");
            String questionId = answerInfo[0];
            String answerId = answerInfo[1];
            //判断题
            convertJudge(questionId,answerId);
            //单选题
            convertSelect(questionId,answerId);
            //多选题
            convertMultiSelect(questionId,answerId);
           
        }
        
        //生成pdf+上传文件服务器+协议留痕
        ZqService zqService = SpringHelper.getBean(ZqConstants.SERVER_ID_ZQ, ZqService.class);
        if(agreementInfoVo!=null&&agreementInfoVo.size()>0){
           Map<String, String> keyWords = new HashMap<String, String>();
           String agree_content=agreementInfoVo.getString("agree_content");//协议文本
           keyWords.put("username", userInfo.getName());//客户名称
           FileUploadResultVo pdfPath= createAgreementToPdf(agree_content, userInfo);
           logger.info("pdfPath:" + pdfPath.getFilePath()+"=="+ pdfPath.getSecret());
           
           AgreeRecordModel agreeRecordModel = new AgreeRecordModel();
           agreeRecordModel.setBusinessId(businessEntityModel.getId());
           agreeRecordModel.setNodeId(ZqConstants.ZQ_KNOWLEDGE);
           agreeRecordModel.setAgreeName(agreementInfoVo.getAgreeName());
           agreeRecordModel.setAgreeNo(String.valueOf(agreementInfoVo.getId()));
           agreeRecordModel.setAgreeVersion(String.valueOf(agreementInfoVo.getAgreeVersion()));
           agreeRecordModel.setProtocolDcsign("2");
           agreeRecordModel.setSignType("2");//此次协议属于测试题，未在节点配置
           agreeRecordModel.setSignSourceFlag("0");
           agreeRecordModel.setAgreeVersion("1");
           agreeRecordModel.setAgreePath(pdfPath.getFilePath());
           agreeRecordModel.setSecret(pdfPath.getSecret());
           logger.info("agreeRecordModel:"+agreeRecordModel);
           List<AgreeRecordModel> list = zqService.queryPDF(businessEntityModel.getId(),ZqConstants.ZQ_KNOWLEDGE);
           
           if ( list != null && list.size() > 0 )
           {
               int updatePDF = zqService.updatePDF(agreeRecordModel);
               if ( updatePDF != 0 )
                {
                   logger.info("测评试题修改成功！business_id:"+businessEntityModel.getId());
                }else{
                    throw new BusinessException(-100424004, "修改协议记录表失败");
                }
           }else{
               zqService.insertPDF(agreeRecordModel);
               logger.info("测评试题入库成功！business_id:"+businessEntityModel.getId());
           }
        }
        
		//返回结果集
		DataRow resultData = new DataRow();
		resultData.set("check_flag", check_flag);
		resultData.set("score", score);
		resultData.set("businessEntityModel", businessEntityModel);
		ResultVo resultVo = new ResultVo();
		resultVo.setResult(resultData);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void checkInput() throws InvokeException
	{
	    question_source = this.getStrParameter("question_source", "0"); //问卷来源 0：本地数据库  1：第三方接口
	    userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
        answerStr = this.getAndCheckBlankStrParam("answerStr", ErrorCodeCheckInput.BLANK_ANSWERSTR);
        
	}
	
	/**
	 * 
	 * @描述：选择题转换字母
	 * @作者：江昶
	 * @时间：2019年12月19日 下午4:01:30
	 * @param ans_id
	 * @return
	 */
	private String convertLetter(String ans_id){
	    if ( "1".equals(ans_id) )
        {
	        ans_id = "A";
        }else if ( "2".equals(ans_id) )
        {
            ans_id = "B";
        }else if ( "3".equals(ans_id) )
        {
            ans_id = "C";
        }else if ( "4".equals(ans_id) )
        {
            ans_id = "D";
        }
        else if ( "5".equals(ans_id) )
        {
            ans_id = "E";
        }else if ( "6".equals(ans_id) )
        {
            ans_id = "F";
        }
	    return ans_id;
	}
	
	/**
     * 
     * @描述：判断题转换
     * @作者：江昶
     * @时间：2019年12月19日 下午4:01:30
     * @param ans_id
     * @return
     */
	private String convertCorrect(String ans_id){
        if ( "1".equals(ans_id) )
        {
            ans_id = "√";
        }else if ( "2".equals(ans_id) )
        {
            ans_id = "×";
        }
        return ans_id;
    }
	
	private void convertJudge(String questionId,String answerId){
    	 if ( ("88").equals(questionId) )
         {
             userInfo.set("judge1", convertCorrect(answerId));
         }else if ( ("89").equals(questionId) )
         {
             userInfo.set("judge2", convertCorrect(answerId));
         }else if ( ("90").equals(questionId) )
         {
             userInfo.set("judge3", convertCorrect(answerId));
         }else if ( ("91").equals(questionId) )
         {
             userInfo.set("judge4", convertCorrect(answerId));
         }else if ( ("92").equals(questionId) )
         {
             userInfo.set("judge5", convertCorrect(answerId));
         }
	}
	
   private void convertSelect(String questionId,String answerId){
         if ( ("96").equals(questionId) )
         {
             userInfo.set("select1", convertLetter(answerId));
         }else if ( ("97").equals(questionId) )
         {
             userInfo.set("select2", convertLetter(answerId));
         }else if ( ("98").equals(questionId) )
         {
             userInfo.set("select3", convertLetter(answerId));
         }else if ( ("99").equals(questionId) )
         {
             userInfo.set("select4", convertLetter(answerId));
         }else if ( ("100").equals(questionId) )
         {
             userInfo.set("select5", convertLetter(answerId));
         }
    }
   
   private void convertMultiSelect(String questionId,String answerId){
       if ( ("102").equals(questionId) )
       {
           userInfo.set("multi_select1", convertMul(answerId));
       }else if ( ("103").equals(questionId) )
       {
           userInfo.set("multi_select2", convertMul(answerId));
       }else if ( ("104").equals(questionId) )
       {
           userInfo.set("multi_select3", convertMul(answerId));
       }else if ( ("105").equals(questionId) )
       {
           userInfo.set("multi_select4", convertMul(answerId));
       }else if ( ("106").equals(questionId) )
       {
           userInfo.set("multi_select5", convertMul(answerId));
       }
  }
	
   private String convertMul(String answerId){
       String[] answer = answerId.split("&");
       String multiSelect ="";
       for (int i = 0; i < answer.length; i++)
       {
           String convertLetter = convertLetter(answer[i]);
           multiSelect += convertLetter;
       }
       return multiSelect;
   }
   
	 /**
   * 描述:替换文件中的关键字
   * @author MIKE
   * @created 2017年6月8日 
   * @param modelMsg 模版文本
   * @param keyWords 关键字  key为替换的字段，value为替换后的文字
   * @return
   */
	public static String getSendMsg(String modelMsg, Map<String, String> keyWords)
	{
      for (Entry<String, String> item : keyWords.entrySet())
      {
          String key = item.getKey();
          String value = item.getValue();
          String keys="\\{"+ key+"\\}";
          modelMsg = modelMsg.replaceAll(keys, value);
      }
      return modelMsg;
	}
	
 
     
  
	    private FileUploadResultVo createAgreementToPdf(String content, DataRow userInfo)
	    {
	        StringBuffer agreeContentBuffer = new StringBuffer();
	        
	        agreeContentBuffer.append(content);
	    
	        String agreeContents = agreeContentBuffer.toString().replaceAll("font-family", "font");  //故意把html中的css样式设置字体改错 才能保证htmlToPdf()方法中 html头文件设置
	        agreeContents = agreeContents.replaceAll("<br>", "<p></p>");
	        agreeContents = agreeContents.replaceAll("<BR>", "<p></p>");
	        agreeContents = agreeContents.replaceAll("<p><br/></p>", "<p></p>");
	        agreeContents = agreeContents.replaceAll("\\{accountid\\}", userInfo.getString("client_id"));  //占位符替换为用户的客户号   
	        agreeContents = agreeContents.replaceAll("\\{username\\}", userInfo.getString("name"));  //占位符替换为用户的客户姓名
	        
	        
	        agreeContents = agreeContents.replaceAll("\\{judge1\\}", userInfo.getString("judge1")); 
	        agreeContents = agreeContents.replaceAll("\\{judge2\\}", userInfo.getString("judge2")); 
	        agreeContents = agreeContents.replaceAll("\\{judge3\\}", userInfo.getString("judge3")); 
	        agreeContents = agreeContents.replaceAll("\\{judge4\\}", userInfo.getString("judge4")); 
	        agreeContents = agreeContents.replaceAll("\\{judge5\\}", userInfo.getString("judge5")); 
	        agreeContents = agreeContents.replaceAll("\\{select1\\}", userInfo.getString("select1")); 
	        agreeContents = agreeContents.replaceAll("\\{select2\\}", userInfo.getString("select2")); 
	        agreeContents = agreeContents.replaceAll("\\{select3\\}", userInfo.getString("select3")); 
	        agreeContents = agreeContents.replaceAll("\\{select4\\}", userInfo.getString("select4")); 
	        agreeContents = agreeContents.replaceAll("\\{select5\\}", userInfo.getString("select5")); 
	        agreeContents = agreeContents.replaceAll("\\{multi_select1\\}", userInfo.getString("multi_select1")); 
	        agreeContents = agreeContents.replaceAll("\\{multi_select2\\}", userInfo.getString("multi_select2")); 
	        agreeContents = agreeContents.replaceAll("\\{multi_select3\\}", userInfo.getString("multi_select3")); 
	        agreeContents = agreeContents.replaceAll("\\{multi_select4\\}", userInfo.getString("multi_select4")); 
	        agreeContents = agreeContents.replaceAll("\\{multi_select5\\}", userInfo.getString("multi_select5")); 
	        agreeContents = agreeContents.replaceAll("\\{score\\}", userInfo.getString("score")); 
	         
	        
//	        Calendar now = Calendar.getInstance();  
	        
//	        agreeContents = agreeContents.replaceAll("\\{year\\}", now.get(Calendar.YEAR)+"");  //占位符替换为当年 年份
//	        agreeContents = agreeContents.replaceAll("\\{month\\}", (now.get(Calendar.MONTH) + 1) + "");  //占位符替换为当年 月份
//	        agreeContents = agreeContents.replaceAll("\\{day\\}", now.get(Calendar.DAY_OF_MONTH) + "");  //占位符替换为当年 日
	        
	        // 命名规则 user_id + " - " + "business_code"
	        String datetimestart = DateHelper.formatDate(new Date(), "yyyyMMdd");
	        String datetime = DateHelper.formatDate(new Date(), "yyyyMMddhhmmss");
	        String pdfPath = Configuration.getString(SystemConstants.CONFIG_PDF_PATH)+datetimestart+"/";
	          File file = new File(pdfPath);
	            if(!file.exists()&&!file.isDirectory()){//判断文件夹是否存在，不存在就创建
	                file.mkdir();
	            } 
	        pdfPath+=userId+"_"+agreeCode+"_"+datetime;
	         
	        FileUploadResultVo path= htmlToPdf(agreeContents, pdfPath); 
	        return path;
	    }
	    
	    private FileUploadResultVo htmlToPdf(String htmlContent, String pdfPath)
	    {
	         String path_pdf="";
	        try{
	          String template_pdf = Configuration.getString(SystemConstants.CONFIG_PDF_TEMPLATE)+"template.pdf";//模板文件。
	          logger.info("路径1"+template_pdf);
	          String path_html = pdfPath+".html"; 
	          logger.info("路径2"+path_html);
	          path_pdf =pdfPath+".pdf";  
	          logger.info("路径3"+path_pdf); 
	          DataRow result = new DataRow(); 
	          StringBuffer buffer = new StringBuffer();
	          buffer.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");  
	          buffer.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">")  ;
	          buffer.append("<head>");
	          buffer.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" \"/>"); 
	          buffer.append("</head>");
	          buffer.append("<style type=\"text/css\">body {font-family: SimSun;}</style>");
	          buffer.append("<body>");
	          buffer.append(htmlContent);
	          buffer.append("</body>");
	          buffer.append("</html>");
	          //生成html文件
	          File html_file = new File(path_html);
	          html_file.createNewFile();
	          OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(html_file),"GBK");
	          BufferedWriter o = new BufferedWriter(write);
	          o.write(buffer.toString());
	          o.close();
	          //获取空白PDF
	          PdfReader reader = new PdfReader(template_pdf);
	          ByteArrayOutputStream bos = null;
	          //写出去 可以用字节流
	          bos = new ByteArrayOutputStream();
	          PdfStamper ps = new PdfStamper(reader, bos);
	          ps.close();
	          
	          //生成空白pdf
	          FileOutputStream fos = new FileOutputStream(path_pdf);
	          fos.write(bos.toByteArray());
	          fos.close();
	          
	          Document document = new Document(PageSize.A4);
	          FileOutputStream outputStream = new FileOutputStream(path_pdf);
	          PdfWriter.getInstance(document, outputStream);
	          document.open();
	          BaseFont bfCN = BaseFont.createFont("STSongStd-Light", "UniGB-UCS2-H", false);
	          // 中文字体定义
	          Font chFont = new Font(bfCN, 12, Font.NORMAL, BaseColor.BLUE);
	          Font secFont = new Font(bfCN, 12, Font.NORMAL, new BaseColor(0, 204, 255));
	          final List<Element> pdfeleList = new ArrayList<Element>();
	          ElementHandler elemH = new ElementHandler() {
	              public void add(final Writable w) {
	                  if (w instanceof WritableElement) {
	                      pdfeleList.addAll(((WritableElement) w).elements());
	                  }
	              }
	          };
	          InputStreamReader isr = new InputStreamReader(new FileInputStream(path_html), "GBK");
	          XMLWorkerHelper.getInstance().parseXHtml(elemH, isr);
	          List<Element> list = new ArrayList<Element>();
	          for (Element ele : pdfeleList) {
	              if (ele instanceof LineSeparator
	                      || ele instanceof WritableDirectElement) {
	                  continue;
	              }
	              list.add(ele);
	          }
	          Paragraph paragraph = new Paragraph();
	          paragraph.addAll(list);
	          document.add(paragraph);
	          document.close(); 
	          String pdfName = userId + "_" + agreeCode + ".pdf";
	             try {
	                   //上传PDF到文件服务器
	                   FileUploadResultVo fileUploadResultVo = null;
	                   fileUploadResultVo = uploadPdfToServer(path_pdf, pdfName , userId+"");
	                    
	                    if(fileUploadResultVo.getErrorNo() != 0)
	                    {
	                        throw new InvokeException("上传签署的PDF文件到文件服务器失败！！！" ,-1);
	                    }
	                    //成功后，删除临时文件
//	                  if(deleteFile(path_pdf))
//	                  {
//	                      logger.info("PDF签署后清除完成！清除的文件：" + path_pdf);
//	                  }
//	                  else
//	                  {
//	                      logger.error("PDF签署清除失败！！！清除的文件：" + path_pdf);
//	                  }
//	                  
//	                  //成功后，删除临时文件
//	                  if(deleteFile(path_html))
//	                  {
//	                      logger.info("html文件清除成功！清除的文件：" + path_html);
//	                  }
//	                  else
//	                  {
//	                      logger.error("html文件清除失败！！！清除的文件：" + path_html);
//	                  }
	                    
	                    logger.info("合同PDF保存成功！文件服务器保存路径：" + fileUploadResultVo.getFilePath());
	                    return fileUploadResultVo;
	            } catch (InvokeException ew) {
	                logger.info("错误信息InvokeException=",ew);
	                throw new InvokeException(getErrorNo(-2), "协议PDF上传文件服务器异常");
	            }  
	        } catch (Exception e) {
	            logger.info("错误信息Exception=",e);
	            throw new InvokeException(getErrorNo(1), "协议转PDF出错");
	        } 
	    }
//	    
	    /**
	     * 上传PDF文件到文件服务器
	     * @param pdfPath pdf文件路径
	     * @param pdfName 文件名称
	     * @param user_id 用户编号
	     */
	    private static FileUploadResultVo uploadPdfToServer(String pdfPath , String pdfName , String user_id) throws Exception
	    {
	        String writeURL = Configuration.getString(SystemConstants.CONFIG_FILESERVER_WRITEURL);
	        String version = Configuration.getString(SystemConstants.CONFIG_FILESERVER_VERSION);
	        byte[] file = getBytes(pdfPath);
	        FileUploadResultVo fileUploadResultVo=null;
	        try {
	            fileUploadResultVo = FileUploadClientHelper.uploadFile(writeURL, file, pdfName, version, user_id, "0");
	        } catch (Exception e) {
	            throw new Exception(e.getMessage());
	        }
	        
	        return fileUploadResultVo;
	    }
	        /** 
	      * 获得指定文件的byte数组 
	      */  
	     private static byte[] getBytes(String filePath){  
	         byte[] buffer = null;  
	         try {  
	             File file = new File(filePath);  
	             FileInputStream fis = new FileInputStream(file);  
	             ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);  
	             byte[] b = new byte[1000];  
	             int n;  
	             while ((n = fis.read(b)) != -1) {  
	                 bos.write(b, 0, n);  
	             }  
	             fis.close();  
	             bos.close();  
	             buffer = bos.toByteArray();  
	         } catch (FileNotFoundException e) {  
	             logger.info(e,e);
	         } catch (IOException e) {  
	             logger.info(e,e);
	         }  
	         return buffer;  
	     }
	    
	      /** 
	      * 删除单个文件 
	      * @param   sPath    被删除文件的文件名 
	      * @return 单个文件删除成功返回true，否则返回false 
	      */  
	     public static boolean deleteFile(String sPath) {  
	        boolean flag = false;  
	         File file = new File(sPath);  
	         // 路径为文件且不为空则进行删除  
	         if (file.isFile() && file.exists()) {  
	             file.delete();  
	             flag = true;
	         }  
	         return flag;  
	     } 

	
}
                                                                                