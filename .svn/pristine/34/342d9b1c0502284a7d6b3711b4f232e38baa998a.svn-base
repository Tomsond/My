package com.thinkive.fxc.ismp.bus.business.tsgpzl.function;

import java.util.List;
import java.util.Map;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdAssetService;
import com.thinkive.fxc.ismp.bus.third.service.ThirdFirstTransactionService;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 开通退市股票权限办理数据获取  1.资产审核，判断客户总市值大于50万     2.经验审核，判断客户交易经验大于2年
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月21日 下午5:50:54
 */
public class Function1004433 extends ISMPBaseFunction
{
	
	private Long userId;//用户ID
	
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo execute() throws Exception
	{
		checkInput();
		
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		
		String flag = DictionaryConstants.BOL_FALSE;//所有条件是否满足
		
		//step1：则判断用户业务办理条件是否满足 >50W
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		ThirdAssetService thirdAssetService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDASSET, ThirdAssetService.class);
		DataRow assetInfo = thirdAssetService.checkZqAllAsset(userInfoVo, 500000);
		String assetFlag = assetInfo.getString("zqCheckFlag");//证券资产是否满足
		
		//step2.经验审核，判断客户交易经验大于2 年
		TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
		boolean isTradeTime = tradeTimeService.checkZdTradeTime();
		
		ThirdFirstTransactionService thirdFirstTransactionService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDFIRSTTRANSACTION, ThirdFirstTransactionService.class);
		DataRow trdtimeInfo = thirdFirstTransactionService.checkTradeExperience(userInfoVo, isTradeTime, 24);
		String trdTimeFlag = trdtimeInfo.getString("flag");
		
		//获取沪A帐号
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		Map<String, Object> accountInfo = thirdTrdAccountService.queryAndCheckGtAllAccountState(userInfoVo, true);
		List<DataRow> accountList = (List<DataRow>) accountInfo.get("accountList");
		String accountState = (String) accountInfo.get("accountState");
		
		//如果帐号正常，校验帐号权限是否开通
		if (DictionaryConstants.ZQACCOUNTSTATE_NOMAL.equals(accountState))
		{
			DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
			thirdInput.set("agmt_type_str", ThirdTBASConstants.AUTHORITY_TYPE_TSGP);
			List<DataRow> authorityList = thirdInterface.queryAuthority(thirdInput);
			//标识哪些帐号已开通权限
			accountList = checkAuthority(authorityList, accountList);
		}
		
		if (ThirdDictionaryConstants.TRADEEXPERIENCE_CHECK_FLAG_PASS.equals(trdTimeFlag) && ThirdDictionaryConstants.ASSET_CHECK_FLAG_PASS.equals(assetFlag)
				&& DictionaryConstants.ZQACCOUNTSTATE_NOMAL.equals(accountState))
		{
			flag = DictionaryConstants.BOL_TRUE;
		}
		DataRow checkFlagData = new DataRow();//资料检测结果
		checkFlagData.set("firsTransactionDate", trdtimeInfo.getString("firstTrdDate"));
		checkFlagData.set("flag", flag); //所有条件是否满足
		checkFlagData.set("trdTimeFlag", trdTimeFlag); //交易时间检测
		checkFlagData.set("assetFlag", assetFlag); //资产检测
		checkFlagData.set("stkvalue", assetInfo.getString("stkvalue"));
		checkFlagData.set("accountState", accountState);
		checkFlagData.set("isTradeTime", isTradeTime ? DictionaryConstants.BOL_TRUE : DictionaryConstants.BOL_FALSE);
		
		ResultVo resultVo = new ResultVo();
		resultVo.setResult("checkFlagData", checkFlagData);//判断条件
		resultVo.setResult("accountList", accountList);//交易帐号及其权限状态
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private List<DataRow> checkAuthority(List<DataRow> authorityList, List<DataRow> accountList) throws Exception
	{
		//如果查询到的权限集合authorityList为空,将accountList中每条数据退市股票开通标识open_flag设为"0",即未开通
		if (authorityList.size() == 0)
		{
			for (DataRow dataRow : accountList)
			{
				dataRow.set("open_flag", DictionaryConstants.BOL_FALSE);
			}
		}
		else
		{
			/* 如果查询到的权限集合authorityList不为空，循环去比对accountList和authorityList，如果accountList中的交易账号trdacct
			                         在authorityList中出现，且权限类型cust_agmt_type为  "02",则将accountList中该条数据的退市股票开通标识open_flag设为"1",即开通
			                             然后跳出accountList本次循环，再去比对下一个交易账号以此类推*/
			for (DataRow accountData : accountList)
			{
				String opFlag = DictionaryConstants.BOL_FALSE;//是否开通回购融券权限
				String trdacct = accountData.getString("trdacct");
				for (DataRow authorityData : authorityList)
				{
					if (trdacct.equals(authorityData.getString("trdacct")) && ThirdTBASConstants.AUTHORITY_TYPE_TSGP.equals(authorityData.getString("cust_agmt_type")))
					{
						opFlag = DictionaryConstants.BOL_TRUE;
						break;
					}
				}
				accountData.set("open_flag", opFlag);
			}
		}
		return accountList;
	}
	
	private void checkInput() throws InvokeException
	{
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
	}
}
