package com.thinkive.fxc.ismp.bus.business.fxjs.function;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSONArray;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.JsonHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.utils.ModularNodeUtil;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 风险警示权限开通  --- 签署协议，选择帐号（只有一步）
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月31日 下午3:51:51
 */
public class Function1004171 extends IsmpFlowBaseFunction
{
	
	private String trdaccount;//交易帐号,逗号分隔多个
	
	private String jsondata;//签名json字符串
	private String isgl;//是否高龄

	@SuppressWarnings("unchecked")
	public ResultVo execute() throws Exception
	{
		initVar();
		
		//获取节点属性组
		Map<String, DataRow> signParamsMap = ModularNodeUtil.checkAndReturnSignNodeProperty(nodePropertyConfigModelList);
		if(!isgl.equals("1")){
			signParamsMap.remove("glfxjss");
		}
		//提交的所有协议
		SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
		List<Map<String, String>> allSignList = signAndVerifyService.verifySignTextAndSubmitThird(jsondata, signParamsMap);
		
		//选择的帐号开通结果
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		
		//查询业务属性
		BusinessConfigService businessConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSCONFIG, BusinessConfigService.class);
		BusinessConfigModel businessConfigModel = businessConfigService.queryByOpSourceAndBusinessCode(businessCode, opSource);
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		
		//获取新业务实例对象
		BusinessEntityModel businessEntityModel = getNewBusinessEntity();
		businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
		
		//如果没有配置业务属性,或者配置为需要审核
		if (businessConfigModel == null || DictionaryConstants.BOL_TRUE.equals(businessConfigModel.getNeedAudit()))
		{
			String[] trdaccountArr = trdaccount.split(",");
			for (String item : trdaccountArr)
			{
				ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
				choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
				choiceAccountRecordModel.setTrdAccount(item);
				choiceAccountRecordModels.add(choiceAccountRecordModel);
			}
			businessEntityService.addEntityAndAgreeAndAccountAndAuditTask(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
		}
		//如果是统一跑批,或者
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_PP.equals(businessConfigModel.getDataSubmitType()))
		{
			String[] trdaccountArr = trdaccount.split(",");
			for (String item : trdaccountArr)
			{
				ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
				choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
				choiceAccountRecordModel.setTrdAccount(item);
				choiceAccountRecordModels.add(choiceAccountRecordModel);
			}
			businessEntityService.addEntityAndAgreeAndAccountAndPpTask(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
		}
		//如果是实时提交
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_THIRD.equals(businessConfigModel.getDataSubmitType()))
		{
			Map<String, Object> openResult = openFxjs(trdaccount);
			choiceAccountRecordModels = (List<ChoiceAccountRecordModel>) openResult.get("choiceAccountRecordModels");
			String dealResult = (String) openResult.get("dealResult");
			businessEntityModel.setDealResult(dealResult);
			businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
			businessEntityService.addEntityAndAgreeAndAccount(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
		}
		//如果中登服务时间提交第三方、非服务时间跑批
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_SERVICETIME.equals(businessConfigModel.getDataSubmitType()))
		{
			TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
			//如果不是中登时间则跑批
			if (!tradeTimeService.checkZdTradeTime())
			{
				String[] trdaccountArr = trdaccount.split(",");
				for (String item : trdaccountArr)
				{
					ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
					choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
					choiceAccountRecordModel.setTrdAccount(item);
					choiceAccountRecordModels.add(choiceAccountRecordModel);
				}
				businessEntityService.addEntityAndAgreeAndAccountAndPpTask(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			}
			else
			{
				Map<String, Object> openResult = openFxjs(trdaccount);
				choiceAccountRecordModels = (List<ChoiceAccountRecordModel>) openResult.get("choiceAccountRecordModels");
				String dealResult = (String) openResult.get("dealResult");
				businessEntityModel.setDealResult(dealResult);
				businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
				businessEntityService.addEntityAndAgreeAndAccount(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			}
		}
		resultVo.setResult("choiceAccountRecordModels", choiceAccountRecordModels);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);//返回成功标示
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);
		trdaccount = this.getAndCheckBlankStrParam("trdaccount", ErrorCodeCheckInput.BLANK_TRDACCOUNT);
		isgl=this.getStrParameter("isgl");
	}
	
	/**
	 * @描述：获取用户柜台有效股东帐号
	 * @作者：刘恺
	 * @时间：2016年9月14日 下午1:27:08
	 * @param userInfoVo
	 * @return
	 * @throws Exception
	 */
	private Map<String, DataRow> getGtNormalAccount(UserInfoVo userInfoVo) throws Exception
	{
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> gtAccount = thirdTrdAccountService.queryThirdTraAccountByTrdacctExcls(ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo, ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		Map<String, DataRow> gtAccountMap = new HashMap<String, DataRow>();
		//获取柜台帐号中，状态为正常，且指定状态为已指定或者新指定的帐号
		for (DataRow item : gtAccount)
		{
			if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(item.getString("state"))
					&& (ThirdTBASConstants.TRDACCOUNT_STATE_BINDED.equals(item.getString("bind_state")) || ThirdTBASConstants.TRDACCOUNT_STATE_NEWAPPOINT.equals(item.getString("bind_state"))))
			{
				gtAccountMap.put(item.getString("trdacct"), item);
			}
		}
		return gtAccountMap;
	}
	
	/**
	 * @描述：开通风险警示
	 * @作者：刘恺
	 * @时间：2016年9月14日 下午2:48:54
	 * @param trdaccount
	 * @return
	 * @throws Exception
	 */
	private Map<String, Object> openFxjs(String trdaccount) throws Exception
	{
		//中登时间提交第三方
//		String[] trdAccountArr = trdaccount.split(",");
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(trdaccount, DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
		
		//查询用户基本信息
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		
		//查询用户柜台所有股东账号
		Map<String, DataRow> gtAccountMap = getGtNormalAccount(userInfoVo);
		
		//开通权限
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
//		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		String dealResult = DictionaryConstants.DEAL_RESULT_SUCCESS;
		for (ChoiceAccountRecordModel accItem : choiceAccountRecordModels)
		{
//			ChoiceAccountRecordModel accountRecordModel = new ChoiceAccountRecordModel();
//			accountRecordModel.setTrdAccount(accItem);
			try
			{
				//如果帐号不正常
				if (!gtAccountMap.containsKey(accItem.getTrdAccount()))
				{
					dealResult = DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE;
					accItem.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_FAIL);
					accItem.setDescription(DictionaryConstants.CHOICE_ACCOUNT_ACCOUNTSTATEERROR);
				}
				//开通权限
				else
				{
					DataRow trdaccountInfo = gtAccountMap.get(accItem.getTrdAccount());
					thirdInput.set("trdaccount", trdaccountInfo.getString("trdacct"));
					thirdInput.set("trdacct_type", trdaccountInfo.getString("trdacct_type"));
					thirdInterface.openFxjs(thirdInput);
					accItem.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_SUCCESS);
					accItem.setDescription(DictionaryConstants.CHOICE_ACCOUNT_OPENSUCCESS);
				}
			}
			catch (InvokeException e)
			{
				dealResult = DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE;
				String msg = e.getMessage();
				accItem.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_FAIL);
				accItem.setDescription(msg);
			}
//			choiceAccountRecordModels.add(accountRecordModel);
		}
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("choiceAccountRecordModels", choiceAccountRecordModels);
		result.put("dealResult", dealResult);
		return result;
	}
}
