package com.thinkive.fxc.ismp.bus.business.mark;

import java.util.Date;

import org.apache.log4j.Logger;

import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ProtocolPipeliningModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.ProtocolPipeliningService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.server.ResultVo;
import com.thinkive.server.util.SpringUtil;


/**
 * 作者：MIKE
 * 公司：深圳市思迪信息技术股份公司
 * 日期时间：2017年6月3日 上午11:22:32
 * 说明：插入协议流水记录类
 */
public class Function1004502 extends ISMPBaseFunction
{
	private Long userId;
	private String type;//业务类型
	private String protocol_name;//协议名称
	private String protocol_version;//协议版本
	private String signing_status;//签署状态
	private String signing_time;//签署时间
	private String signature_channel;//签署渠道
	private String channel_type;//渠道类型
	private String channel_version_number;//渠道版本号
	private String device_id;//设备ID
	private String ip;//IP地址
	private String xdtx;//xdtx
	private String mac;//Mac地址
	private String md5;//MD5值
	private String effective_date_of_agreement;//协议生效日期
	private String protocol_expiration_date;//协议失效日期
	private String protocol_content;//协议内容
	private String pdfpath;//协议路径
	private String key;//协议键值
	private String business_code;//业务类型
	private String business_id;//实例id
	
	private UserInfoService userInfoService;
	
	private static Logger logger = Logger.getLogger(Function1004502.class);
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		ResultVo resultVo = new ResultVo();
		userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		String account = userInfoVo.getFundAccount();
		String name = userInfoVo.getName();
		ProtocolPipeliningModel model = new ProtocolPipeliningModel();
		model.setAccount(account);
		model.setName(name);
		model.setUserid(userId);
		model.setType(type);
		model.setProtocolname(protocol_name);
		model.setProtocolcontent(protocol_content);
		//model.setProtocolexpirationdate(new Date());
		model.setProtocolversion(protocol_version);
		model.setSignaturechannel(signature_channel);
		model.setSigningstatus(signing_status);
		model.setSigningtime(new Date());
		model.setChanneltype(channel_type);
		model.setChannelversionnumber(channel_version_number);
		model.setDeviceid(device_id);
		model.setIp(ip);
		model.setXdtx(xdtx);
		model.setEffectivedateofagreement(new Date());
		model.setMac(mac);
		model.setMD5(md5);
		model.setkey(key);
		model.setpdfpath(pdfpath);
		model.setbusinessid(business_id);
		model.setbusinesscode(business_code);
		ProtocolPipeliningService service = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_PROTOCOLPIPELINING, ProtocolPipeliningService.class);
		try {
			service.protocolPipeliningInsert(model);
			resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
			resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		} catch (Exception e) {
			resultVo.setErrorNo(-1);
			logger.info("[1004502]留痕异常："+e);
			resultVo.setErrorMsg("留痕记录失败！");
		}
		return resultVo;
		
	}
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		type = this.getStrParameter("type");
		protocol_name = this.getStrParameter("protocol_name");
		protocol_version = this.getStrParameter("protocol_version");
		signing_status = this.getStrParameter("signing_status");
		signing_time = this.getStrParameter("signing_time");
		signature_channel = this.getStrParameter("signature_channel");
		channel_type = this.getStrParameter("channel_type");
		channel_version_number = this.getStrParameter("channel_version_number");
		device_id = this.getStrParameter("device_id");
		ip = this.getStrParameter("ip");
		xdtx = this.getStrParameter("xdtx");
		mac = this.getStrParameter("mac");
		md5 = this.getStrParameter("md5");
		effective_date_of_agreement = this.getStrParameter("effective_date_of_agreement");
		protocol_expiration_date = this.getStrParameter("protocol_expiration_date");
		protocol_content = this.getStrParameter("protocol_content");
		pdfpath = this.getStrParameter("pdfpath");
		key = this.getStrParameter("key");
		business_code = this.getStrParameter("business_code");
		business_id = this.getStrParameter("business_id");
	}	
}
