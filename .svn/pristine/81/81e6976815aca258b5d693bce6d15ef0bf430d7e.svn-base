package com.thinkive.fxc.ismp.bus.base.basicdata.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.SurveyAnswerDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.SurveyDefineDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.SurveySubjectDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.SurveyDefineModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.SurveySubjectModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.SurveyService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.QuestionInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.NodePropertyConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.service.NodePropertyConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.ggt.contants.GgtErrorCodeContants;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;

/**
 * @描述: 公共-问卷服务层接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月22日 下午4:55:29
 */
public class SurveyServiceImpl implements SurveyService
{
	
	private SurveyAnswerDao surveyAnswerDao;
	
	private SurveyDefineDao surveyDefineDao;
	
	private SurveySubjectDao surveySubjectDao;
	
	public void setSurveyAnswerDao(SurveyAnswerDao surveyAnswerDao)
	{
		this.surveyAnswerDao = surveyAnswerDao;
	}
	
	public void setSurveyDefineDao(SurveyDefineDao surveyDefineDao)
	{
		this.surveyDefineDao = surveyDefineDao;
	}
	

    public void setSurveySubjectDao(SurveySubjectDao surveySubjectDao)
    {
        this.surveySubjectDao = surveySubjectDao;
    }

    @Override
	public List<QuestionInfoVo> queryBySubjectCode(String subjectCode)
	{
		List<QuestionInfoVo> models = null;
		if (StringUtils.isNotBlank(subjectCode))
		{
			models = surveyAnswerDao.queryBySubjectCode(subjectCode);
		}
		return models;
	}
	
	@Override
	public SurveyDefineModel queryBySubjectIdAndScore(Long SubjectId, Long score, String state)
	{
		return surveyDefineDao.queryBySubjectIdAndScore(SubjectId, score, state);
	}
	
	@Override
	public Map<String, Object> countUserAnswersByLocalSource(String answers, String subjectCode)
	{
		//获取所有答案信息
		List<QuestionInfoVo> surveyAnswers = queryBySubjectCode(subjectCode);
		if (surveyAnswers == null)
		{
			throw new BusinessException(ErrorCodeSystem.SURVEY_NO_ANSWER_CONFIG);
		}
		
		long subId = surveyAnswers.get(0).getSubId();
		//数据库标准答案Map
		Map<String, QuestionInfoVo> standardQuestionAndAnsersMap = new HashMap<String, QuestionInfoVo>();
		//所有答案Map
		Map<String, QuestionInfoVo> resultStandardQuestionAndAnsersMap = new HashMap<String, QuestionInfoVo>();
		//所有需要提交的题目Map
		Map<Long, Boolean> questionsMap = new HashMap<Long, Boolean>();
		for (QuestionInfoVo surveyAnswerModel : surveyAnswers)
		{
			Long answerId = surveyAnswerModel.getAId();
			Long questionId = surveyAnswerModel.getQueId();
			standardQuestionAndAnsersMap.put(questionId + "_" + answerId, surveyAnswerModel);
			questionsMap.put(questionId, true);
		}
		
		//解析用户答案,计算分数
		String[] answerList = answers.split("\\|");
		Long score = 0L;
		for (String answerItem : answerList)
		{
			String[] answerInfo = answerItem.split("_");
			Long questionId = Long.parseLong(answerInfo[0]);
			Long answerId = Long.parseLong(answerInfo[1]);
			//如果用户提交的题目的答案在数据库中不存在
			String questionAndAnswer = questionId + "_" + answerId;
			if (!standardQuestionAndAnsersMap.containsKey(questionAndAnswer))
			{
				throw new BusinessException(ErrorCodeSystem.SUBMIT_ANSWER_ERROR);
			}
			QuestionInfoVo surveyAnswerModel = standardQuestionAndAnsersMap.get(questionAndAnswer);
			score += surveyAnswerModel.getMark();
			resultStandardQuestionAndAnsersMap.put(questionAndAnswer, surveyAnswerModel);
			//移除已计算的答案
			standardQuestionAndAnsersMap.remove(questionAndAnswer);
			//移除已提交的问题
			questionsMap.remove(questionId);
		}
		//如果还有答案没有移除（证明对应题目的答案没有提交）
		if (!questionsMap.isEmpty())
		{
			throw new BusinessException(ErrorCodeSystem.SUBMIT_QUESTION_ERROR);
		}
		String level = "";
		String levelName = "";
		SurveyDefineModel surveyDefineModel = surveyDefineDao.queryBySubjectIdAndScore(surveyAnswers.get(0).getSubId(), score, DictionaryConstants.BOL_TRUE);
		if (surveyDefineModel != null)
		{
			levelName = surveyDefineModel.getDefine();
			level = surveyDefineModel.getDefineValue();
		}
		DataRow countData = new DataRow();
		countData.set("status", ThirdDictionaryConstants.SFCG_STATUS_VALID);
		countData.set("score", score);
		countData.set("level", level);
		countData.set("levelName", levelName);
		countData.set("subitemname", levelName);
		countData.set("risklevel", level);
		countData.set("riskvalue", score);
		countData.set("subId", subId);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("countData", countData);
		result.put("standardQuestionAndAnsersMap", resultStandardQuestionAndAnsersMap);
		return result;
	}
	
	@Override
	public List<QuestionInfoVo> queryByBusinessIdAndNodeId(Long businessId, String nodeId)
	{
		if (null == businessId || StringUtils.isBlank(nodeId))
		{ //校验入参，杜绝检索出全表记录的情况
			return null;
		}
		return surveyAnswerDao.queryByBusinessIdAndNodeId(businessId, nodeId);
	}

    @Override
    public SurveySubjectModel queryBySubject(String subjectCode)
    {
        return surveySubjectDao.queryBySubjectCode(subjectCode);
    }

	@Override
	public String checkPassRisk(String subitemname, String passSitename) {
		if(!passSitename.contains(subitemname) || StringUtils.isEmpty(subitemname)){
			return DictionaryConstants.BOL_FALSE;
         }
        	return DictionaryConstants.BOL_TRUE;
	}

	@Override
	public String checkPassRiskNeedQurLocal(String subitemname, String nodeId, String passField) {
		NodePropertyConfigService nodePropertyConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_NODEPROPERTYCONFIG,
                NodePropertyConfigService.class);
	    NodePropertyConfigModel propertyConfigModel = nodePropertyConfigService.queryByNodeIdAndStateAndPropertyKey(
    			nodeId, passField, DictionaryConstants.BOL_TRUE);
        if ( null == propertyConfigModel )
        {
           throw new BusinessException(GgtErrorCodeContants.GGT_RISK_NODEPROPERTY_ERROR, "风险测评节点属性配置错误");
        }
        String passGrade = propertyConfigModel.getPropertyValue();
        return checkPassRisk(subitemname, passGrade);
	}
	
	@Override
	public String checkPassKnow(String knowValue, String passValue) {
		 String [] passValues = passValue.split(",");
		 if (StringUtils.isEmpty(knowValue) || Double.valueOf(knowValue) < Integer.valueOf(passValues[0]) || Double.valueOf(knowValue)  > Integer.valueOf(passValues[1]))
     	  {
     			return DictionaryConstants.BOL_FALSE;
     	  }
		  return DictionaryConstants.BOL_TRUE;
	}

	@Override
	public String checkPassKnowNeedQurLocal(String knowValue, String nodeId, String passField) {
		// TODO Auto-generated method stub
		NodePropertyConfigService nodePropertyConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_NODEPROPERTYCONFIG,
                NodePropertyConfigService.class);
		
		 NodePropertyConfigModel propertyConfigModel = nodePropertyConfigService.queryByNodeIdAndStateAndPropertyKey(
				 nodeId, passField, DictionaryConstants.BOL_TRUE);
		 if ( null == propertyConfigModel )
	     {
	         throw new BusinessException(GgtErrorCodeContants.GGT_RISK_NODEPROPERTY_ERROR, "知识节点属性配置错误");
	     }
	     String passZsGrade = propertyConfigModel.getPropertyValue();//可通过的知识测评等级
	     return checkPassKnow(knowValue, passZsGrade);
	}

	@Override
	public DataRow getThirdSurveyInfo(String sub_id, UserInfoVo userInfoVo) throws Exception {
		
		DataRow fxcpInput = DataFormatUtils.packThirdInput(userInfoVo);
		fxcpInput.set("survey_sn", sub_id);
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		return thirdInterface.getQuestionnaire(fxcpInput);
	}

	@Override
	public DataRow getThirdSurveyInfo(String sub_id, Long user_id) throws Exception {
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfo=userInfoService.queryAndCheckUserByUserIdAndType(user_id, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		return this.getThirdSurveyInfo(sub_id, userInfo);
	}
	
}
