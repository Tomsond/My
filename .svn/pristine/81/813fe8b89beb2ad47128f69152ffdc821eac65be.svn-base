package com.thinkive.fxc.ismp.bus.business.zq.function;

import java.util.ArrayList;
import java.util.List;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BprocNodeConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.BprocNodeConfigAndDefineVO;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.zq.constants.ZqConstants;
import com.thinkive.fxc.ismp.bus.business.zq.service.ZqService;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 债券合格投资者--选择账号
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月10日 下午5:05:52
 */
public class Function1004239 extends ISMPBaseFunction{
	
    private Long userId;//用户ID
    
    private String trdaccount;// A1234567|00,1234567|10 
    
	private String nodeId;
    
	@Override
	public ResultVo execute() throws Exception{
    
        checkInput();
        
        UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
        UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
        if (userInfo == null)
        {
            throw new BusinessException(ErrorCodeSystem.NOTEXIST_USER, "用户不存在");
        }
     // step1：节点权限校验，并返回当前业务实例
//        Map<String, Object> checkResult = FlowNodeManageUtil.checkNodeAuthAndReturnInfo(userId, businessCode, opSource,nodeId);
//        BusinessEntityAndConfigVO businessEntityAndConfigVO = (BusinessEntityAndConfigVO) checkResult
//                .get("businessEntityAndConfigVO");
//        BusinessEntityService businessEntityService = SpringUtil
//                .getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
//        boolean isNewBusiness = businessEntityAndConfigVO == null ? true : false;
//
//        // step2：新增业务办理实例
//        BusinessEntityModel businessEntityModel = new BusinessEntityModel();
//        if (isNewBusiness) {
//            businessEntityModel.setUserId(userId);
//            businessEntityModel.setOpSource(opSource);
//            businessEntityModel.setOpStation(opStation);
//            businessEntityModel.setBusinessCode(businessCode);
//            businessEntityModel.setIsComplete(DictionaryConstants.BOL_FALSE);
//            businessEntityModel.setIp(ip);
//            businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
//            businessEntityService.add(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
//            businessEntityAndConfigVO = new BusinessEntityAndConfigVO();
//            businessEntityAndConfigVO.putAll(businessEntityModel);
//        }
        BprocNodeConfigService bprocNodeConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BPROCNODECONFIG, BprocNodeConfigService.class);
        BprocNodeConfigAndDefineVO bprocNodeConfigAndDefineVO = bprocNodeConfigService.queryNadVoByBCodeAndOpSouAndNodeId(ZqConstants.BUSINESS_CODE, opSource, nodeId);
        
        //查询正在办理的港股通业务数据
        BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
        BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCode(userId, ZqConstants.BUSINESS_CODE);
        if(businessEntityModel == null)
        {
            throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW, "业务办理数据不存在");
        }
        
        businessEntityModel.setNodeId(bprocNodeConfigAndDefineVO.getNextBpNodeId());
        businessEntityService.changeBusinessFlowNode(businessEntityModel, bprocNodeConfigAndDefineVO.getNextBpNodeId());
        
        //选择的帐号开通结果
        List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
        
        //提交所选股东号，更新业务实例节点，并新增账号选择记录
        ZqService zqService = SpringHelper.getBean(ZqConstants.SERVER_ID_ZQ, ZqService.class);
        String[] trdAccounts = trdaccount.split(",");
        zqService.saveTrdAccount(trdAccounts,businessEntityModel,bprocNodeConfigAndDefineVO.getNextBpNodeId(), choiceAccountRecordModels);
        
        
        ResultVo resultVo = new ResultVo();
        resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
        resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
        return resultVo;
    }
	    
	    
    private void checkInput() throws InvokeException
    {
        userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
        trdaccount = this.getAndCheckBlankStrParam("trdaccount", ErrorCodeCheckInput.BLANK_TRDACCOUNT);
        nodeId = this.getAndCheckBlankStrParam("nodeId", ErrorCodeCheckInput.BLANK_NODEID);
        opSource = this.getAndCheckBlankStrParam("op_source", ErrorCodeCheckInput.BLANK_OP_SOURCE);
    }
    
    
}
