package com.thinkive.fxc.ismp.bus.business.util;

import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.StringHelper;
import com.thinkive.base.util.security.AES;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.gateway.v2.client.Client;
import com.thinkive.gateway.v2.result.Result;

/**
 * @描述: 密码加密工具类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月25日 上午11:15:30
 */
public class PwdEncryptUtil
{
	
	public static final String PSW_ENCRYPT_TYPE = Configuration.getString("secret.pwdEncryptType", "1");
	
	/**
	 * AES加密key
	 */
	public static final String AES_KEY = Configuration.getString("secret.aesKey", "B49A86FA425D439dB510A234A3E25A3E");
	
	/**
	 * @描述：调用加密BUS对密码加密
	 * @作者：田源
	 * @时间：2016年8月25日 上午11:32:20
	 * @param msg 
	 * @return String
	 * @throws Exception
	 */
	public static String encryptionPsw(String msg) throws Exception
	{
		if(StringHelper.isEmpty(msg)){
			throw new BusinessException(-1, "需加密字符串不能为空");
		}
		
		if(!isInteger(msg)){
			throw new BusinessException(-1, "需加密的字符串不是整数");
		}
		
		String retMsg = null;
		if (StringUtils.isBlank(msg))
		{
			return retMsg;
		}
		
		if (DictionaryConstants.ENCRYPTION_TYPE_TBAS.equals(PSW_ENCRYPT_TYPE))
		{
			
			DataRow param = new DataRow();
			param.set("data", msg);
			param.set("funcno", DictionaryConstants.ENCRYPTIONPSW_FUNCTIONO);
			Result result = getPswEncryResult(DictionaryConstants.ENCRYPTIONPSW_FUNCTIONO, param);
			if (result.getErr_no() != DictionaryConstants.INVOKE_FUNCTION_SUCCESS)
			{
				throw new BusinessException(result.getErr_no(), result.getErr_info());
			}
			DataRow data = result.getData();
			if (data == null)
			{
				throw new BusinessException(0, "调用密码加密BUS出错");
			}
			retMsg = data.getString("result");
		}
		else if (DictionaryConstants.ENCRYPTION_TYPE_AES.equals(PSW_ENCRYPT_TYPE))
		{
			AES aes = new AES(AES_KEY);
			retMsg = aes.encrypt(msg, "utf-8");
		}
		return retMsg;
	}
	
	/**
	 * @描述：将密码进行解密
	 * @作者：田源
	 * @时间：2016年8月25日 下午1:50:35
	 * @param msg
	 * @return String
	 * @throws Exception
	 */
	public static String decryptionPsw(String msg) throws Exception
	{
		
		if(StringHelper.isEmpty(msg)){
			throw new BusinessException(-1, "需解密字符串不能为空");
		}
		
		if(isInteger(msg)){
			throw new BusinessException(-1, "需解密的字符串不是密文");
		}
		
		String retMsg = null;
		if (DictionaryConstants.ENCRYPTION_TYPE_TBAS.equals(PSW_ENCRYPT_TYPE))
		{
			DataRow param = new DataRow();
			param.set("data", msg);
			param.set("funcno", DictionaryConstants.DECRYPTIONPSW_FUNCTIONNO);
			Result result = getPswEncryResult(DictionaryConstants.DECRYPTIONPSW_FUNCTIONNO, param);
			if (result.getErr_no() != 0)
			{
				throw new BusinessException(result.getErr_no(), result.getErr_info());
			}
			DataRow data = result.getData();
			if (data == null)
			{
				throw new BusinessException(0, "调用密码加密BUS出错");
			}
			retMsg = data.getString("result");
		}
		else if (DictionaryConstants.ENCRYPTION_TYPE_AES.equals(PSW_ENCRYPT_TYPE))
		{
			AES aes = new AES(AES_KEY);
			retMsg = aes.decrypt(msg, "utf-8");
		}
		return retMsg;
		
	}
	
	/**
	 * @描述：根据功能号调用相关接口结果集
	 * @作者：田源
	 * @时间：2016年8月25日 下午1:51:01
	 * @param funcNo
	 * @param param
	 * @return
	 */
	private static Result getPswEncryResult(int funcNo, DataRow param)
	{
		Client client = new Client(SystemConstants.PWD_BUS);
		Result result = client.getResult(funcNo, param);
		return result;
	}
	
	/**
	 * @描述：判断字符串是否是数字
	 * @作者：MIKE
	 * @时间：2018年7月16日 上午10:15:01
	 * @return
	 */
	public static boolean isInteger(String str) {  
        Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");  
        return pattern.matcher(str).matches();  
  }
}
