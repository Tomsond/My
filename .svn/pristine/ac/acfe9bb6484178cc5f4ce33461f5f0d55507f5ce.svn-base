package com.thinkive.fxc.ismp.bus.base.business.function;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.NodePropertyConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BprocNodeConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.FlowNodeManageService;
import com.thinkive.fxc.ismp.bus.base.business.service.NodePropertyConfigService;
import com.thinkive.fxc.ismp.bus.base.business.vo.BprocNodeConfigAndDefineVO;
import com.thinkive.fxc.ismp.bus.base.business.vo.BusinessEntityAndConfigVO;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.server.ResultVo;

/**
 * @描述: 所有流程节点功能号都需要继承该类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月22日 上午10:39:15
 */
public abstract class IsmpFlowBaseFunction extends ISMPBaseFunction
{
	
	protected ResultVo resultVo = new ResultVo();
	
	protected Long userId;//用户编号
	
	protected String opSource;//客户端类型
	
	protected String businessCode;//业务类型
	
	protected String nodeId;//节点英文标识
	
	protected String isComplete;//当前节点操作完后，业务实例是否完成 
	
	protected String dealResult;//业务实例完成结果
	
	private boolean isNewBusiness;//是否是新办业务0：否，1：是
	
	protected boolean notChangeNodeId;//不修改流程节点
	
	protected boolean needReturnBusinessEntityVo;//是否需要返回业务办理实例视图
	
	protected BusinessEntityAndConfigVO businessEntityAndConfigVO;//业务实例
	
	protected BprocNodeConfigAndDefineVO submitBprocNodeConfigAndDefineVO;//当前操作的流程节点配置和定义
	
	protected BprocNodeConfigAndDefineVO userCurrBprocNodeConfigAndDefineVO;//用户当前流程节点配置和定义
	
	protected List<NodePropertyConfigModel> nodePropertyConfigModelList;//节点属性列表
	
	/**
	 * 描述：execute执行前行此方法
	 * 作者：刘恺
	 * 时间：2016年8月22日 下午1:33:02
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void before()
	{
		super.before();
		//step1：初始化基本入参
		initVar();
		
		//step2.节点权限校验，并返回当前业务实例
		FlowNodeManageService flowNodeManageService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_FLOWNODEMANAGE, FlowNodeManageService.class);
		Map<String, Object> checkResult = flowNodeManageService.checkNodeAuthAndReturnInfo(userId, businessCode, this.getRequest().getFuncNo(), opSource, nodeId);
		businessEntityAndConfigVO = (BusinessEntityAndConfigVO) checkResult.get("businessEntityAndConfigVO");
		submitBprocNodeConfigAndDefineVO = (BprocNodeConfigAndDefineVO) checkResult.get("submitBprocNodeConfigAndDefineVO");
		userCurrBprocNodeConfigAndDefineVO = (BprocNodeConfigAndDefineVO) checkResult.get("userCurrBprocNodeConfigAndDefineVO");
		nodePropertyConfigModelList = (List<NodePropertyConfigModel>) checkResult.get("nodePropertyConfigModelList");//节点属性列表
		isNewBusiness = businessEntityAndConfigVO == null ? true : false;
		needReturnBusinessEntityVo = false;
		notChangeNodeId = false;
	}
	
	/**
	 * @描述：execute执行无异常后执行此方法
	 * @作者：刘恺
	 * @时间：2016年1月15日 上午10:11:47
	 */
	@Override
	public void after()
	{
		resultVo.setResult("defaultDate", new DataRow());
		if (needReturnBusinessEntityVo)
		{
			resultVo.setResult("businessEntityAndConfigVO", businessEntityAndConfigVO);//业务实例和业务配置视图
		}
		if (notChangeNodeId)
		{
			return;
		}
		try
		{
			if (!isNewBusiness && !DictionaryConstants.FLOW_LASTSTEP_NEXT.equals(submitBprocNodeConfigAndDefineVO.getNextBpNodeId()))
			{
				FlowNodeManageService flowNodeManageService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_FLOWNODEMANAGE, FlowNodeManageService.class);
				flowNodeManageService.changeBusinessFlowNode(businessEntityAndConfigVO, submitBprocNodeConfigAndDefineVO, isComplete, dealResult, opSource, opStation, ip);
			}
		}
		catch (Exception e)
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_CHANGENODE_ERROR, e);
		}
		
		BprocNodeConfigAndDefineVO nextNodeConfigAndDefineVO = null;
		if (!DictionaryConstants.FLOW_LASTSTEP_NEXT.equals(submitBprocNodeConfigAndDefineVO.getNextBpNodeId()))
		{
			BprocNodeConfigService bprocNodeConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BPROCNODECONFIG, BprocNodeConfigService.class);
			nextNodeConfigAndDefineVO = bprocNodeConfigService.queryNadVoByBtypeIdAndNodeId(submitBprocNodeConfigAndDefineVO.getBtypeId(), submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
		}
		else
		{
			nextNodeConfigAndDefineVO = new BprocNodeConfigAndDefineVO();
			nextNodeConfigAndDefineVO.setNextBpNodeId(DictionaryConstants.FLOW_LASTSTEP_NEXT);
		}
		List<NodePropertyConfigModel> nodePropertyConfigModels = new ArrayList<NodePropertyConfigModel>();
		if (!StringUtils.isBlank(nextNodeConfigAndDefineVO.getNodeType()))
		{
			NodePropertyConfigService nodePropertyConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_NODEPROPERTYCONFIG, NodePropertyConfigService.class);
			nodePropertyConfigModels = nodePropertyConfigService.queryByNodeIdAndState(nextNodeConfigAndDefineVO.getNodeId(), DictionaryConstants.BOL_TRUE);
		}
		resultVo.setResult("nextNodeConfigAndDefineVO", nextNodeConfigAndDefineVO);//下一个节点配置和定义视图
		resultVo.setResult("nodePropertyConfigModels", nodePropertyConfigModels);//下一个节点的节点属性
	}
	
	/**
	 * @描述：声明业务实例已完成
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午10:18:38
	 * @param isComplete 是否完成
	 * @param dealResult 处理结果
	 */
	protected void declareIsComplete(String isComplete, String dealResult)
	{
		this.isComplete = isComplete;
		this.dealResult = dealResult;
	}
	
	/**
	 * @描述：获取新业务实例
	 * @作者：刘恺
	 * @时间：2016年8月28日 上午10:38:27
	 * @return
	 */
	protected BusinessEntityModel getNewBusinessEntity()
	{
		BusinessEntityModel businessEntityModel = new BusinessEntityModel();
		businessEntityModel.setUserId(userId);
		businessEntityModel.setOpSource(opSource);
		businessEntityModel.setOpStation(opStation);
		businessEntityModel.setBusinessCode(businessCode);
		businessEntityModel.setIsComplete(DictionaryConstants.BOL_FALSE);
		businessEntityModel.setIp(ip);
		businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
		return businessEntityModel;
	}
	
	/**
	 * @描述：返回业务办理实例
	 * @作者：刘恺
	 * @时间：2016年8月28日 上午10:51:53
	 * @param businessEntityModel
	 */
	@SuppressWarnings("unchecked")
	protected BusinessEntityAndConfigVO returnBusinessEntityModel(BusinessEntityModel businessEntityModel)
	{
		if (businessEntityAndConfigVO == null)
		{
			businessEntityAndConfigVO = new BusinessEntityAndConfigVO();
		}
		businessEntityAndConfigVO.putAll(businessEntityModel);
		needReturnBusinessEntityVo = true;
		return businessEntityAndConfigVO;
	}
	
	/**
	 * @描述：获取“是否是新业务”
	 * @作者：刘恺
	 * @时间：2016年8月28日 上午11:23:31
	 * @return
	 */
	protected boolean isNewBusiness()
	{
		return isNewBusiness;
	}
	
	/**
	 * @描述：声明：正常返回数据，但不修改流程节点
	 * @作者：刘恺
	 * @时间：2016年8月28日 下午6:27:18
	 */
	protected void declareNotChangeNodeId()
	{
		this.notChangeNodeId = true;
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午8:55:24
	 */
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		opSource = this.getAndCheckBlankStrParam("op_source", ErrorCodeCheckInput.BLANK_OP_SOURCE);
		businessCode = this.getAndCheckBlankStrParam("businessCode", ErrorCodeCheckInput.BLANK_BUSINESSCODE);
		nodeId = this.getAndCheckBlankStrParam("nodeId", ErrorCodeCheckInput.BLANK_NODEID);
	}
}
