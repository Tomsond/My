package com.thinkive.fxc.ismp.bus.business.dzhtqs.function;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.DateHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.fileupload.bean.FileUploadResultVo;
import com.thinkive.fxc.fileupload.util.FileUploadClientHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.AgreeMentService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.AgreementInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.AgreeRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.AgreeRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserSnapShotService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.business.dzhtqs.service.SignElectronicContractService;
import com.thinkive.fxc.ismp.bus.business.util.HtmlToPDFUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

public class Function1005005 extends ISMPBaseFunction
{
    private ThirdInterface thirdInterface;
    private String prodta_no="";
    private String prod_code="";
    private String jsondata;//签名json字符串
    private String             agree_code;
	private AgreeRecordService agreeRecordService;
	private SignElectronicContractService service;
    @SuppressWarnings({ "deprecation", "rawtypes" })
	@Override
    public ResultVo execute() throws InvokeException, Exception
    {
        
        checkinput();
        UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
        UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
        //协议签署并留痕
        SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
        List<Map<String, String>> allSignList =signAndVerifyService.verifySignTextAndSubmitThird(jsondata);

       // signAndVerifyService.signContract(userId,jsondata);
        DataRow thirdInput = new DataRow();
        thirdInput.set("client_id", userInfoVo.getClientId()); 
        thirdInput.set("fund_account", userInfoVo.getFundAccount());
        thirdInput.set("prodta_no", prodta_no);
        thirdInput.set("prod_code",prod_code);
        thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
        service = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CONTRACT_SIGN, SignElectronicContractService.class);
        DataRow businessInfoVo = new DataRow();
        ResultVo vo = new ResultVo();
		   businessInfoVo.set("userId",userId);
   	       businessInfoVo.set("nodeId",DictionaryConstants.FLOW_LASTSTEP_NEXT);
   		   businessInfoVo.set("isComplete",DictionaryConstants.BOL_TRUE);
   		   businessInfoVo.set("dealResult",DictionaryConstants.DEAL_RESULT_SUCCESS);
   		   businessInfoVo.set("opSource",opSource);
   		   businessInfoVo.set("opStation",opStation);
   		   businessInfoVo.set("ip",ip);
   		   businessInfoVo.set("fundAccount",fundAccount);
  		   businessInfoVo.set("business_code",BusinessConstants.BUSINESS_DZHYQS);
        try
        {
           List list=thirdInterface.signEcontract(thirdInput);

			
   		   vo.setResult(list);
        }
        catch (Exception e)
        {
            logger.info("错误信息："+e);
            businessInfoVo.set("dealResult",DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE);
            throw new InvokeException(-100500501, e+"");
            
        }
        finally{
        	
        	Long businessId = service.addSignContractBusinessInfoVo(businessInfoVo);
       		//step11：协议留痕
       		//根据用户提交的协议获取协议对象
       		List<AgreeRecordModel> agreeRecordModels = signAndVerifyService.getAgreeRecordModels(userId, allSignList, businessId, DictionaryConstants.FLOW_LASTSTEP_NEXT,"");
       		agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
       		agreeRecordService.addBatch_new(agreeRecordModels, businessId, DictionaryConstants.FLOW_LASTSTEP_NEXT);
       		//step12：添加业务办理快照
       		UserSnapShotService userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT, UserSnapShotService.class);
       		userSnapShotService.addUserSnapShot(businessId, userInfoVo);
       		
       		//step13：投资者声明留痕
       		if(StringHelper.isNotBlank(agree_code))
       		{
       		    addInvestorStatement(businessId, userInfoVo);
       		}
       		
        }
        return vo;
    }
	private void checkinput() {
		prodta_no=this.getCheckBlankStrParam("prodta_no");
		prod_code=this.getCheckBlankStrParam("prod_code");
        jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);
        agree_code = this.getStrParameter("agree_code");

	}
    
	/**
	 * @描述: 投资者声明留痕
	 * @作者: 农仕冰
	 * @时间: 2019年7月11日 上午11:17:50
	 * @param businessId
	 * @param userInfoVo
	 * @throws Exception
	 */
	private void addInvestorStatement(Long businessId,UserInfoVo userInfoVo) throws Exception
	{
	    //step1:查询协议内容
        AgreeMentService agreeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_AGREEMENT, AgreeMentService.class);
        AgreementInfoVo agreementInfoVo = agreeService.queryInfoAndContentByCode(agree_code);
        //step2：协议留痕
        //协议内容，转成PDF
        String agreeContent = agreementInfoVo.getAgreeContent();
        StringBuilder htmlContent = new StringBuilder();
        htmlContent.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        htmlContent.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
        htmlContent.append("<head>");
        htmlContent.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" \"/>");
        htmlContent.append("<style type=\"text/css\">body {font-family: SimSun;}</style>");
        htmlContent.append("</head>");
        htmlContent.append("<body>");
        htmlContent.append(agreeContent);
        htmlContent.append("</body>");
        htmlContent.append("</html>");
        String datetimestart = DateHelper.formatDate(new Date(), "yyyyMMdd");
        String pdfName = userInfoVo.getUserId() + "_" + agreementInfoVo.getAgreeCode() + ".pdf";
        String pdfSavePath = Configuration.getString(SystemConstants.CONFIG_PDF_PATH) + datetimestart
                + File.separatorChar;
        File file = new File(pdfSavePath);
        if ( !file.exists() && !file.isDirectory() )
        {//判断文件夹是否存在，不存在就创建
            file.mkdir();
        }
        String pdfpath = pdfSavePath + pdfName;
        
        Map<String, String> keyWords = new HashMap<String, String>();
        keyWords.put("username", userInfoVo.getName());//客户名称
        //html转PDF
        HtmlToPDFUtils.htmlContentToPDF(htmlContent.toString(), pdfpath, keyWords);
        
        //上传PDF到文件服务器
        FileUploadResultVo fileUploadResultVo = uploadPdfToServer(pdfpath, pdfName, userInfoVo.getUserId() + "");
        if ( fileUploadResultVo.getErrorNo() != 0 )
        {
            throw new InvokeException("上传签署的PDF文件到文件服务器失败！！！", -1);
        }
        logger.info("投资者声明PDF保存成功！文件服务器保存路径：" + fileUploadResultVo.getFilePath());
        //成功后，删除临时文件
        if ( deleteFile(pdfpath) )
        {
            logger.info("PDF签署后清除完成！清除的文件：" + pdfpath);
        }
        AgreeRecordModel agreeRecordModel = new AgreeRecordModel();
        agreeRecordModel.setBusinessId(businessId);
        agreeRecordModel.setNodeId("investor_statement_finish");
        agreeRecordModel.setAgreeName(agreementInfoVo.getAgreeName());
        agreeRecordModel.setAgreeNo(agreementInfoVo.getString("id"));
        agreeRecordModel.setAgreeVersion(String.valueOf(agreementInfoVo.getAgreeVersion()));
        agreeRecordModel.set("agree_path", fileUploadResultVo.getFilePath());
        agreeRecordModel.set("secret", fileUploadResultVo.getSecret());
        List<AgreeRecordModel> agreeRecordModels = new ArrayList<AgreeRecordModel>();
        agreeRecordModels.add(agreeRecordModel);
        agreeRecordService.addBatch_new(agreeRecordModels, businessId, "investor_statement_finish");
	}
	
	/**
     * 上传PDF文件到文件服务器
     * @param pdfPath pdf文件路径
     * @param pdfName 文件名称
     * @param user_id 用户编号
     */
    private static FileUploadResultVo uploadPdfToServer(String pdfPath, String pdfName, String user_id)
            throws Exception
    {
        String writeURL = Configuration.getString(SystemConstants.CONFIG_FILESERVER_WRITEURL);
        String version = Configuration.getString(SystemConstants.CONFIG_FILESERVER_VERSION);
        byte[] file = getBytes(pdfPath);
        FileUploadResultVo fileUploadResultVo = null;
        try
        {
            fileUploadResultVo = FileUploadClientHelper.uploadFile(writeURL, file, pdfName, version, user_id, "0");
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }
        
        return fileUploadResultVo;
    }
    
    /** 
     * 获得指定文件的byte数组 
     */
    private static byte[] getBytes(String filePath)
    {
        byte[] buffer = null;
        try
        {
            File file = new File(filePath);
            FileInputStream fis = new FileInputStream(file);
            ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);
            byte[] b = new byte[1000];
            int n;
            while ((n = fis.read(b)) != -1)
            {
                bos.write(b, 0, n);
            }
            fis.close();
            bos.close();
            buffer = bos.toByteArray();
        }
        catch (FileNotFoundException e)
        {
            logger.info(e, e);
        }
        catch (IOException e)
        {
            logger.info(e, e);
        }
        return buffer;
    }
    
    /** 
    * 删除单个文件 
    * @param   sPath    被删除文件的文件名 
    * @return 单个文件删除成功返回true，否则返回false 
    */
    public static boolean deleteFile(String sPath)
    {
        boolean flag = false;
        File file = new File(sPath);
        // 路径为文件且不为空则进行删除  
        if ( file.isFile() && file.exists() )
        {
            file.delete();
            flag = true;
        }
        return flag;
    }
}
