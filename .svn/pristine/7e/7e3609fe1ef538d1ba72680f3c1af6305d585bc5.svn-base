package com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.business;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.constant.ErrorCodeBusiness;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.constant.PreMarginTradingConstants;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdDataService;
import com.thinkive.fxc.ismp.bus.third.service.ThirdFirstTransactionService;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.ResultVo;

/**
 * 描述: 融资融券预约 --- 获取业务办理条件
 * 版权: Copyright (c) 2010
 * 公司: 思迪科技 
 * 作者: 刘恺
 * 版本: 1.0 
 * 创建日期: 2014年12月12日 
 * 创建时间: 下午5:28:05
 */
public class Function1004537 extends ISMPBaseFunction
{
	
	private Long userId;//用户ID
	
	private ThirdInterface thirdInterface;
	
	private ThirdTrdAccountService thirdTrdAccountService;
	
	private ThirdDataService thirdDataService;
	
	@Override
	public ResultVo execute() throws Exception
	{
		//step1:获取参数用户ID并校验
		initVar();
		
		//step2:查询用户资金账号
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		
		//step3:黑名单校验，如果为该券商公司和名单，则直接抛出异常
		thirdDataService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDDATA, ThirdDataService.class);
		if (!thirdDataService.checkBlacklist(userInfo))
		{
			throw new BusinessException(ErrorCodeBusiness.BLACKLIST);
		}
		
		DataRow checkFlagData = new DataRow();//资料检测结果
		checkFlagData.set("flag", DictionaryConstants.BOL_TRUE); //所有条件是否满足
		checkFlagData.set("accountstate_flag", DictionaryConstants.BOL_TRUE); //帐号状态检测
		checkFlagData.set("shareholder_flag", DictionaryConstants.BOL_TRUE); //是否持股5%
		checkFlagData.set("idcard_flag", DictionaryConstants.BOL_TRUE); //身份证号是否正常
		checkFlagData.set("trdtime_flag", DictionaryConstants.BOL_TRUE); //交易时间检测
		checkFlagData.set("asset_flag", DictionaryConstants.BOL_TRUE); //资产检测
		
		//step4:如果是中登时间，前端返回flag(0：不是中登时间，1：是中登时间)
		TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
		boolean isTradeTime = tradeTimeService.checkZdTradeTime();
		
		//step5:信用帐号检测,如果用户深A和沪A信用帐号都已开通，则不进行后续操作，直接返回结果
		DataRow xyAccountState = getXYAccountState(userInfo, isTradeTime);//获取用户深A和沪A信用帐号状态数据
		DataRow xyAccountCheckResult = checkXyAccountState(xyAccountState);//检查信用帐号状态
		if (!DictionaryConstants.BOL_TRUE.equals(xyAccountCheckResult.getString("flag")))
		{
			throw new BusinessException(ErrorCodeBusiness.ALLOPENED, "融资融券帐号已全部开通");
		}
		
		//step6:检测查询身份证有效期
		String validity_end = userInfo.getString("validity_end");
		DataRow IDValidityDayResult = checkIDValidityDay(validity_end);
		if (!DictionaryConstants.BOL_TRUE.equals(IDValidityDayResult.getString("flag")))
		{
			checkFlagData.set("flag", DictionaryConstants.BOL_FALSE);
			checkFlagData.set("idcard_flag", DictionaryConstants.BOL_FALSE);//身份证检测失败
		}
		
		thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);//获取查询第三方接口公共入参
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfo);
		
		//step7:账户资产检查
		//1.检查20日日平均交易额
		DataRow assetCheckResult = checkAsset(thirdInput);
		if (!DictionaryConstants.BOL_TRUE.equals(assetCheckResult.getString("flag")))
		{
			checkFlagData.set("flag", DictionaryConstants.BOL_FALSE);
			checkFlagData.set("asset_flag", DictionaryConstants.BOL_FALSE);
		}
		
		//2.校验用户“持有5%以上公司股票的股东或者关联人”
		if (isTradeTime)
		{
			if (!thirdDataService.checkShareholder(userInfo))
			{
				checkFlagData.set("flag", DictionaryConstants.BOL_FALSE);
				checkFlagData.set("shareholder_flag", DictionaryConstants.BOL_FALSE);//1:持股5%，校验失败
			}
		}
		
		//3:交易是否满6个月检测
		ThirdFirstTransactionService thirdFirstTransactionService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDFIRSTTRANSACTION, ThirdFirstTransactionService.class);
		DataRow trdtimeInfo = thirdFirstTransactionService.checkTradeExperience(userInfo, isTradeTime, 6);
		String trdTimeFlag = trdtimeInfo.getString("flag");
		
		if (!ThirdDictionaryConstants.TRADEEXPERIENCE_CHECK_FLAG_PASS.equals(trdTimeFlag))
		{
			checkFlagData.set("flag", DictionaryConstants.BOL_FALSE);
			checkFlagData.set("trdtime_flag", trdTimeFlag);
		}
		
		//4:检查信用帐号和证券帐号状态
		Map<String, Object> accountState = checkAccountState(xyAccountState, userInfo);
		if (!DictionaryConstants.BOL_TRUE.equals((String) accountState.get("flag")))
		{
			checkFlagData.set("flag", DictionaryConstants.BOL_FALSE);
			checkFlagData.set("accountstate_flag", DictionaryConstants.BOL_FALSE);
		}
		
		//step8:打包出参,判断条件是否满足
		ResultVo resultVo = new ResultVo();
		if (DictionaryConstants.BOL_TRUE.equals(checkFlagData.getString("flag")))
		{
			checkFlagData.set("marketvalue", assetCheckResult.getDouble("marketvalue")); //当前资金帐号总资产
		}
		checkFlagData.set("isTradeTime", isTradeTime ? DictionaryConstants.BOL_TRUE : DictionaryConstants.BOL_FALSE);//是否为中登时间
		checkFlagData.set("firsTransactionDate", trdtimeInfo.getString("firstTrdDate"));//首次交易日
		checkFlagData.set("szaXyState", accountState.get("szaXyState"));//深A信用帐号状态
		checkFlagData.set("shaXyState", accountState.get("shaXyState"));//沪A信用帐号状态
		checkFlagData.set("szaZqState", accountState.get("szaZqState"));//深A证券帐号状态
		checkFlagData.set("shaZqState", accountState.get("shaZqState"));//沪A证券帐号状态
		
		resultVo.setResult("checkFlagData", checkFlagData);
		resultVo.setResult("szaAccountList", accountState.get("szaAccountList"));//深A证券帐号信息
		resultVo.setResult("shaAccountList", accountState.get("shaAccountList"));//沪A证券帐号信息
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
		
	}
	
	private DataRow checkIDValidityDay(String birthday)
	{
		DataRow IDValidityDayResult = new DataRow();
		IDValidityDayResult.set("flag", DictionaryConstants.BOL_TRUE);
		try
		{
			if (new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA).parse(birthday).before(new Date()))
			{
				IDValidityDayResult.set("flag", DictionaryConstants.BOL_FALSE);
				IDValidityDayResult.set("error_no", "95");
				IDValidityDayResult.set("error_msg", "用户身份证证影已过期");
				return IDValidityDayResult;
			}
		}
		catch (ParseException e)
		{
			IDValidityDayResult.set("flag", DictionaryConstants.BOL_FALSE);
			IDValidityDayResult.set("error_no", "94");
			IDValidityDayResult.set("error_mgs", "用户身份证格式错误");
			return IDValidityDayResult;
		}
		return IDValidityDayResult;
	}
	
	//检测信用帐号开通和绑定状态
	private DataRow checkXyAccountState(DataRow stateData)
	{
		String hasSZAaccount = stateData.getString("hasSZAaccount");
		String hasSHAaccount = stateData.getString("hasSHAaccount");
		String bindSZAaccount = stateData.getString("bindSZAaccount");
		String bindSHAaccount = stateData.getString("bindSHAaccount");
		DataRow xyAccountResult = new DataRow();
		xyAccountResult.set("flag", DictionaryConstants.BOL_TRUE);
		//如果深A信用帐号和沪A信用帐号都已存在，无法办理业务
		if (DictionaryConstants.BOL_TRUE.equals(hasSZAaccount) && DictionaryConstants.BOL_TRUE.equals(hasSHAaccount))
		{
			//如果已开通的信用帐号中，2个都未绑定券商
			if (DictionaryConstants.BOL_FALSE.equals(bindSZAaccount) && DictionaryConstants.BOL_FALSE.equals(bindSHAaccount))
			{
				xyAccountResult.set("flag", DictionaryConstants.BOL_FALSE);
				xyAccountResult.set("error_no", "92");
				xyAccountResult.set("error_msg", "您已在其他券商处开通上海信用证券帐号和深圳信用证券帐号");
				return xyAccountResult;
			}
			//如果已开通的信用帐号中，只有深A信用帐号未绑定券商
			if (DictionaryConstants.BOL_FALSE.equals(bindSZAaccount))
			{
				xyAccountResult.set("flag", DictionaryConstants.BOL_FALSE);
				xyAccountResult.set("error_no", "91");
				xyAccountResult.set("error_msg", "您已在其他券商处开通深圳信用证券帐号");
				return xyAccountResult;
			}
			//如果已开通的信用帐号中，只有沪A信用帐号未绑定券商
			if (DictionaryConstants.BOL_FALSE.equals(bindSHAaccount))
			{
				xyAccountResult.set("flag", DictionaryConstants.BOL_FALSE);
				xyAccountResult.set("error_no", "90");
				xyAccountResult.set("error_msg", "您已在其他券商处开通上海信用证券帐号");
				return xyAccountResult;
			}
			//如果已开通的信用帐号中，所有信用帐号都绑定算上
			xyAccountResult.set("flag", DictionaryConstants.BOL_FALSE);
			xyAccountResult.set("error_no", "98");
			xyAccountResult.set("error_msg", "已在券商处开通上海信用证券帐号和深圳信用证券帐号");
			return xyAccountResult;
		}
		return xyAccountResult;
	}
	
	//获取信用帐号开通和绑定状态
	private DataRow getXYAccountState(UserInfoVo userInfoVo, boolean isTradeTime) throws Exception
	{
		DataRow result = new DataRow();
		thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		//默认查询柜台数据
		String queryType = ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT;
		//中登时间查询柜台+中登数据
		if (isTradeTime)
		{
			queryType = ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GTANDZD;
		}
		List<DataRow> xyaccountList = thirdTrdAccountService.queryThirdTraAccountByTrdacctExcls(ThirdInterfaceConstant.TRDACCT_EXCLS_GRXY, userInfoVo, queryType);
		String hasSZAaccount = DictionaryConstants.BOL_FALSE; //是否已开通深圳A信用帐号
		String hasSHAaccount = DictionaryConstants.BOL_FALSE; //是否已开通上海A信用帐号
		String bindSZAaccount = DictionaryConstants.BOL_FALSE; //深A信用帐号是否绑定券商
		String bindSHAaccount = DictionaryConstants.BOL_FALSE; //沪A信用帐号是否绑定券商
		for (DataRow item : xyaccountList)
		{
			if (ThirdInterfaceConstant.STKBD_SZA.equals(item.getString("stkbd")))
			{//有深A信用帐号
				hasSZAaccount = DictionaryConstants.BOL_TRUE;
				bindSZAaccount = item.getString("bind_state");
			}
			if (ThirdInterfaceConstant.STKBD_SHA.equals(item.getString("stkbd")))
			{//有沪A信用帐号
				hasSHAaccount = DictionaryConstants.BOL_TRUE;
				bindSHAaccount = item.getString("bind_state");
			}
		}
		result.set("hasSZAaccount", hasSZAaccount);
		result.set("bindSZAaccount", bindSZAaccount);
		result.set("hasSHAaccount", hasSHAaccount);
		result.set("bindSHAaccount", bindSHAaccount);
		return result;
	}
	
	//检测20日日平均交易额是否大于20W
	private DataRow checkAsset(DataRow thirdInput)
	{
		DataRow result = new DataRow();
		result.set("flag", DictionaryConstants.BOL_TRUE);//默认超过二十万
		thirdInput.set("moneytype", ThirdInterfaceConstant.MONEY_TYPE_RMB); //货币类型 0：人民币
		Double totalAssets = thirdInterface.getTwentyDayAverageAssets(thirdInput);
		if (500000D > totalAssets)
		{
			result.set("flag", DictionaryConstants.BOL_FALSE);
			return result;
		}
		result.set("marketvalue", totalAssets);
		return result;
	}
	
	/**
	 * 描述：检查信用帐号和证券帐号状态
	 * 作者：刘恺
	 * 时间：2016年7月23日 下午3:12:20
	 * @param xyAccountState
	 * @param userInfo
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private Map<String, Object> checkAccountState(DataRow xyAccountState, UserInfoVo userInfoVo)
	{
		Map<String, Object> stateMap = new HashMap<String, Object>();
		String flag = DictionaryConstants.BOL_FALSE;//默认值，帐号状态异常，无法开通任何信用帐号
		String szaXyState = PreMarginTradingConstants.XYACCOUNTSTATE_OPENED;//默认值，深A信用帐号已开通
		String shaXyState = PreMarginTradingConstants.XYACCOUNTSTATE_OPENED;//默认值，沪A信用帐号已开通
		
		//step1:如果用户没有深A信用帐号，查询用户深A证券账号状态，如果有异常深A信用账户则不能开通
		if (DictionaryConstants.BOL_FALSE.equals(xyAccountState.getString("hasSZAaccount")))
		{
			szaXyState = PreMarginTradingConstants.XYACCOUNTSTATE_OK;//设置深A信用帐号为可开通状态
			
			//获取深A证券帐号状态
			Map<String, Object> szaTrdaccountState = thirdTrdAccountService.queryAndCheckGtSzaState(userInfoVo);
			String szaZqState = (String) szaTrdaccountState.get("accountState");
			List<DataRow> szaAccountList = (List<DataRow>) szaTrdaccountState.get("accountList");
			stateMap.put("szaZqState", szaZqState);//深A证券帐号状态
			stateMap.put("szaAccountList", szaAccountList);//深A帐号信息
			
			if (!DictionaryConstants.ZQACCOUNTSTATE_NOMAL.equals(szaZqState))
			{
				szaXyState = PreMarginTradingConstants.XYACCOUNTSTATE_ERROR;//如果深A帐号状态不正常，修改信用帐号可开通状态但帐号异常
			}
		}
		//setp2:如果用户没有沪A信用帐号，查询用户沪A证券账号状态，如果有异常沪A信用账户则不能开通
		if (DictionaryConstants.BOL_FALSE.equals(xyAccountState.getString("hasSHAaccount")))
		{
			
			shaXyState = PreMarginTradingConstants.XYACCOUNTSTATE_OK;//设置沪A信用帐号为可开通状态
			
			//获取沪A证券帐号状态
			Map<String, Object> shaTrdaccountState = thirdTrdAccountService.queryAndCheckGtShaState(userInfoVo, true);
			String shaZqState = (String) shaTrdaccountState.get("accountState");
			List<DataRow> shaAccountList = (List<DataRow>) shaTrdaccountState.get("accountList");
			stateMap.put("shaZqState", shaZqState);//沪A证券帐号状态
			stateMap.put("shaAccountList", shaAccountList);//沪A帐号信息
			
			if (!DictionaryConstants.ZQACCOUNTSTATE_NOMAL.equals(shaZqState))
			{
				shaXyState = PreMarginTradingConstants.XYACCOUNTSTATE_ERROR;//如果沪A帐号状态不正常，修改信用帐号可开通状态但帐号异常
			}
		}
		
		//step3:当深A和沪A账号，只要一个正常，就将账号状态改为正常，表示可开通
		if (szaXyState.equals(PreMarginTradingConstants.XYACCOUNTSTATE_OK) || shaXyState.equals(PreMarginTradingConstants.XYACCOUNTSTATE_OK))
		{
			flag = DictionaryConstants.BOL_TRUE;
		}
		
		//step4:打包出参
		stateMap.put("flag", flag);
		stateMap.put("szaXyState", szaXyState);
		stateMap.put("shaXyState", shaXyState);
		
		return stateMap;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
	}
}
