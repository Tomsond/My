/**
 * 
 */
package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.StringUtil;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.ImageInformationDao;
import com.thinkive.fxc.ismp.bus.base.business.model.ImageInformationModel;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 身份证信息确认记录表(t_ismp_image_information) DAO实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 尹杰民
 * @版本: 2.0 
 * @创建时间: 2016年8月16日 下午2:00:06
 */
public class ImageInformationDaoImpl extends ISMPBaseDao implements ImageInformationDao
{
	
	@Override
	public ImageInformationModel add(ImageInformationModel imageInformationModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_IMAGE_INFORMATION);
		imageInformationModel.setId(Long.valueOf(id));
		imageInformationModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BusinessTableConstants.T_ISMP_IMAGE_INFORMATION, imageInformationModel);
		return imageInformationModel;
	}
	
	@Override
	public int update(ImageInformationModel imageInformationModel)
	{
		imageInformationModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_IMAGE_INFORMATION, imageInformationModel, "ID", imageInformationModel.getId());
	}
	
	@Override
	public int updateByBusinessIdAndNodeId(ImageInformationModel imageInformationModel)
	{
		imageInformationModel.setUpdateDate(new Date());
		Long businessId = imageInformationModel.getBusinessId();
		String nodeId = imageInformationModel.getNodeId();
		int count = this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_IMAGE_INFORMATION, imageInformationModel, new String[] { "BUSINESS_ID", "NODE_ID" }, new Object[] { businessId, nodeId });
		imageInformationModel.setBusinessId(businessId);
		imageInformationModel.setNodeId(nodeId);
		return count;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ImageInformationModel> queryByParams(Long businessId, String nodeId)
	{
		StringBuilder sql = new StringBuilder();
		List<String> paramsList = new ArrayList<String>();
		sql.append("SELECT ID, BUSINESS_ID, NODE_ID, NAME, IDENTITY_NUM, PAPERS_ADDR, SEX");
		sql.append(" ,ADRESS, BIRTHDAY, SIGN_OFFICE, VALIDITY_BEGIN, VALIDITY_END, ETHNICNAME, CREATE_DATE, UPDATE_DATE ");
		sql.append("  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_IMAGE_INFORMATION).append(" WHERE 1=1 ");
		if (null != businessId)
		{
			sql.append(" AND BUSINESS_ID = ?");
			paramsList.add(businessId.toString());
		}
		
		if (StringUtil.isNotEmpty(nodeId))
		{
			sql.append(" AND NODE_ID = ?");
			paramsList.add(nodeId);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), paramsList.toArray());
		return ModelUtil.packList(queryResult, ImageInformationModel.class);
	}
	
}
