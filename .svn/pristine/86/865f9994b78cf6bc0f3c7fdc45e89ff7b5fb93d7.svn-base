package com.thinkive.fxc.ismp.bus.business.lof.function;

import java.util.List;
import java.util.Map;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.ResultVo;

/**
 * @描述: 上证LOF权限办理数据获取
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2017年3月19日 下午3:40:32
 */
public class Function1004442 extends ISMPBaseFunction
{
	
	private Long userId; //用户ID
	
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo execute() throws Exception
	{
		//step1:获取人参并校验
		initVar();
		
		//step2:查询用户基本信息和用户账号信息
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		
		//获取沪A帐号
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		Map<String, Object> accountInfo = thirdTrdAccountService.queryAndCheckGtShaState(userInfoVo, true);
		List<DataRow> shaAccountList = (List<DataRow>) accountInfo.get("accountList");
		String accountState = (String) accountInfo.get("accountState");
		
		//如果帐号正常，校验沪A帐号风险警示权限是否开通
		if (DictionaryConstants.ZQACCOUNTSTATE_NOMAL.equals(accountState))
		{
			ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
			DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
			thirdInput.set("agmt_type_str", ThirdTBASConstants.AUTHORITY_TYPE_LOF);
			List<DataRow> authorityList = thirdInterface.queryAuthority(thirdInput);
			//标识哪些帐号已开通权限
			shaAccountList = checkAuthority(authorityList, shaAccountList);
		}
		
		//step4: 打包出参
		BusinessEntityModel businessInfo = new BusinessEntityModel();
		businessInfo.set("accountState", accountState);
		ResultVo resultVo = new ResultVo();
		resultVo.setResult("businessInfo", businessInfo);
		resultVo.setResult("accountList", shaAccountList);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
	}
	
	private List<DataRow> checkAuthority(List<DataRow> authorityList, List<DataRow> accountList) throws Exception
	{
		//如果查询到的权限集合authorityList为空,将accountList中每条数据国债逆回购开通标识open_flag设为"0",即未开通
		if (authorityList.size() == 0)
		{
			for (DataRow dataRow : accountList)
			{
				dataRow.set("open_flag", DictionaryConstants.BOL_FALSE);
			}
		}
		else
		{
			/* 如果查询到的权限集合authorityList不为空，循环去比对accountList和authorityList，如果accountList中的交易账号trdacct
			                         在authorityList中出现，且权限类型cust_agmt_type为  "3",则将accountList中该条数据的国债逆回购开通标识open_flag设为"1",即开通
			                             然后跳出accountList本次循环，再去比对下一个交易账号以此类推*/
			for (DataRow accountData : accountList)
			{
				String opFlag = DictionaryConstants.BOL_FALSE;//是否开通回购融券权限
				String trdacct = accountData.getString("trdacct");
				for (DataRow authorityData : authorityList)
				{
					if (trdacct.equals(authorityData.getString("trdacct")) && ThirdTBASConstants.AUTHORITY_TYPE_LOF.equals(authorityData.getString("cust_agmt_type")))
					{
						opFlag = DictionaryConstants.BOL_TRUE;
						break;
					}
				}
				accountData.set("open_flag", opFlag);
			}
		}
		return accountList;
	}
}
