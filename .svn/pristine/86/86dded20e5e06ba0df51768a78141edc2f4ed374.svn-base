package com.thinkive.fxc.ismp.bus.business.util;

import java.io.ByteArrayOutputStream;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.Cipher;

import com.thinkive.base.util.Base64;

@SuppressWarnings("deprecation")
public class RSAUtils{
    
    /** 
    * 加密算法RSA 
    */
    public static final String  KEY_ALGORITHM       = "RSA";
    
    /** 
    * 签名算法 
    */
    public static final String  SIGNATURE_ALGORITHM = "MD5withRSA";
    
    /** 
    * 获取公钥的key 
    */
    private static final String PUBLIC_KEY          = "RSAPublicKey";
    
    /** 
    * 获取私钥的key 
    */
    private static final String PRIVATE_KEY         = "RSAPrivateKey";
    
    /** 
    * RSA最大加密明文大小 
    */
    private static final int    MAX_ENCRYPT_BLOCK   = 117;
    
    /** 
    * RSA最大解密密文大小 
    */
    private static final int    MAX_DECRYPT_BLOCK   = 128;
    
    /** 
    * <p> 
    * 生成密钥对(公钥和私钥) 
    * </p> 
    *  
    * @return 
    * @throws Exception 
    */
    public static Map<String, Object> genKeyPair() throws Exception
    {
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);
        keyPairGen.initialize(1024);
        KeyPair keyPair = keyPairGen.generateKeyPair();
        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
        Map<String, Object> keyMap = new HashMap<String, Object>(2);
        keyMap.put(PUBLIC_KEY, publicKey);
        keyMap.put(PRIVATE_KEY, privateKey);
        return keyMap;
    }
    
    /** 
    * <p> 
    * 用私钥对信息生成数字签名 
    * </p> 
    *  
    * @param data 已加密数据 
    * @param privateKey 私钥(BASE64编码) 
    *  
    * @return 
    * @throws Exception 
    */
    public static String sign(byte[] data, String privateKey) throws Exception
    {
        byte[] keyBytes = Base64.decode(privateKey);
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        PrivateKey privateK = keyFactory.generatePrivate(pkcs8KeySpec);
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initSign(privateK);
        signature.update(data);
        return Base64.encodeBytes(signature.sign());
    }
    
    /** 
    * <p> 
    * 校验数字签名 
    * </p> 
    *  
    * @param data 已加密数据 
    * @param publicKey 公钥(BASE64编码) 
    * @param sign 数字签名 
    *  
    * @return 
    * @throws Exception 
    *  
    */
    public static boolean verify(byte[] data, String publicKey, String sign) throws Exception
    {
        byte[] keyBytes = Base64.decode(publicKey);
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        PublicKey publicK = keyFactory.generatePublic(keySpec);
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initVerify(publicK);
        signature.update(data);
        return signature.verify(Base64.decode(sign));
    }
    
    /**  
    * 私钥解密  
    * @param encryptedData 已加密数据 
    * @param privateKey 私钥(BASE64编码) 
    * @return 
    * @throws Exception 
    */
    public static String decryptByPrivateKey(String encryptedData, String privateKey) throws Exception{
        byte[] keyBytes = Base64.decode(privateKey);
        byte[] encryptedDataBytes = Base64.decode(encryptedData);
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.DECRYPT_MODE, privateK);
        int inputLen = encryptedDataBytes.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        // 对数据分段解密  
        while (inputLen - offSet > 0){
            if ( inputLen - offSet > MAX_DECRYPT_BLOCK ){
                cache = cipher.doFinal(encryptedDataBytes, offSet, MAX_DECRYPT_BLOCK);
            }else{
                cache = cipher.doFinal(encryptedDataBytes, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_DECRYPT_BLOCK;
        }
        byte[] decryptedData = out.toByteArray();
        out.close();
        return   new String(decryptedData, "UTF-8");
    }
    
    /** 
    * <p> 
    * 公钥解密 
    * </p> 
    *  
    * @param encryptedData 已加密数据 
    * @param publicKey 公钥(BASE64编码) 
    * @return 
    * @throws Exception 
    */
    public static byte[] decryptByPublicKey(byte[] encryptedData, String publicKey) throws Exception{
        byte[] keyBytes = Base64.decode(publicKey);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key publicK = keyFactory.generatePublic(x509KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.DECRYPT_MODE, publicK);
        int inputLen = encryptedData.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        // 对数据分段解密  
        while (inputLen - offSet > 0){
            if ( inputLen - offSet > MAX_DECRYPT_BLOCK ){
                cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_BLOCK);
            }else{
                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_DECRYPT_BLOCK;
        }
        byte[] decryptedData = out.toByteArray();
        out.close();
        return decryptedData;
    }
    
    /**  
    * 公钥加密  
    * @param data 源数据 
    * @param publicKey 公钥(BASE64编码) 
    * @return 
    * @throws Exception 
    */
    public static String encryptByPublicKey(String datas, String publicKey) throws Exception{
        byte[] data =datas.getBytes("UTF-8");
        byte[] keyBytes = Base64.decode(publicKey);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key publicK = keyFactory.generatePublic(x509KeySpec);
        // 对数据加密  
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.ENCRYPT_MODE, publicK);
        int inputLen = data.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        // 对数据分段加密  
        while (inputLen - offSet > 0){
            if ( inputLen - offSet > MAX_ENCRYPT_BLOCK ){
                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);
            }else {
                cache = cipher.doFinal(data, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_ENCRYPT_BLOCK;
        }
        byte[] encryptedData = out.toByteArray();
        out.close();
        return Base64.encodeBytes(encryptedData);
    }
    
    
    
    /**  
    * 私钥加密  
    * @param data 源数据 
    * @param privateKey 私钥(BASE64编码) 
    * @return 
    * @throws Exception 
    */
    public static byte[] encryptByPrivateKey(byte[] data, String privateKey) throws Exception{
        byte[] keyBytes = Base64.decode(privateKey);
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.ENCRYPT_MODE, privateK);
        int inputLen = data.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        // 对数据分段加密  
        while (inputLen - offSet > 0){
            if ( inputLen - offSet > MAX_ENCRYPT_BLOCK ) {
                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);
            }else{
                cache = cipher.doFinal(data, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_ENCRYPT_BLOCK;
        }
        byte[] encryptedData = out.toByteArray();
        out.close();
        return encryptedData;
    }
    
    /**  
    * 获取私钥 
    * @param keyMap 密钥对 
    * @return 
    * @throws Exception 
    */
    public static String getPrivateKey(Map<String, Object> keyMap) throws Exception{
        Key key = (Key) keyMap.get(PRIVATE_KEY);
        return Base64.encodeBytes(key.getEncoded());
    }
    
    /**  
    * 获取公钥  
    * @param keyMap 密钥对 xs
    * @return 
    * @throws Exception 
    */
    public static String getPublicKey(Map<String, Object> keyMap) throws Exception{
        Key key = (Key) keyMap.get(PUBLIC_KEY);
        return Base64.encodeBytes(key.getEncoded());
    }
    
    
    
    
    public static void main(String[] args) throws Exception{
         Map<String, Object> keyMap=genKeyPair();
         String privateKey=getPrivateKey(keyMap);
         String publicKey=getPublicKey(keyMap);
         System.out.println("私钥=========>:"+privateKey);
         System.out.println("公钥=========>:"+publicKey);
         
         
         
//         String publicKey="MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDgdzHijVZJYpFwClgQg1ceIwd1FJz1/XErzIXAFMprxiGmw5G6JmcOJD2bi+YbRfGdUv9v2K/zA8eIlB9pcKDBwpy7eCFr2Hl4NTBUgWB/b+n3Fah5wrGdRSYeYScI6tYaoC5/1gpliUubMpUSNbeEFRXtTj4GTDUAbIwd9uDlwIDAQAB";        
//         String privateKey="MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAMOB3MeKNVklikXAKWBCDVx4jB3UUnPX9cSvMhcAUymvGIabDkbomZw4kPZuL5htF8Z1S/2/Yr/MDx4iUH2lwoMHCnLt4IWvYeXg1MFSBYH9v6fcVqHnCsZ1FJh5hJwjq1hqgLn/WCmWJS5sylRI1t4QVFe1OPgZMNQBsjB324OXAgMBAAECgYAC5AOoq6F4TPbLazjxZGigKmQf+MizT8khfFmoP2f7YMxjCR3f7IaA6dEy45Quk8ZbN9bEzLSgE1tR3b4E7ZN/p8thppoPjNjAPhEyMURBoi0twXeMALqZkrtHUDUWRxhXk9aQ9MJcJdi8+S+KcYh+cZdQMB3bR26vqVDiMtMk0QJBAP00IM7Qhm0F9YGVibDSDqaL78+Zn5vSfg0B1Li24YXq69rDyvhpQN4qThr4+J/enaPD+TT6nkB5XlhnmijJ7xkCQQDFqpygl3yCekwYEGMZSe7d/QyvIpkSycWLg4/X8lK90a7TVSlTup+/aExktCGEytEtfJ0AGYYndFSjEi3ER04vAkBzFiqDVkyDaV35lFqNQCzgjmJl3dGqJbadeuORQa6oC+s/+BZdapnNYTU3FUsMf0bvlLfE2NTtQT0cuZpcR8yhAkAB5B75flmHmgnuVQHNtSJe51PevRL/1gRY0Fpo832NKVtl1DPABFIQ77uDXyHO9m3H5KBP5u6cpAVHRh4/+XqrAkBUhvxCppy1mHLfucNNAJ4QAUb3C95sW26dsWUHlSdH6weZpMYEDaJFBxm1RVP2y8Avgg73GqKp81x0p5iZ3may";
         
         String data="837248fsdhbcauiodscboaudscbaodsubco的擦拭草死才把搜捕";
         String bytep=RSAUtils.encryptByPublicKey(data, publicKey);
         System.out.println("加密后："+bytep);
         String bytes = RSAUtils.decryptByPrivateKey(bytep,privateKey);
         System.out.println("解密后："+bytes);
         
//         String account = EncryptionUtil.decrypt(bytes, privateKey);
//         System.out.println("解密后："+account);
    }
    
    
    
}
