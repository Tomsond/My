 package com.thinkive.fxc.ismp.bus.business.khzzhf.function;

import java.util.List;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.SurveySubjectModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.SurveyService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.khzzhf.constants.KhzzhfConstants;
import com.thinkive.fxc.ismp.bus.business.khzzhf.service.KhzzhfService;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 客户自助回访-提交问卷（本地）
 * @版权: Copyright (c) 2019 
 * @公司: 思迪科技 
 * @作者: 江昶
 * @版本: 1.0 
 * @创建日期: 2019年12月17日 
 * @创建时间: 上午10:06:49
 */
public class Function1004262 extends ISMPBaseFunction{
	
    private Long userId;//用户编号
	
	private String answerStr;//答案信息 1_2_0|2_2_0|3_2_0
	
	@SuppressWarnings("unchecked")
    public ResultVo execute() throws Exception{
		
		checkInput();
		
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
	    if (userInfo == null)
        {
            throw new BusinessException(ErrorCodeSystem.NOTEXIST_USER, "用户不存在");
        } 
	    
        //新建实例
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
        BusinessEntityModel businessEntity = getNewBusinessEntity();
        BusinessEntityModel businessEntityModel = businessEntityService.add(businessEntity);
        logger.info("businessEntityModel："+businessEntityModel);
        
        KhzzhfService hfService = SpringHelper.getBean(KhzzhfConstants.SERVER_ID_KHZZHF, KhzzhfService.class);
        DataRow question = hfService.querySubjectBySubjectNo(KhzzhfConstants.SUBJECT_NO);
        if(null == question){
            throw new InvokeException("未找到对应主题的业务知识测评问卷",-100426201);
        }
        String subId = question.getString("subject_id");
        if ( StringHelper.isNotBlank(subId) )
        {
            //提交答案到数据库
            KhzzhfService khzzhfService=SpringHelper.getBean(KhzzhfConstants.SERVER_ID_KHZZHF, KhzzhfService.class);
            khzzhfService.addOrUpdateEntityAnswer(answerStr, businessEntityModel, subId , businessEntityModel.getNodeId());
        }
		
		//返回结果集
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	
	private void checkInput() throws InvokeException{
	    userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
        answerStr = this.getAndCheckBlankStrParam("answerStr", ErrorCodeCheckInput.BLANK_ANSWERSTR);
	}
	
	 public BusinessEntityModel getNewBusinessEntity()
     {
         BusinessEntityModel businessEntityModel = new BusinessEntityModel();
         businessEntityModel.setUserId(userId);
         businessEntityModel.setOpSource(opSource);
         businessEntityModel.setOpStation(opStation);
         businessEntityModel.setBusinessCode(businessCode);
         businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
         businessEntityModel.setIp(ip);
         businessEntityModel.setNodeId(DictionaryConstants.FLOW_LASTSTEP_NEXT);
         businessEntityModel.setDealResult(DictionaryConstants.DEAL_RESULT_SUCCESS);
         return businessEntityModel;
     }
	
}
                                                                                