package com.thinkive.fxc.ismp.bus.business.entrust.service.impl;

import java.util.List;

import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.jdbc.session.SessionFactory;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.business.entrust.dao.EntrustDao;
import com.thinkive.fxc.ismp.bus.business.entrust.dao.UserEntrustBusinessDao;
import com.thinkive.fxc.ismp.bus.business.entrust.dao.UserEntrustDao;
import com.thinkive.fxc.ismp.bus.business.entrust.model.EntrustModel;
import com.thinkive.fxc.ismp.bus.business.entrust.model.UserEntrustBusinessModel;
import com.thinkive.fxc.ismp.bus.business.entrust.model.UserEntrustModel;
import com.thinkive.fxc.ismp.bus.business.entrust.service.EntrustService;
import com.thinkive.fxc.ismp.bus.business.service.impl.BusinessCommonServiceImpl;

/**
 * @描述: 委托方式服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月5日 下午5:32:43
 */
public class EntrustServiceImpl extends BusinessCommonServiceImpl implements EntrustService
{

    private EntrustDao entrustDao;
    
    private UserEntrustDao userEntrustDao;
    
    private UserEntrustBusinessDao userEntrustBusinessDao;
    
    public void setEntrustDao(EntrustDao entrustDao)
    {
        this.entrustDao = entrustDao;
    }
    
    public void setUserEntrustDao(UserEntrustDao userEntrustDao)
    {
        this.userEntrustDao = userEntrustDao;
    }
    
    public void setUserEntrustBusinessDao(UserEntrustBusinessDao userEntrustBusinessDao)
    {
        this.userEntrustBusinessDao = userEntrustBusinessDao;
    }
    
    @Override
    public List<EntrustModel> queryByParams(EntrustModel entrustInfo)
    {
        return entrustDao.queryByParams(entrustInfo);
    }

    @Override
    public EntrustModel queryByCode(String entrustCode)
    {
        return entrustDao.queryByEntrustCode(entrustCode);
    }

    @Override
    public List<EntrustModel> queryAll()
    {
        EntrustModel entrustModel=new EntrustModel();
        return this.queryByParams(entrustModel);
    }

    @Override
    public void addOrUpdateUserEntrust(Long userId, String entrustCode)
    {
        UserEntrustModel userEntrustModel=new UserEntrustModel();
        userEntrustModel.setUserId(userId);
        userEntrustModel.setEntrustCode(entrustCode);
        int total=userEntrustDao.update(userEntrustModel);
        if(total<1){
            userEntrustModel=userEntrustDao.add(userEntrustModel);
        }
    }

    @Override
    public UserEntrustModel queryByUserId(Long userId)
    {
        return userEntrustDao.queryByUserId(userId);
    }

    @Override
    public Boolean addUserEntrustBusiness(BusinessEntityModel entityModel, String changeType, String entrustCode) throws Exception
    {
        Boolean  flag=true;
        Session session = null;
        try
        {
            //创建session，开启事务
            session = SessionFactory.getSession(SystemConstants.DB_ISMP);
            session.beginTrans();
            
            //获取入参
            String nodeId=entityModel.getNodeId();
            String ip=entityModel.getIp();
            String opSource=entityModel.getOpSource();
            String opStation=entityModel.getOpStation();
            
            //step1:添加委托方式业务实例
            entityModel=this.addBusinessEntityModel(entityModel, session);
            
            //setp2:添加委托方式业务拓展信息
            Long businessId=entityModel.getId();
            UserEntrustBusinessModel entrustBusinessModel= new UserEntrustBusinessModel();
            entrustBusinessModel.setBusinessId(businessId);
            entrustBusinessModel.setChangeType(changeType);
            entrustBusinessModel.setEntrustCode(entrustCode);
            userEntrustBusinessDao.add(entrustBusinessModel, session);
            
            //step3:新增流程节点记录(三方存管新绑定方式为一步式)
            this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
            
            //step4：添加节点操作记录
            this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
            session.commitTrans();
        }
        catch (Exception e)
        {
            flag=false;
            if (session != null)
            {
                session.rollbackTrans();
            }
            throw e;
        }
        finally
        {
            if (session != null)
            {
                session.close();
            }
        }
        return flag;
    }
    
}
