package com.thinkive.fxc.ismp.bus.business.ggt.function;


import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BprocNodeConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.vo.BprocNodeConfigAndDefineVO;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.ggt.contants.GgtContants;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 港股通--修改流程节点
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月10日 下午7:21:58
 */
public class Function1004202 extends ISMPBaseFunction
{
    
    private Long userId;
    
    private String nodeId;//节点英文标识
                                                                                       
    /*private static final Map<String, String> NODE_MAP = new HashMap<String, String>();
    static
    {
        NODE_MAP.put("fxcp", GgtContants.GGT_RISK);
        NODE_MAP.put("zscp", GgtContants.GGT_KNOWLEDGE);
    }*/
    
    @Override
    public ResultVo execute() throws Exception
    {
        
        checkInput();
        
        //String nodeId = NODE_MAP.get(subject_type);
        
        //UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
        //UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
        BprocNodeConfigService bprocNodeConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BPROCNODECONFIG, BprocNodeConfigService.class);
        BprocNodeConfigAndDefineVO bprocNodeConfigAndDefineVO = bprocNodeConfigService.queryNadVoByBCodeAndOpSouAndNodeId(GgtContants.BUSINESS_CODE, opSource, nodeId);
        
        if (bprocNodeConfigAndDefineVO == null)
        {
            throw new BusinessException(ErrorCodeSystem.FLOW_NODE_NOTEXIST);
        }
        //查询正在办理的港股通业务数据
        BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
        BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCode(userId, GgtContants.BUSINESS_CODE);
        if(businessEntityModel == null)
        {
            throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW, "业务办理数据不存在");
        }
        
        businessEntityModel.setNodeId(bprocNodeConfigAndDefineVO.getNextBpNodeId());
        businessEntityService.changeBusinessFlowNode(businessEntityModel, bprocNodeConfigAndDefineVO.getNextBpNodeId());
        
        ResultVo resultVo = new ResultVo();
        resultVo.setResult("businessEntityModel",businessEntityModel);
        resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
        resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
        return resultVo;
    }
    
    private void checkInput() throws InvokeException
    {
        userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
        nodeId = this.getAndCheckBlankStrParam("nodeId", ErrorCodeCheckInput.BLANK_NODEID);
    }
}
