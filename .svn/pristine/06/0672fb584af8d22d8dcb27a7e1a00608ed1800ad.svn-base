package com.thinkive.fxc.ismp.bus.base.basicdata.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BaseTableConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.SurveyAnswerDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.SurveyAnswerModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.QuestionInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 公共-问卷答案表(T_FXC_SURVEY_ANSWER)数据层接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月18日 下午6:42:53
 */
public class SurveyAnswerDaoImpl extends ISMPBaseDao implements SurveyAnswerDao
{
	
	@Override
	public SurveyAnswerModel add(SurveyAnswerModel surveyAnswerModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BaseTableConstants.T_FXC_SURVEY_ANSWER);
		surveyAnswerModel.setId(Long.valueOf(id));
		surveyAnswerModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BaseTableConstants.T_FXC_SURVEY_ANSWER, surveyAnswerModel);
		return surveyAnswerModel;
	}
	
	@Override
	public int update(SurveyAnswerModel surveyAnswerModel)
	{
		surveyAnswerModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(BaseTableConstants.T_FXC_SURVEY_ANSWER, surveyAnswerModel, "ID", surveyAnswerModel.getId());
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public List<SurveyAnswerModel> queryByQueIdAndState(Long queId, String state)
	{
		if (null == queId)
		{
			return null;
		}
		List<String> params = new ArrayList<String>();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID,QUE_ID,NAME,ORDER_LINE,STATE,EXT_CODE,MARK,IS_TRUE FROM ");
		sql.append(BaseTableConstants.T_FXC_SURVEY_ANSWER);
		sql.append(" WHERE queId = ?");
		params.add(queId.toString());
		if (StringUtils.isNotBlank(state))
		{
			sql.append(" AND STATE = ?");
			params.add(state);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), params.toArray());
		return ModelUtil.packList(queryResult, SurveyAnswerModel.class);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<QuestionInfoVo> queryBySubjectCode(String subjectCode)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT TA.ID AS A_ID,TA.NAME,TA.ORDER_LINE,TA.QUE_ID,TA.STATE,TA.EXT_CODE,TA.MARK,TA.IS_TRUE,TQ.NAME AS QUESTION_CONTENT,TQ.SUB_ID,TQ.TYPE,TS.SUBJECT_CODE,TQ.EXT_CODE QUE_EXT_CODE ");
		sql.append(" FROM T_FXC_SURVEY_ANSWER TA ");
		sql.append(" LEFT JOIN T_FXC_SURVEY_QUESTION TQ ON TA.QUE_ID = TQ.ID ");
		sql.append(" LEFT JOIN T_FXC_SURVEY_SUBJECT TS ON TQ.SUB_ID = TS.ID ");
		sql.append(" WHERE TA.STATE = '1' AND TQ.STATE = '1'  AND TS.STATE = '1' AND TS.SUBJECT_CODE = ? ORDER BY TQ.ORDER_LINE,TA.ORDER_LINE");
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), new Object[] { subjectCode });
		return ModelUtil.packList(queryResult, QuestionInfoVo.class);
	}

    @SuppressWarnings("unchecked")
    @Override
    public List<QuestionInfoVo> queryByBusinessIdAndNodeId(Long businessId, String nodeId)
    {
        StringBuilder sql=new StringBuilder();
        sql.append("SELECT TA.ID AS A_ID,TA.NAME,TA.ORDER_LINE,TA.QUE_ID,TA.STATE, TQ.EXT_CODE,TA.MARK,TA.IS_TRUE, TQ.NAME AS QUESTION_CONTENT,TQ.TYPE,TQ.SUB_ID,TS.SUBJECT_CODE,");
        sql.append(" CASE WHEN TA.ID = TR.ANS_ID THEN 'true' ELSE 'fasle' END IS_CHECK FROM ");
        sql.append(BaseTableConstants.T_FXC_SURVEY_ANSWER).append(" TA ");
        sql.append(" LEFT JOIN ").append(BaseTableConstants.T_FXC_SURVEY_QUESTION).append(" TQ ");
        sql.append(" ON TA.QUE_ID = TQ.ID ");
        sql.append(" LEFT JOIN ").append(BaseTableConstants.T_FXC_SURVEY_SUBJECT).append(" TS ");
        sql.append(" ON TS.ID = TQ.SUB_ID ");
        sql.append(" LEFT JOIN ").append(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD).append("  TR ");
        sql.append(" ON TA.QUE_ID = TR.QUE_ID ");
        sql.append(" WHERE TR.BUSINESS_ID = ? ");
        sql.append(" AND TR.NODE_ID = ?");
        List<DataRow> queryResult=this.getJdbcTemplate().query(sql.toString(), new Object[]{businessId,nodeId});
        return ModelUtil.packList(queryResult, QuestionInfoVo.class);
    }
	
}
