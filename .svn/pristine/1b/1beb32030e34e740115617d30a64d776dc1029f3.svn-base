package com.thinkive.fxc.ismp.bus.base.basicdata.function;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.itextpdf.text.pdf.PdfStructTreeController.returnType;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.EnumValueModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.EnumInfoService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * 
 * 
 * @描述:获取柜台数据字典信息 
 * @版权: Copyright (c) 2019
 * @公司: 思迪科技 
 * @作者: 童伟麟
 * @版本: 1.0 
 * @创建日期: 2019年7月30日
 * @创建时间: 上午11:21:38
 */
public class Function1004170 extends ISMPBaseFunction
{
	
	private String third_enum_type;//三方的数据字典类型
	
	private String third_enum_value;//三方的数据字典值
	
	private String filter_enum_type;//需要过滤的数据字典类型
	
    Logger logger = Logger.getLogger(Function1004170.class);

	public ResultVo execute() throws InvokeException
	{
		initVar();
		ResultVo resultVo = new ResultVo();
		
		DataRow input = new DataRow();
		input.set("dict_entry", third_enum_type);
		input.set("subentry", third_enum_value);
	    ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
        List<DataRow> enumList=null;
		try {
			enumList = thirdInterface.queryThirdEnumList(input);
		} catch (Exception e) {
			resultVo.setErrorMsg(e.getMessage());
			resultVo.setErrorNo(-1);
			return resultVo;
		}
		List<EnumValueModel> localEnumList = null;
		if (StringHelper.isNotEmpty(filter_enum_type)) {
			EnumInfoService enumService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_ENUMINFO, EnumInfoService.class);
			localEnumList = enumService.queryByEmunNo(filter_enum_type);
			if (localEnumList==null || localEnumList.size() == 0) {
				resultVo.setErrorMsg("未查询到数据字典配置");
				resultVo.setErrorNo(-1);
				return resultVo;
			}
		}
		ArrayList<DataRow> returnList = new ArrayList<DataRow>();
		if(enumList!=null&&enumList.size()>0){
			for (DataRow data : enumList) {
				boolean isExist = false;
				if (localEnumList!=null && localEnumList.size() > 0) {
					for (DataRow localDatarDataRow : localEnumList) {
						if ( localDatarDataRow.getString("item_value").equals(data.getString("subentry")) ) {
							isExist = true;
							break;
						}
					}
				}
				if (isExist) 
					continue;
				
				DataRow dataRow = new DataRow();
				dataRow.set("enum_type", data.get("dict_entry"));
				dataRow.set("enum_value",data.get("subentry"));
				dataRow.set("enum_name", data.get("dict_prompt"));
				returnList.add(dataRow);
			}
			resultVo.setErrorMsg("调用成功");
			resultVo.setResult(returnList);
			resultVo.setErrorNo(0);
		}else{
			resultVo.setErrorMsg("未查询到三方数据字典配置");
			resultVo.setErrorNo(-1);
		}
		return resultVo;
	}
	
	private void initVar()
	{	
		third_enum_type = this.getStrParameter("third_enum_type","1047");
		third_enum_value = this.getStrParameter("third_enum_value");
		filter_enum_type = this.getStrParameter("filter_enum_type");
	}
}
