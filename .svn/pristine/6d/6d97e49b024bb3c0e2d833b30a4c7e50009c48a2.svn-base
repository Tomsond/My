package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.function;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ThirdBankModel;
import com.thinkive.fxc.ismp.bus.base.business.constants.AgreeNodePropertyConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.AgreeRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.AgreeRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserSnapShotService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.CertConstants;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankContants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.ThirdBankService;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.vo.ThirdBankBusinessInfoVo;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 三方存管-绑定银行卡
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2017年2月21日 下午2:14:10
 */
public class Function1004136 extends ISMPBaseFunction
{
	
	private Long userId; //用户ID
	
	private Long bankConfigId; //三方存管配置编号
	
	private String cardNum; //银行卡号
	
	private String cardPassword; //银行卡密码
	
	private String fundAccount; //主资金账号
	
	private String jsondata; //签名json字符串
	
	private ThirdInterface thirdInterface;
	
	private ThirdBankService thirdBankService;
	
	private AgreeRecordService agreeRecordService;
	
	@Override
	public ResultVo execute() throws Exception
	{
		//step1:获取并校验入参
		checkInput();
		
		thirdBankService = SpringHelper.getBean(ThirdBankContants.SERVICE_ID_THIRDBANK, ThirdBankService.class);
		ThirdBankModel thirdBankModel = thirdBankService.queryThirdBankModelById(bankConfigId);//更具ID获取对应银行的三方存管配置信息
		
		//没有这种三方存管配置
		if (thirdBankModel == null)
		{
			throw new BusinessException(ThirdBankErrorCode.NO_BANKCODE);
		}
		
		//获取需要提交的协议信息
		Map<String, DataRow> signParamsMap = getNeedSignAgereeInfo(thirdBankModel);
		
		//提交的所有需要签署的协议
		SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
		List<Map<String, String>> allSignList = signAndVerifyService.verifySignTextAndSubmitThird(jsondata, signParamsMap);
		
		//step3:校验并获取用户信息
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);
		
		//step4:判断是否是中登时间
		thirdBankService.checkTradeTime();
		
		//step5:判断用户银行卡是否已经绑定三方存管
		thirdBankService.checkCardExit(cardNum, userId);
		
		//step6:检查银行绑定类型的帐号密码是否需要
		thirdBankService.checkBindBankInfo(thirdBankModel, cardNum, cardPassword);
		
		//step7:绑定银行卡数量上限验证，目前最多绑定五张银行卡
		thirdBankService.checkBankCount(userInfoVo, ThirdBankContants.THIRDBANK_OP_TYPE_BIND);
		
		//step8:将银行卡和资金账号进行绑定
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		thirdInput.set("bank_code", thirdBankModel.getLinkBankOrg());
		thirdInput.set("card_num", cardNum);
		thirdInput.set("card_password", cardPassword);
		thirdInput.set("bindtype", thirdBankModel.getBindType());
		thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow bindResult = thirdInterface.accountBindBankCard(thirdInput);
		ResultVo resultVo = new ResultVo();
		//step9:添加三方存管业务办理信息
		Boolean submitResult = bindResult.getBoolean("flag");//提交第三方的结果 ：true-绑定成功，false-绑定失败
		ThirdBankBusinessInfoVo businessInfoVo = new ThirdBankBusinessInfoVo();
		businessInfoVo.setUserId(userId);
		businessInfoVo.setNodeId(DictionaryConstants.FLOW_LASTSTEP_NEXT);//三方存管绑定银行卡只有一步，此处节点为完成
		businessInfoVo.setIsComplete(DictionaryConstants.BOL_TRUE);//三方存管绑定银行卡只有一步，直接完成
		businessInfoVo.setDealResult(DictionaryConstants.DEAL_RESULT_SUCCESS);
		businessInfoVo.setOpSource(opSource);
		businessInfoVo.setOpStation(opStation);
		businessInfoVo.setIp(ip);
		businessInfoVo.setFundAccount(fundAccount);
		businessInfoVo.setOpType(ThirdBankContants.THIRDBANK_OP_TYPE_BIND);
		businessInfoVo.setNewBankcode(bankConfigId.toString());
		businessInfoVo.setNewBanknum(cardNum);
		if (!submitResult)//失败
		{
		//	throw new BusinessException(ThirdBankErrorCode.ADDORUPDATEUSERBANKBIND_CODE, bindResult.getString("message"));
			businessInfoVo.setDealResult(DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE);
			Long businessId = thirdBankService.addThirdBankBusinessInfoVo(businessInfoVo);
			List<AgreeRecordModel> agreeRecordModels = signAndVerifyService.getAgreeRecordModels(userId, allSignList, businessId, BusinessConstants.BUSINESS_THIRDBANK,"");
			agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
			agreeRecordService.addBatch(agreeRecordModels, businessId, BusinessConstants.BUSINESS_THIRDBANK);
			UserSnapShotService userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT, UserSnapShotService.class);
			userSnapShotService.addUserSnapShot(businessId, userInfoVo);
			resultVo.setErrorNo(-100413601);
			resultVo.setErrorMsg(bindResult.getString("message"));
		}
		else{
		businessInfoVo.setDealResult(DictionaryConstants.DEAL_RESULT_SUCCESS);
		Long businessId = thirdBankService.addThirdBankBusinessInfoVo(businessInfoVo);
		//step11：协议留痕
		//根据用户提交的协议获取协议对象
		List<AgreeRecordModel> agreeRecordModels = signAndVerifyService.getAgreeRecordModels(userId, allSignList, businessId, BusinessConstants.BUSINESS_THIRDBANK,"");
		agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
		agreeRecordService.addBatch(agreeRecordModels, businessId, BusinessConstants.BUSINESS_THIRDBANK);
		
		//step12：添加业务办理快照
		UserSnapShotService userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT, UserSnapShotService.class);
		userSnapShotService.addUserSnapShot(businessId, userInfoVo);
		resultVo.setErrorNo(0);
		resultVo.setErrorMsg(bindResult.getString("message"));
		}
		//step13:出参
		return resultVo;
	}
	
	private void checkInput() throws InvokeException
	{
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));//用户编号
		fundAccount = this.getAndCheckBlankStrParam("fundAccount", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);// 资金账号
		jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);//签名json
		bankConfigId = Long.valueOf(this.getAndCheckBlankStrParam("bankConfigId", ErrorCodeCheckInput.BLANK_ENUM_BANKCONFIGID));//三方存管配置编号
		opSource = getStrParameter("op_source");//操作渠道
		cardNum = this.getStrParameter("cardNo");//银行卡号
		cardPassword = this.getStrParameter("cardPassword");//银行卡密码
	}
	
	/**
	 * @描述：获取业务办理需要签署的协议信息
	 * @作者：刘恺
	 * @时间：2017年2月22日 下午1:12:41
	 * @param thirdBankModel
	 * @return
	 */
	private Map<String, DataRow> getNeedSignAgereeInfo(ThirdBankModel thirdBankModel)
	{
		String agreeNos = thirdBankModel.getAgreeNo();
		String[] agreeNoArr = agreeNos.split(",");
		Map<String, DataRow> signParamsMap = new HashMap<String, DataRow>();
		for (String agreeNo : agreeNoArr)
		{
			DataRow signParams = new DataRow();
			signParams.set(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTYPE, CertConstants.SIGN_TYPE_NOCERT);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
			signParams.set(AgreeNodePropertyConstants.PROPERTY_KEY_SUBMITTYPE, CertConstants.SUBMIT_TYPE_LOCAL);//提交方式 0-否，1-是，默认值0
			signParams.set(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTEXTTYPE, CertConstants.SIGN_SOURCE_FLAG_MD5);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
			signParamsMap.put(agreeNo, signParams);
		}
		return signParamsMap;
	}
}
