package com.thinkive.fxc.ismp.bus.business.zq.function;

import java.io.UnsupportedEncodingException;
import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.utils.FlowNodeManageUtil;
import com.thinkive.fxc.ismp.bus.base.business.vo.BusinessEntityAndConfigVO;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.smjj.constants.SmjjConstants;
import com.thinkive.fxc.ismp.bus.business.smjj.model.SmjjAssetsRecordModel;
import com.thinkive.fxc.ismp.bus.business.smjj.service.SmjjImageRecordService;
import com.thinkive.fxc.ismp.bus.business.zq.constants.ZqConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.server.ResultVo;
import com.thinkive.server.util.SpringUtil;

/**
 * 
 * 描述： 私募基金合格投资者--保存用户输入数据
 * @author yanyaoh
 * @created 2019年9月17日 上午10:45:04
 * @since
 */
public class Function1004241 extends ISMPBaseFunction
{
    
    protected Long   userId;           // 用户编号
    
    protected String opSource;         // 客户端类型
    
    protected String businessCode;     // 业务类型
    
    protected String tradeTimeFlag;    // 交易经验检查是否通过
    
    protected String riskName; // 风险等级名称
    
    protected String realFirstTime; // 用户实际的首次交易日期
    
    @SuppressWarnings("unchecked")
    public ResultVo execute() throws Exception
    {
        initVar();
        
        UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
        UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
        if (userInfo == null)
        {
            throw new BusinessException(ErrorCodeSystem.NOTEXIST_USER, "用户不存在");
        }
        
        //查询正在办理的港股通业务数据
        BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
        BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCode(userId, ZqConstants.BUSINESS_CODE);
        if(businessEntityModel == null)
        {
            throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW, "业务办理数据不存在");
        }
        
        SmjjImageRecordService imageRecordService = SpringUtil.getBean(SmjjConstants.SERVICE_ID_SMJJIMAGERECORD,
                SmjjImageRecordService.class);
        SmjjAssetsRecordModel smjjAssetsRecordModel = new SmjjAssetsRecordModel();
        smjjAssetsRecordModel.setBusinessId(businessEntityModel.getId());
        smjjAssetsRecordModel.setUserId(userId);
        smjjAssetsRecordModel.set("risk_name", this.riskName);
        smjjAssetsRecordModel.set("trade_time_flag",this.tradeTimeFlag);
        smjjAssetsRecordModel.set("first_trade_time",this.realFirstTime);
        imageRecordService.addOrUpdate(smjjAssetsRecordModel);
        
        //修改流程接口-到上传资产证明步骤
//        BusinessEntityModel businessEntityModel = new BusinessEntityModel();
//        businessEntityModel.setId(businessEntityAndConfigVO.getId());
//        businessEntityModel.setBusinessCode(businessEntityAndConfigVO.getBusinessCode());
//        businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
//        businessEntityModel.setOpSource(opSource);
//        businessEntityModel.setIp(ip);
//        businessEntityModel.setOpStation(opStation);
//        businessEntityService.changeBusinessFlowNode(businessEntityModel, nodeId);
        
        ResultVo resultVo = new ResultVo();
        resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
        resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
        return resultVo;
    }
    
    
    /**
     * @描述：获取业务入参
     * @作者：刘恺
     * @时间：2016年8月23日 下午8:55:24
     */
    private void initVar()
    {
        userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID),
                ErrorCodeCheckInput.LONG_FORMAT_ERROR);
        opSource = this.getAndCheckBlankStrParam("op_source", ErrorCodeCheckInput.BLANK_OP_SOURCE);
        businessCode = this.getAndCheckBlankStrParam("businessCode", ErrorCodeCheckInput.BLANK_BUSINESSCODE);
        tradeTimeFlag = this.getAndCheckBlankStrParam("trade_time_flag", ErrorCodeCheckInput.BLANK_TRADE_TIME_FLAG);//交易经验是否满足标识不能为空
        riskName = this.getStrParameter("risk_name"); // 用户风险等级名称
        realFirstTime = this.getStrParameter("first_trade_time"); // 用户实际的首次交易日期
    }
}
