package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.jdbc.session.SessionFactory;
import com.thinkive.fxc.ismp.bus.base.business.dao.ChoiceAccountRecordDao;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.ChoiceAccountRecordService;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;

/**
 * @描述: 用户选择帐号记录服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年9月3日 上午11:12:37
 */
public class ChoiceAccountRecordServiceImpl implements ChoiceAccountRecordService
{
	
	private ChoiceAccountRecordDao choiceAccountRecordDao;
	
	public void setChoiceAccountRecordDao(ChoiceAccountRecordDao choiceAccountRecordDao)
	{
		this.choiceAccountRecordDao = choiceAccountRecordDao;
	}
	
	@Override
	public List<ChoiceAccountRecordModel> addBatchByStkbds(String stkbds, Long businessId, String nodeId, String state) throws Exception
	{
		if (StringUtils.isBlank(stkbds))
		{
			return null;
		}
		String[] stkbdArr = stkbds.split(",");
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		for (String item : stkbdArr)
		{
			ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
			choiceAccountRecordModel.setBusinessId(businessId);
			choiceAccountRecordModel.setNodeId(nodeId);
			choiceAccountRecordModel.setState(state);
			choiceAccountRecordModel.setStkbd(item);
			choiceAccountRecordModels.add(choiceAccountRecordModel);
		}
		addBatch(choiceAccountRecordModels, businessId, nodeId);
		return choiceAccountRecordModels;
	}
	
	@Override
	public List<ChoiceAccountRecordModel> addBatchByAccounts(String accounts, Long businessId, String nodeId, String state) throws Exception
	{
		if (StringUtils.isBlank(accounts))
		{
			return null;
		}
		
//		String[] accountArr = accounts.split(",");
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(accounts, "0");
				//new ArrayList<ChoiceAccountRecordModel>();
		for (ChoiceAccountRecordModel choiceAccountRecordModel : choiceAccountRecordModels)
		{
//			ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
			choiceAccountRecordModel.setBusinessId(businessId);
			choiceAccountRecordModel.setNodeId(nodeId);
			choiceAccountRecordModel.setState(state);
//			choiceAccountRecordModel.setTrdAccount(item);
//			choiceAccountRecordModels.add(choiceAccountRecordModel);
		}
		choiceAccountRecordModels = addBatch(choiceAccountRecordModels, businessId, nodeId);
		return choiceAccountRecordModels;
	}
	
	@Override
	public List<ChoiceAccountRecordModel> addBatch(List<ChoiceAccountRecordModel> choiceAccountRecordModels, Long businessId, String nodeId) throws Exception
	{
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			//删除记录
			choiceAccountRecordDao.deleteByBusinessIdAndNodeId(businessId, nodeId, session);
			//添加新记录
			choiceAccountRecordDao.addBatch(choiceAccountRecordModels, session);
			//先删除目前已有的问卷答案
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return choiceAccountRecordModels;
	}
	
	@Override
	public List<ChoiceAccountRecordModel> queryByBusinessIdAndNodeId(Long businessId, String nodeId)
	{
		return choiceAccountRecordDao.queryByBusinessIdAndNodeId(businessId, nodeId);
	}

    @Override
    public List<ChoiceAccountRecordModel> queryByBusinessId(Long businessId)
    {   
        return choiceAccountRecordDao.queryByBusinessIdAndNodeId(businessId, "");
    }
}
