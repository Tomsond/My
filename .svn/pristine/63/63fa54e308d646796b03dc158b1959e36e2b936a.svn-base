package com.thinkive.fxc.ismp.bus.business.gem.function;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.ResultVo;

public class Function1004020 extends ISMPBaseFunction
{
	
	private Long userId;
	
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
		boolean istradetime = tradeTimeService.checkZdTradeTime();
		Map<String, Object> stateAndAccount = getAccountState(userInfo, istradetime);
		List<DataRow> accountStateList = (List<DataRow>) stateAndAccount.get("accountStateList");
		DataRow state = (DataRow) stateAndAccount.get("state");
		DataRow otherInfo = new DataRow();
		otherInfo.set("istradetime", istradetime ? DictionaryConstants.BOL_TRUE : DictionaryConstants.BOL_FALSE);
		otherInfo.set("hasopen", state.get("hasOpen"));
		otherInfo.set("accountState", state.get("accountState"));
		ResultVo resultVo = new ResultVo();
		resultVo.setResult("accountInfoList", accountStateList);
		resultVo.setResult("otherInfo", otherInfo);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private Map<String, Object> getAccountState(UserInfoVo userInfo, boolean isTradeTime) throws Exception
	{
		//查询已加挂深A帐号
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> szaAccountList = thirdTrdAccountService.queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SZA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfo,
				ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		List<DataRow> accountStateList = new ArrayList<DataRow>();
		Map<String, DataRow> gtSzaMap = new HashMap<String, DataRow>();
		String hasOpen = DictionaryConstants.BOL_FALSE;//是否已开通创业板，否
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfo);
		//遍历已加挂的深A帐号，查询创业板权限
		if (szaAccountList != null && szaAccountList.size() != 0)
		{
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			for (int i = 0; i < szaAccountList.size(); i++)
			{
				DataRow szaItem = szaAccountList.get(i);
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(szaItem.getString("state")))
				{
					accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
				}
				//查询创业板通信息
				thirdInput.set("trdaccount", szaItem.getString("trdacct"));
				thirdInput.set("query_type", ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
				DataRow cybAccount = thirdInterface.queryCYBAccount(thirdInput);
				DataRow accountStateItem = new DataRow();
				accountStateItem.set("sza_account", szaItem.getString("trdacct"));//深A帐号
				accountStateItem.set("sza_state", szaItem.getString("state"));//深A帐号状态
				accountStateItem.set("cyb_bind", DictionaryConstants.BOL_FALSE); //在券商处是否开通创业板
				//如果该深A帐号已开通创业板
				if (cybAccount != null && !cybAccount.isEmpty())
				{
					//修改创业板是否开通标识
					if (DictionaryConstants.BOL_FALSE.equals(hasOpen) && DictionaryConstants.BOL_TRUE.equals(cybAccount.getString("query_flag")))
					{
						hasOpen = DictionaryConstants.BOL_TRUE;
					}
					//获取创业板在券商处开通状态
					if (StringHelper.isEmpty(cybAccount.getString("bind_state")))
					{
						accountStateItem.set("cyb_bind", "0");
					}
					else
					{
						accountStateItem.set("cyb_bind", cybAccount.getString("bind_state"));
					}
				}
				else
				{
					accountStateItem.set("cyb_bind", "0");//cybAccount为空默认没开 0 未开 1 开通
				}
				gtSzaMap.put(szaItem.getString("trdacct"), szaItem);
				accountStateList.add(accountStateItem);
			}
		}
		//如果已加挂的深A中没有开通过创业板，并且当前为中登时间
		if (DictionaryConstants.BOL_FALSE.equals(hasOpen) && isTradeTime)
		{
			//中登查询用户已开通的深A帐号
			DataRow zdparams = new DataRow();
			zdparams.set("stkbd", ThirdInterfaceConstant.STKBD_SZA);//深圳A股
			zdparams.set("trdacct_excls", ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD);//个人股东帐号
			List<DataRow> zdSzaAccountList = thirdTrdAccountService.queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SZA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfo,
					ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_ZD);
			//遍历中登返回的深A帐号
			if (zdSzaAccountList != null && zdSzaAccountList.size() != 0)
			{
				for (int i = 0; i < zdSzaAccountList.size(); i++)
				{
					DataRow zdSzaItem = zdSzaAccountList.get(i);
					//查询创业板通信息
					thirdInput.set("trdaccount", zdSzaItem.getString("trdacct"));
					thirdInput.set("query_type", ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_ZD);
					DataRow cybAccount = thirdInterface.queryCYBAccount(thirdInput);
					//如果该深A帐号已开通创业板
					if (cybAccount != null && !cybAccount.isEmpty() && DictionaryConstants.BOL_TRUE.equals(cybAccount.getString("query_flag")))
					{
						//修改创业板是否开通标识
						hasOpen = DictionaryConstants.BOL_TRUE;
						break;
					}
				}
			}
		}
		Map<String, Object> result = new HashMap<String, Object>();
		DataRow state = new DataRow();
		state.set("hasOpen", hasOpen);
		state.set("accountState", accountState);
		result.put("state", state);
		result.put("accountStateList", accountStateList);
		return result;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
	}
}
