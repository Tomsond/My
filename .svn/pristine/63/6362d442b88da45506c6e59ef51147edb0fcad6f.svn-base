package com.thinkive.fxc.ismp.bus.business.kc.function;

import org.apache.log4j.Logger;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.kc.model.KCEditionReservationModel;
import com.thinkive.fxc.ismp.bus.business.kc.service.KCEditionReservationService;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * 作者：MIKE
 * 公司：深圳市思迪信息技术股份公司
 * 日期时间：2019年3月6日 下午4:01:44
 * 说明：科创版权限开通预约信息提交类
 */
public class Function1004573 extends ISMPBaseFunction
{
	
	private String name;//客户名称
	
	private String client_id;//客户号
	
	private String fund_account;//资金帐号
	
	private String stock_account;//沪A证券帐号
	
	private String phone_number;//手机号码
	
	private String idno;//证件号
	
	private String idtype;//证件类型
	
	private String branch_no;//营业部编号
	
	private String branch_name;//营业部名称
	
	private String reserved1;//预留字段1
	
	private String reserved2;//预留字段2
	
	private String reserved3;//预留字段3
	
	@SuppressWarnings("unused")
	private static Logger logger = Logger.getLogger(Function1004573.class);
	@SuppressWarnings("deprecation")
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		ResultVo resultVo = new ResultVo();
		KCEditionReservationService service = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_KCEDITIONRESERVATION, KCEditionReservationService.class);
		try {
			KCEditionReservationModel model = new KCEditionReservationModel();
			if(StringHelper.isNotEmpty(name)){
				model.setName(name);
			}
			if(StringHelper.isNotEmpty(client_id)){
				model.setClientId(client_id);
			}
			if(StringHelper.isNotEmpty(fund_account)){
				model.setFundAccount(fund_account);
			}
			if(StringHelper.isNotEmpty(stock_account)){
				model.setStockAccount(stock_account);
			}
			if(StringHelper.isNotEmpty(phone_number)){
				model.setPhoneNumber(phone_number);
			}
			if(StringHelper.isNotEmpty(idno)){
				model.setIdNo(idno);
			}
			if(StringHelper.isNotEmpty(idtype)){
				model.setIdType(idtype);
			}
			if(StringHelper.isNotEmpty(branch_no)){
				model.setBranchNo(branch_no);
			}
			if(StringHelper.isNotEmpty(branch_name)){
				model.setBranchName(branch_name);
			}
			if(StringHelper.isNotEmpty(reserved1)){
				model.setReserve1(reserved1);
			}
			if(StringHelper.isNotEmpty(reserved2)){
				model.setReserve2(reserved2);
			}
			if(StringHelper.isNotEmpty(reserved3)){
				model.setReserve3(reserved3);
			}
			//配置是否拦截预约重复提交
			if (DictionaryConstants.BOL_TRUE.equals(Configuration.getString("system.check_kc")))
			{
				DataRow data = service.queryKCEditionReservation(model);
				if(data!=null&&data.size()>0){
					throw new BusinessException(ErrorCodeCheckInput.BLANK_BUSINESS_KCEDITION,"存在预约信息，不允许重复提交");
				}
			}
			service.InsertKCEditionReservation(model);//添加预约记录
		} catch (Exception e) {
			logger.info("错误信息："+e,e);
			throw new InvokeException(e.getMessage(),getErrorNo(-1001));
		}
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：MIKE
	 * @时间：2017年1月30日 
	 */
	private void initVar()
	{
		name = this.getAndCheckBlankStrParam("name", ErrorCodeCheckInput.BLANK_USER_NAME);
		client_id = this.getStrParameter("client_id");
		fund_account = this.getStrParameter("fund_account");
		stock_account = this.getStrParameter("stock_account");
		phone_number = this.getStrParameter("phone_number");
		if(!StringHelper.isMoblie(phone_number)){
			throw new BusinessException(ErrorCodeCheckInput.ERROR_FORMAT_MOBILE);
		}
		idno =  this.getStrParameter("idno");
		idtype = this.getStrParameter("idtype","00");
		branch_no = this.getStrParameter("branch_no");
		branch_name = this.getStrParameter("branch_name");
		reserved1= this.getStrParameter("reserved1");
		reserved2= this.getStrParameter("reserved2");
		reserved3= this.getStrParameter("reserved3");
	}
}
