package com.thinkive.fxc.ismp.bus.business.kc.function;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.FlowNodeModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ProcNodeDefineModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.ChoiceAccountRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.FlowNodeService;
import com.thinkive.fxc.ismp.bus.base.business.service.ProcNodeDefineService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;


/**
 * 作者：MIKE
 * 公司：深圳市思迪信息技术股份公司
 * 日期时间：2019年3月10日 下午2:19:47
 * 说明：科创板--查询业务办理数据
 */
public class Function1004581 extends ISMPBaseFunction
{
	
	private Long userId;
	
	private String businessCode = BusinessConstants.BUSINESS_KCB;//科创板业务code
	
	private UserInfoService userInfoService;
	
	private BusinessEntityService businessEntityService;
	
	private ChoiceAccountRecordService choiceAccountRecordService;
	
	private FlowNodeService flowNodeService;
	
	private ProcNodeDefineService procNodeDefineService;
	
	@Override
	public ResultVo execute() throws Exception
	{
		// step1:入参校验
		checkInput();
		
		//step2:用户信息
		userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		DataRow userInfo = userInfoService.queryUserInfoByUserId(userId);
		if (userInfo == null)
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFUNDACCOUNT, "资金帐号获取失败");
		}
		
		//step3:查询用户科创板业务办理数据
		businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCode(userId, businessCode);
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		if (null != businessEntityModel)
		{
			choiceAccountRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CHOICEACCOUNTRECORD, ChoiceAccountRecordService.class);
			choiceAccountRecordModels = choiceAccountRecordService.queryByBusinessId(businessEntityModel.getId());
		}
		
		//step4:打包出参
		DataRow result = packOutData(businessEntityModel);
		ResultVo resultVo = new ResultVo();
		resultVo.setResult(result);
		resultVo.setResult("trdaccounts", choiceAccountRecordModels != null ? choiceAccountRecordModels : new ArrayList<ChoiceAccountRecordModel>());//选择的交易帐号
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private DataRow packOutData(BusinessEntityModel businessEntityModel)
	{
		DataRow result = new DataRow();
		if (businessEntityModel == null)
		{
			result.set("query_flag", DictionaryConstants.BOL_FALSE);
			return result;
		}
		
		Long businessId = businessEntityModel.getId();
		flowNodeService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_FLOWNODE, FlowNodeService.class);
		List<FlowNodeModel> flowNodeModels = flowNodeService.queryByBusinessId(businessId);//获取该业务实例走过的流程步骤
		
		procNodeDefineService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_PROCNODEDEFINE, ProcNodeDefineService.class);
		List<ProcNodeDefineModel> procNodeDefineModels = procNodeDefineService.queryByBusinessType(businessCode);//获取科创板所有的业务节点定义
		
		//对比得到哪些节点步骤是用户完成了的
		if (null != procNodeDefineModels)
		{
			for (ProcNodeDefineModel procNodeDefineModel : procNodeDefineModels)
			{
				String nodeId = procNodeDefineModel.getNodeId();
				if (StringUtils.isNotBlank(nodeId))
				{
					if (null != flowNodeModels)
					{
						for (FlowNodeModel flowNodeModel : flowNodeModels)
						{
							if (nodeId.equals(flowNodeModel.getNodeId()))
							{
								result.set(nodeId, DictionaryConstants.BOL_TRUE);
							}
						}
					}
					
				}
				
			}
		}
		
		result.set("query_flag", DictionaryConstants.BOL_TRUE);
		result.set("id", businessEntityModel.getId());
		result.set("state", businessEntityModel.getDealResult()); //0：前端流程未走完1：前端流程走完2：后台审核未通过3：后台审核通过 4：业务办理失败5：业务办理通过
		result.set("create_date", businessEntityModel.getCreateDate()); //创建时间
		return result;
	}
	
	/**
	 * @描述：获取并校验入参
	 * @作者：田源
	 * @时间：2016年9月19日 下午3:49:05
	 * @throws InvokeException
	 */
	private void checkInput() throws InvokeException
	{
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
	}
}
