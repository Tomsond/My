package com.thinkive.fxc.ismp.bus.business.zdjy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.utils.ModularNodeUtil;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 指定交易
 * @版权: Copyright (c) 2016 
 * @公司: 思迪科技 
 * @作者: 刘为
 * @版本: 2.0 
 * @创建日期: 2016年11月4日 
 * @创建时间: 下午3:02:42
 */
public class Function1004472 extends IsmpFlowBaseFunction
{
	
	private String jsondata;
	
	private String trdaccount;
	
	@Override
	public ResultVo execute() throws InvokeException, Exception
	{
		initVar();
		//获取节点属性组
		Map<String, DataRow> signMap = ModularNodeUtil.checkAndReturnSignNodeProperty(nodePropertyConfigModelList);
		//提交所有协议， 验签
		SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
		List<Map<String, String>> allSignList = signAndVerifyService.verifySignTextAndSubmitThird(jsondata, signMap);
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		//查询当前业务的配置属性
		BusinessConfigService businessConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSCONFIG, BusinessConfigService.class);
		BusinessConfigModel businessConfigModel = businessConfigService.queryByOpSourceAndBusinessCode(businessCode, opSource);
		// 获取业务实例模型
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		BusinessEntityModel businessEntityModel = getNewBusinessEntity();
		businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
		// 判断具体的操作步骤
		if (businessConfigModel == null || businessConfigModel.getNeedAudit().equalsIgnoreCase(DictionaryConstants.BOL_TRUE))
		{
			//根据trdaccount参数转化为需要指定交易的选择账号记录
			choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(trdaccount, DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
			businessEntityService.addEntityAndAgreeAndAccountAndAuditTask(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			//如果是跑批
		}
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_PP.equals(businessConfigModel.getDataSubmitType()))
		{
			choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(trdaccount, DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
			businessEntityService.addEntityAndAgreeAndAccountAndPpTask(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			//如果是统一实时提交第三方
		}
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_THIRD.equals(businessConfigModel.getDataSubmitType()))
		{
			choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(trdaccount, DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
			Map<String, Object> openResult = openZdjy(choiceAccountRecordModels);
			String dealResult = (String) openResult.get("dealResult");
			businessEntityModel.setDealResult(dealResult);
			businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
			businessEntityService.addEntityAndAgreeAndAccount(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			//如果是中登时间则提交第三方，非中等时间则跑批
		}
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_SERVICETIME.equals(businessConfigModel.getDataSubmitType()))
		{
			TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
			if (tradeTimeService.checkZdTradeTime())
			{
				choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(trdaccount, DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
				Map<String, Object> openResult = openZdjy(choiceAccountRecordModels);
				String dealResult = (String) openResult.get("dealResult");
				businessEntityModel.setDealResult(dealResult);
				businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
				businessEntityService.addEntityAndAgreeAndAccount(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			}
			else
			{
				choiceAccountRecordModels = DataFormatUtils.packInputAccountAndStkbdInfo(trdaccount, DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
				businessEntityService.addEntityAndAgreeAndAccountAndPpTask(businessEntityModel, submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList, choiceAccountRecordModels,"");
			}
		}
		resultVo.setResult("choiceAccountRecordModels", choiceAccountRecordModels);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);//返回成功标示
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	public void initVar()
	{
		jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);
		trdaccount = this.getAndCheckBlankStrParam("trdaccount", ErrorCodeCheckInput.BLANK_TRDACCOUNT);
	}
	
	public Map<String, Object> openZdjy(List<ChoiceAccountRecordModel> choiceAccountRecordModels) throws Exception
	{
		// 需要查询柜台，查出所有沪A的账号，并和指定交易账号对比，然后开通账号
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		Map<String, DataRow> accountMap = getAccountMap(userInfoVo);
		String dealResult = DictionaryConstants.DEAL_RESULT_SUCCESS;
		//开通指定交易
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		for (ChoiceAccountRecordModel recordModel : choiceAccountRecordModels)
		{
			try
			{
				if (!accountMap.containsKey(recordModel.getTrdAccount()))
				{
					dealResult = DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE;
					recordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_FAIL);
					recordModel.setDescription(DictionaryConstants.CHOICE_ACCOUNT_ACCOUNTSTATEERROR);
				}
				else
				{
					//开通指定交易
					thirdInput.set("trdaccount", recordModel.getTrdAccount());
					thirdInterface.regZdjy(thirdInput);
					recordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_SUCCESS);
					recordModel.setDescription(DictionaryConstants.CHOICE_ACCOUNT_OPENSUCCESS);
				}
			}
			catch (Exception e)
			{
				dealResult = DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE;
				recordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_FAIL);
				recordModel.setDescription(e.getMessage());
			}
		}
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("dealResult", dealResult);
		resultMap.put("choiceAccountRecordModels", choiceAccountRecordModels);
		return resultMap;
	}
	
	public Map<String, DataRow> getAccountMap(UserInfoVo userInfoVo) throws Exception
	{
		//查询所有的有效账户信息
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> accountList = thirdTrdAccountService.queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SHA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo,
				ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		Map<String, DataRow> accountMap = new HashMap<String, DataRow>();
		//筛选出账号状态为正常且未指定的账号
		for (DataRow dataRow : accountList)
		{
			if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(dataRow.get("state")) && (ThirdTBASConstants.TRDACCOUNT_STATE_NOAPPOINT.equals(dataRow.get("bind_state"))))
			{
				accountMap.put(dataRow.getString("trdacct"), dataRow);
			}
		}
		return accountMap;
	}
	
}
