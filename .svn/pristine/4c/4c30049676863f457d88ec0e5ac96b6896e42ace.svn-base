package com.thinkive.fxc.ismp.bus.business.smjj.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;
import com.thinkive.fxc.ismp.bus.business.smjj.constants.SmjjConstants;
import com.thinkive.fxc.ismp.bus.business.smjj.dao.SmjjAssetsRecordDao;
import com.thinkive.fxc.ismp.bus.business.smjj.model.SmjjAssetsRecordModel;

/**
 * @描述: 影像资料记录表<p>T_ISMP_SM_ASSETS</p> 数据层接口实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 尹杰民
 * @版本: 2.0 
 * @创建时间: 2016年8月15日 下午4:50:41
 */
public class SmjjAssetsRecordDaoImpl extends ISMPBaseDao implements SmjjAssetsRecordDao
{
	
	@Override
	public SmjjAssetsRecordModel add(SmjjAssetsRecordModel imageRecordModel)
	{
		String id = getSeqValue(SmjjConstants.T_ISMP_SM_ASSETS);
		imageRecordModel.setId(Long.valueOf(id));
		imageRecordModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(SmjjConstants.T_ISMP_SM_ASSETS, imageRecordModel);
		return imageRecordModel;
	}
	
	@Override
	public int update(SmjjAssetsRecordModel imageRecordModel)
	{
		imageRecordModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(SmjjConstants.T_ISMP_SM_ASSETS, imageRecordModel, "ID", imageRecordModel.getId());
	}
	
	@Override
	public int updateByBIdAndNIdAndCode(SmjjAssetsRecordModel imageRecordModel)
	{
		Long businessId = imageRecordModel.getBusinessId();
		Long userId = imageRecordModel.getUserId();
		if (businessId == 0 || userId == 0)
		{
			return 0;
		}
		imageRecordModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(SmjjConstants.T_ISMP_SM_ASSETS, imageRecordModel, new String[] { "BUSINESS_ID", "USER_ID" },
				new Object[] { businessId, userId});
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public List<SmjjAssetsRecordModel> queryByParams(SmjjAssetsRecordModel imageRecordModel)
	{
		StringBuilder sql = new StringBuilder();
		List<String> paramsList = new ArrayList<String>();
		sql.append("SELECT ID, BUSINESS_ID, USER_ID");
		sql.append(", REAL_ASSETS,FIRST_TRADE_TIME,REAL_ASSETS_FLAG,TRADE_TIME_FLAG,AUTHEN_TYPE,RISK_NAME, CREATE_DATE, UPDATE_DATE  FROM ");
		sql.append(SmjjConstants.T_ISMP_SM_ASSETS).append(" WHERE 1 = 1 ");
		Long businessId = imageRecordModel.getBusinessId();
		Long userId = imageRecordModel.getUserId();
		if (0 != businessId)
		{
			sql.append(" AND BUSINESS_ID = ?");
			paramsList.add(businessId.toString());
		}
		if (0 != userId)
		{
			sql.append(" AND USER_ID = ?");
			paramsList.add(userId.toString());
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), paramsList.toArray());
		return ModelUtil.packList(queryResult, SmjjAssetsRecordModel.class);
	}
	@Override
	@SuppressWarnings("unchecked")
	public SmjjAssetsRecordModel queryByUserId(SmjjAssetsRecordModel imageRecordModel)
	{
		StringBuilder sql = new StringBuilder();
		List<String> paramsList = new ArrayList<String>();
		sql.append("SELECT ID, BUSINESS_ID, USER_ID");
		sql.append(", REAL_ASSETS,FIRST_TRADE_TIME,REAL_ASSETS_FLAG,TRADE_TIME_FLAG,AUTHEN_TYPE,RISK_NAME, CREATE_DATE, UPDATE_DATE  FROM ");
		sql.append(SmjjConstants.T_ISMP_SM_ASSETS).append(" WHERE 1 = 1 ");
		Long businessId = imageRecordModel.getBusinessId();
		Long userId = imageRecordModel.getUserId();
		if (0 != businessId)
		{
			sql.append(" AND BUSINESS_ID = ?");
			paramsList.add(businessId.toString());
		}
		if (0 != userId)
		{
			sql.append(" AND USER_ID = ?");
			paramsList.add(userId.toString());
		}
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), paramsList.toArray());
		return ModelUtil.packInfo(queryResult, SmjjAssetsRecordModel.class);
	}
	
}
