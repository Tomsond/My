package com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.business;

import java.util.List;
import java.util.Map;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.ChoiceAccountRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.utils.ModularNodeUtil;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.server.ResultVo;

/**
 * @描述: 融资融券预约 --- 选择市场，签署协议
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月31日 下午3:51:51
 */
public class Function1004551 extends IsmpFlowBaseFunction
{
	
	private String stkbds;//交易板块,逗号分隔多个
	
	private String jsondata;//签名json字符串
	
	@SuppressWarnings("unchecked")
	public ResultVo execute() throws Exception
	{
		initVar();
		
		Map<String, Object> nodeProperty = ModularNodeUtil.checkChoiceAccountAndSignNodeProperty(nodePropertyConfigModelList);
		Map<String, DataRow> signParamsMap = (Map<String, DataRow>) nodeProperty.get("signParamsMap");
		
		//验签并存储签名数据
		SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
		signAndVerifyService.verifyAndSave(userId, businessEntityAndConfigVO.getId(), nodeId, jsondata, signParamsMap);
		
		//保存用户选择需要开通的帐号
		ChoiceAccountRecordService choiceAccountRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CHOICEACCOUNTRECORD, ChoiceAccountRecordService.class);
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = choiceAccountRecordService.addBatchByStkbds(stkbds, businessEntityAndConfigVO.getId(), nodeId,
				DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
		
		//修改业务实例为完成状态
		BusinessEntityModel businessEntityModel = new BusinessEntityModel();
		businessEntityModel.setId(businessEntityAndConfigVO.getId());
		businessEntityModel.setNodeId(DictionaryConstants.FLOW_LASTSTEP_NEXT);
		businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
		businessEntityModel.setDealResult(DictionaryConstants.DEAL_RESULT_SUCCESS);
		businessEntityModel.setOpSource(opSource);
		businessEntityModel.setIp(ip);
		businessEntityModel.setOpStation(opStation);
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		businessEntityService.changeBusinessFlowNode(businessEntityModel, nodeId);
		returnBusinessEntityModel(businessEntityModel);
		
		resultVo.setResult("choiceAccountRecordModels", choiceAccountRecordModels);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);//返回成功标示
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		stkbds = this.getAndCheckBlankStrParam("stkbds", ErrorCodeCheckInput.BLANK_STKBD);
		jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);
	}
}
