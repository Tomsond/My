package com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.business;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.constant.PreMarginTradingConstants;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.model.AdditionalInfo;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.service.AdditionalService;
import com.thinkive.server.ResultVo;

/**
 * @描述: 融资融券预约 --- 提交用户董监高信息 
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月30日 下午11:43:05
 */
public class Function1004547 extends IsmpFlowBaseFunction
{
	
	private AdditionalInfo additionalInfo;//附加信息
	
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		
		checkInput();
		
		AdditionalService additionalService = SpringHelper.getBean(PreMarginTradingConstants.SERVICE_ID_ADDITIONAL, AdditionalService.class);
		additionalInfo.setBusinessId(businessEntityAndConfigVO.getId());
		additionalService.insertOrUpdateUserAdditionalInfo(additionalInfo);
		
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		additionalInfo = new AdditionalInfo();
		additionalInfo.setRelatedpersonChoice(this.getStrParameter("relatedperson_choice"));
		additionalInfo.setRelatedpersonName(this.getStrParameter("relatedperson_name"));
		additionalInfo.setRelatedpersonAccount(this.getStrParameter("relatedperson_account"));
		additionalInfo.setShareholderChoice(this.getStrParameter("shareholder_choice"));
		additionalInfo.setRestrictedstockChoice(this.getStrParameter("restrictedstock_choice"));
		additionalInfo.setRestrictedstocklist(this.getStrParameter("restrictedstockList"));
		additionalInfo.setCouponsType(this.getStrParameter("coupons_type"));
		additionalInfo.setEntrustType(this.getStrParameter("entrust_type"));
		additionalInfo.setPubliccompanyChoice(this.getStrParameter("publiccompany_choice"));
		additionalInfo.setPubliccompanyName(this.getStrParameter("publiccompany_name"));
	}
	
	private void checkInput()
	{
		if (StringUtils.isBlank(additionalInfo.getRelatedpersonChoice()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_RELATEDPERSONCHOICE, "关联人信息声明选择结果为空");
		}
		if (DictionaryConstants.BOL_TRUE.equals(additionalInfo.getRelatedpersonChoice()))
		{
			if (StringUtils.isBlank(additionalInfo.getRelatedpersonName()))
			{
				throw new BusinessException(ErrorCodeCheckInput.BLANK_RELATEDPERSONNAME, "关联人姓名不能为空");
			}
			
			if (StringUtils.isBlank(additionalInfo.getRelatedpersonAccount()))
			{
				throw new BusinessException(ErrorCodeCheckInput.BLANK_RELATEDPERSONACCOUNT, "关联人账户号不能为空");
			}
		}
		if (StringUtils.isBlank(additionalInfo.getShareholderChoice()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_SHAREHOLDERCHOICE, "是否为本证券公司的股东、关联人选择结果不能为空");
		}
		if (StringUtils.isBlank(additionalInfo.getPubliccompanyChoice()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_PUBLICCOMPANYCHOICE, "是否为持有上市公司股份5%以上的股东选择结果不能为空");
		}
		if (DictionaryConstants.BOL_TRUE.equals(additionalInfo.getPubliccompanyChoice()) && StringUtils.isBlank(additionalInfo.getPubliccompanyName()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_PUBLICCOMPANYNAME, "持股5%上市公司名称不能为空");
		}
		if (StringUtils.isBlank(additionalInfo.getRestrictedstockChoice()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_RESTRICTEDSTOCKCHOICE, "是否持有限售股选择结果不能为空");
		}
		if (DictionaryConstants.BOL_TRUE.equals(additionalInfo.getRestrictedstockChoice()) && StringUtils.isBlank(additionalInfo.getRestrictedstocklist()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_RESTRICTEDSTOCKLIST, "限售股列表不能为空");
		}
		if (StringUtils.isBlank(additionalInfo.getCouponsType()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_COUPONSTYPE, "还券方式不能为空");
		}
		if (StringUtils.isBlank(additionalInfo.getEntrustType()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_ENTRUSTTYPE, "委托方式不能为空");
		}
	}
}
