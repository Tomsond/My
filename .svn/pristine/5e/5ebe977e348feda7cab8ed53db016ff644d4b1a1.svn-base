package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.FlowNodeDao;
import com.thinkive.fxc.ismp.bus.base.business.model.FlowNodeModel;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 业务办理流程节点记录表(T_ISMP_FLOW_NODE)数据层接口实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0 
 * @创建时间: 2016年8月15日 上午10:27:07
 */
public class FlowNodeDaoImpl extends ISMPBaseDao implements FlowNodeDao
{
	
	@Override
	public FlowNodeModel add(FlowNodeModel stepModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_FLOW_NODE);
		stepModel.setId(Long.valueOf(id));
		stepModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BusinessTableConstants.T_ISMP_FLOW_NODE, stepModel);
		return stepModel;
	}
	
	@Override
	public FlowNodeModel add(FlowNodeModel stepModel, Session session) throws Exception
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_FLOW_NODE);
		stepModel.setId(Long.valueOf(id));
		stepModel.setCreateDate(new Date());
		session.insert(BusinessTableConstants.T_ISMP_FLOW_NODE, stepModel);
		return stepModel;
	}
	
	@Override
	public int update(FlowNodeModel flowNodeModel)
	{
		Long businessId = flowNodeModel.getBusinessId();
		String nodeId = flowNodeModel.getNodeId();
		//如果入参business_id和stkStep有一个为空，则不执行数据库，直接返回
		if (null == businessId || StringUtils.isBlank(nodeId))
		{
			return 0;
		}
		flowNodeModel.setUpdateDate(new Date());
		String[] identifys = { "BUSINESS_ID", "NODE_ID" };
		String[] identifyValues = { businessId.toString(), nodeId };
		return this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_FLOW_NODE, flowNodeModel, identifys, identifyValues);
	}
	
	@Override
	public int update(FlowNodeModel flowNodeModel, Session session)
	{
		Long businessId = flowNodeModel.getBusinessId();
		String nodeId = flowNodeModel.getNodeId();
		flowNodeModel.setUpdateDate(new Date());
		String[] identifys = { "BUSINESS_ID", "NODE_ID" };
		String[] identifyValues = { businessId.toString(), nodeId };
		return session.update(BusinessTableConstants.T_ISMP_FLOW_NODE, flowNodeModel, identifys, identifyValues);
	}
	
	@Override
	public FlowNodeModel queryByBusinessIdAndNodeId(Long businessId, String nodeId)
	{
		if (null == businessId || StringUtils.isBlank(nodeId))
		{
			return null;
		}
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID,BUSINESS_ID,NODE_ID,IP FROM ");
		sql.append(BusinessTableConstants.T_ISMP_FLOW_NODE).append(" WHERE BUSINESS_ID = ? AND NODE_ID = ?");
		DataRow queryResult = getJdbcTemplate().queryMap(sql.toString(), new Object[] { businessId, nodeId });
		return ModelUtil.packInfo(queryResult, FlowNodeModel.class);
	}

    @SuppressWarnings("unchecked")
    @Override
    public List<FlowNodeModel> queryByBusinessId(Long businessId)
    {
        if (null == businessId)
        {
            return null;
        }
        StringBuilder sql = new StringBuilder();
        sql.append("SELECT ID,BUSINESS_ID,NODE_ID,IP FROM ");
        sql.append(BusinessTableConstants.T_ISMP_FLOW_NODE).append(" WHERE BUSINESS_ID = ?");
        List<DataRow> queryResult = getJdbcTemplate().query(sql.toString(), new Object[] { businessId});
        return ModelUtil.packList(queryResult, FlowNodeModel.class);
    }
}
