package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.jdbc.DBPage;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.BusinessEntityDao;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.vo.BusinessEntityAndConfigVO;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 业务办理实例表(T_ISMP_BUSINESS_ENTITY) 数据访问层 实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 尹杰民
 * @版本: 2.0 
 * @创建时间: 2016年8月15日 下午4:23:06
 */
public class BusinessEntityDaoImpl extends ISMPBaseDao implements BusinessEntityDao
{
	
	@Override
	public BusinessEntityModel add(BusinessEntityModel businessEntityModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_BUSINESS_ENTITY);
		businessEntityModel.setId(Long.valueOf(id));
		businessEntityModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY, businessEntityModel);
		return businessEntityModel;
	}
	
	@Override
	public BusinessEntityModel add(BusinessEntityModel businessEntityModel, Session session) throws Exception
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_BUSINESS_ENTITY);
		businessEntityModel.setId(Long.valueOf(id));
		businessEntityModel.setCreateDate(new Date());
		session.insert(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY, businessEntityModel);
		return businessEntityModel;
	}
	
	@Override
	public int update(BusinessEntityModel businessEntityModel)
	{
		businessEntityModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY, businessEntityModel, "ID", businessEntityModel.getId());
	}
	
	@Override
	public int update(BusinessEntityModel businessEntityModel, Session session) throws Exception
	{
		businessEntityModel.setUpdateDate(new Date());
		return session.update(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY, businessEntityModel, "ID", businessEntityModel.getId());
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public List<BusinessEntityModel> queryByParams(Long userId, String businessCode, String iscomplete)
	{
		StringBuilder sql = new StringBuilder();
		List<String> params = new ArrayList<String>();
		sql.append("SELECT ID, USER_ID, BUSINESS_CODE, NODE_ID, ISCOMPLETE, DEAL_RESULT, OP_SOURCE");
		sql.append(", OP_STATION, IP, CREATE_DATE, UPDATE_DATE,DESCRIPTION  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY).append(" WHERE 1 = 1 ");
		if (null != userId)
		{
			sql.append(" AND USER_ID = ?");
			params.add(userId.toString());
		}
		if (StringUtils.isNotBlank(businessCode))
		{
			sql.append(" AND BUSINESS_CODE = ?");
			params.add(businessCode);
		}
		if (StringUtils.isNotBlank(iscomplete))
		{
			sql.append(" AND ISCOMPLETE = ?");
			params.add(iscomplete);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), params.toArray());
		return ModelUtil.packList(queryResult, BusinessEntityModel.class);
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public List<BusinessEntityModel> queryByParams(Long userId,Long businessId, String businessCode, String iscomplete)
	{
		StringBuilder sql = new StringBuilder();
		List<String> params = new ArrayList<String>();
		sql.append("SELECT ID, USER_ID, BUSINESS_CODE, NODE_ID, ISCOMPLETE, DEAL_RESULT, OP_SOURCE");
		sql.append(", OP_STATION, IP, CREATE_DATE, UPDATE_DATE,DESCRIPTION  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY).append(" WHERE 1 = 1 ");
		if (null != userId)
		{
			sql.append(" AND USER_ID = ?");
			params.add(userId.toString());
		}
		if (StringUtils.isNotBlank(businessCode))
		{
			sql.append(" AND BUSINESS_CODE = ?");
			params.add(businessCode);
		}
		
		if (StringUtils.isNotBlank(String.valueOf(businessId)))
		{
			sql.append(" AND id= ?");
			params.add(String.valueOf(businessId));
		}
		if (StringUtils.isNotBlank(iscomplete))
		{
			sql.append(" AND ISCOMPLETE = ?");
			params.add(iscomplete);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), params.toArray());
		return ModelUtil.packList(queryResult, BusinessEntityModel.class);
	}
	
	
	@Override
	public BusinessEntityAndConfigVO queryEacVoNotCompleteByUserIdAndBusinessCode(long userId, String businessCode)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT BF.ID, BF.USER_ID, BF.BUSINESS_CODE, BF.NODE_ID, BF.ISCOMPLETE, BF.DEAL_RESULT,BF.DESCRIPTION, BF.OP_SOURCE,BC.BTYPE_ID,BC.NEED_AUDIT,BC.DATA_SUBMITTYPE,BC.BREAKPOINT_OPERATION,BC.RESET_FLOW, BF.CREATE_DATE, BF.UPDATE_DATE  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY);
		sql.append(" BF LEFT JOIN ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_CONFIG);
		sql.append(" BC ON BF.BUSINESS_CODE = BC.BUSINESS_CODE AND BF.OP_SOURCE = BC.OP_SOURCE ");
		sql.append(" WHERE BF.USER_ID = ? AND BF.BUSINESS_CODE = ? AND BF.ISCOMPLETE = ?");
		DataRow businessEntityModel = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { userId, businessCode, DictionaryConstants.BOL_FALSE });
		return ModelUtil.packInfo(businessEntityModel, BusinessEntityAndConfigVO.class);
	}
	
	@Override
	public BusinessEntityModel querNotCompleteByUserIdAndBusinessCode(long userId, String businessCode)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID, USER_ID, BUSINESS_CODE, NODE_ID, ISCOMPLETE, DEAL_RESULT, OP_SOURCE, CREATE_DATE, UPDATE_DATE,DESCRIPTION  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY);
		sql.append(" WHERE USER_ID = ? AND  BUSINESS_CODE = ? AND ISCOMPLETE = ?");
		DataRow businessEntityModel = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { userId, businessCode, DictionaryConstants.BOL_FALSE });
		return ModelUtil.packInfo(businessEntityModel, BusinessEntityModel.class);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DataRow> queryBusinessDetail(Long businessId, String businessCode, Long userId)
	{
		List<String> paramLists = new ArrayList<String>();
		String extendTableName = BusinessConstants.MAP_B_BUSINESS_DETAIL_TABLE.get(businessCode);
		StringBuilder sql = new StringBuilder();
		sql.append(" SELECT BE.*, BE.ID BUSINESSS_ID, BA.*, EX.* FROM T_ISMP_BUSINESS_ENTITY BE LEFT JOIN T_ISMP_CHOICE_ACCOUNT_RECORD BA ON BE.ID=BA.BUSINESS_ID ");
		if (StringUtils.isNotBlank(extendTableName))
		{
			sql.append(" LEFT JOIN ").append(extendTableName);
			sql.append(" EX ON BE.ID = EX.BUSINESSS_ID");
		}
		sql.append(" WHERE 1 = 1 ");
		if (null != businessId)
		{
			sql.append(" AND BE.ID = ? ");
			paramLists.add(businessId.toString());
		}
		if (StringUtils.isNotBlank(businessCode))
		{
			sql.append(" AND BE.BUSINESS_CODE = ? ");
			paramLists.add(businessCode);
		}
		if (null != userId)
		{
			sql.append(" AND BE.USER_ID = ? ");
			paramLists.add(userId.toString());
		}
		return this.getJdbcTemplate().query(sql.toString(), paramLists.toArray());
	}
	
	@Override
	public DBPage queryPageByParams(DataRow queryParam, int curPage, int numPerPage)
	{
		String userId = queryParam.getString("userId");
		String businessCode = queryParam.getString("businessCode");
		String businessId = queryParam.getString("businessId");
		String dealResult = queryParam.getString("dealResult");
		String isComplete = queryParam.getString("iscomplete");
		List<String> paramList = new ArrayList<String>();
		StringBuilder sql = new StringBuilder();
		sql.append(" SELECT T.*,B.BUSINESS_NAME,C.BUSINESS_ID HASDETAIL,B.BUSINESS_URL,B.MIMG_URL,B.IMG_URL  FROM T_ISMP_BUSINESS_ENTITY T ");
		sql.append(" LEFT JOIN T_ISMP_BUSINESS_INFO B ON T.BUSINESS_CODE=B.BUSINESS_CODE ");
		sql.append(" LEFT JOIN ( SELECT BUSINESS_ID FROM T_ISMP_CHOICE_ACCOUNT_RECORD GROUP BY BUSINESS_ID ) C ");
		sql.append(" ON T.ID = C.BUSINESS_ID  WHERE 1=1 ");
		if (!StringHelper.isBlank(userId))
		{
			sql.append(" AND T.USER_ID = ?");
			paramList.add(userId);
		}
		if (!StringHelper.isBlank(businessCode))
		{
			sql.append(" AND T.BUSINESS_CODE = ?");
			paramList.add(businessCode);
		}
		if (!StringHelper.isBlank(businessId))
		{
			sql.append(" and T.ID = ?");
			paramList.add(businessId);
		}
		if (!StringHelper.isBlank(dealResult))
		{
			sql.append(" and T.DEAL_RESULT = ?");
			paramList.add(dealResult);
		}
		if (!StringHelper.isBlank(isComplete))
		{
			sql.append(" and T.ISCOMPLETE = ?");
			paramList.add(isComplete);
		}
		sql.append(" ORDER BY T.UPDATE_DATE DESC");
		return getJdbcTemplate().queryPage(sql.toString(), paramList.toArray(), curPage, numPerPage);
	}
	
	@Override
	public BusinessEntityModel queryByUserIdAndBusinessId(Long userId, Long businessId)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID, USER_ID, BUSINESS_CODE, NODE_ID, ISCOMPLETE, DEAL_RESULT, OP_SOURCE");
		sql.append(", OP_STATION, IP, CREATE_DATE, UPDATE_DATE,DESCRIPTION  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY).append(" WHERE USER_ID = ? AND ID = ?");
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { userId, businessId });
		return ModelUtil.packInfo(queryResult, BusinessEntityModel.class);
	}
	
	@Override
    public BusinessEntityModel querNotCompleteByUserIdAndBusinessCodeOrFlag(long userId, String businessCode, String flag)
    {
        StringBuilder sql = new StringBuilder();
        sql.append("SELECT ID, USER_ID, BUSINESS_CODE, NODE_ID, ISCOMPLETE, DEAL_RESULT, OP_SOURCE, CREATE_DATE, UPDATE_DATE,DESCRIPTION  FROM ");
        sql.append(BusinessTableConstants.T_ISMP_BUSINESS_ENTITY);
        sql.append(" WHERE USER_ID = ? AND  BUSINESS_CODE = ? AND ISCOMPLETE = ?");
        if(StringHelper.isNotEmpty(flag))
        {
            sql.append(" AND FLAG = ?");
            DataRow businessEntityModel = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { userId, businessCode, DictionaryConstants.BOL_FALSE, flag });
            return ModelUtil.packInfo(businessEntityModel, BusinessEntityModel.class);
        }
        DataRow businessEntityModel = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { userId, businessCode, DictionaryConstants.BOL_FALSE });
        return ModelUtil.packInfo(businessEntityModel, BusinessEntityModel.class);
    }
	
	@Override
    public DataRow queryBusinessName(String business_code)
    {
        StringBuilder sql = new StringBuilder();
        DataRow queryResult =new DataRow();
        sql.append("SELECT BUSINESS.ID,BUSINESS.BUSINESS_CODE,BUSINESS.BUSINESS_NAME FROM    ");
        sql.append(BusinessTableConstants.T_ISMP_BUSINESS_INFO);
        if(StringHelper.isEmpty(business_code)){
            return queryResult;
        }
        sql.append(" BUSINESS  WHERE BUSINESS.BUSINESS_CODE=? ");
        queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] {business_code});
        return queryResult;
    }
	
}
