package com.thinkive.fxc.ismp.bus.business.service.impl;

import java.util.Date;
import java.util.List;

import com.thinkive.base.jdbc.session.Session;
import com.thinkive.fxc.ismp.bus.base.business.dao.BusinessEntityDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.FlowNodeDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.NodeLogDao;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.FlowNodeModel;
import com.thinkive.fxc.ismp.bus.base.business.model.NodeLogModel;
import com.thinkive.fxc.ismp.bus.business.service.BusinessCommonService;

/**
 * @描述: 业务公用服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月29日 下午6:30:35
 */
public class BusinessCommonServiceImpl implements BusinessCommonService
{
	
	protected BusinessEntityDao businessEntityDao;
	
	protected FlowNodeDao flowNodeDao;
	
	protected NodeLogDao nodeLogDao;
	
	public void setBusinessEntityDao(BusinessEntityDao businessEntityDao)
	{
		this.businessEntityDao = businessEntityDao;
	}
	
	public void setFlowNodeDao(FlowNodeDao flowNodeDao)
	{
		this.flowNodeDao = flowNodeDao;
	}
	
	public void setNodeLogDao(NodeLogDao nodeLogDao)
	{
		this.nodeLogDao = nodeLogDao;
	}
	
	@Override
	public FlowNodeModel addFlowNodeModel(Long businessId, String nodeId, String ip, String opSource, String opStation, Session session) throws Exception
	{
		FlowNodeModel newFlowNodeModel = new FlowNodeModel();
		newFlowNodeModel.setBusinessId(businessId);
		newFlowNodeModel.setNodeId(nodeId);
		newFlowNodeModel.setIp(ip);
		newFlowNodeModel.setOpSource(opSource);
		newFlowNodeModel.setOpStation(opStation);
		return flowNodeDao.add(newFlowNodeModel, session);
	}
	
	@Override
	public NodeLogModel addNodeLogModel(Long businessId, String nodeId, String ip, String opSource, String opStation, Session session) throws Exception
	{
		NodeLogModel nodeLogModel = new NodeLogModel();
		nodeLogModel.setBusinessId(businessId);
		nodeLogModel.setNodeId(nodeId);
		nodeLogModel.setIp(ip);
		nodeLogModel.setOpSource(opSource);
		nodeLogModel.setOpStation(opStation);
		nodeLogModel.setCreateDate(new Date());
		return nodeLogDao.add(nodeLogModel, session);
	}
	
	@Override
	public BusinessEntityModel addBusinessEntityModel(BusinessEntityModel businessEntityModel, Session session) throws Exception
	{
		List<BusinessEntityModel> businessentitymodel=businessEntityDao.queryByParams(businessEntityModel.getUserId(),businessEntityModel.getId(), businessEntityModel.getBusinessCode(), "0");
		if(businessentitymodel!=null&&businessentitymodel.size()>0){
			businessEntityDao.update(businessEntityModel, session);
			return businessEntityModel;
		}else{
			return businessEntityDao.add(businessEntityModel, session);
		}
	}
	
	@Override
	public FlowNodeModel addOrUpdateFlowNodeModel(Long businessId, String nodeId, String ip, String opSource, String opStation, Session session) throws Exception
	{
		FlowNodeModel newFlowNodeModel = new FlowNodeModel();
		newFlowNodeModel.setBusinessId(businessId);
		newFlowNodeModel.setNodeId(nodeId);
		newFlowNodeModel.setIp(ip);
		newFlowNodeModel.setOpSource(opSource);
		newFlowNodeModel.setOpStation(opStation);
		int total = flowNodeDao.update(newFlowNodeModel, session);
		if (total < 1)
		{
			newFlowNodeModel.remove("update_date");
			flowNodeDao.add(newFlowNodeModel);
		}
		return newFlowNodeModel;
	}
	
	@Override
	public int updateBusinessEntityModel(BusinessEntityModel businessEntityModel, Session session) throws Exception
	{
		return businessEntityDao.update(businessEntityModel, session);
	}
	
}
