package com.thinkive.fxc.ismp.bus.base.business.function;

import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.NodePropertyConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BprocNodeConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.NodePropertyConfigService;
import com.thinkive.fxc.ismp.bus.base.business.vo.BprocNodeConfigAndDefineVO;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.server.ResultVo;

/**
 * @描述: 根据用户编号和业务编号，查询用户正在办理的业务实例信息
 *       1.根据用户编号和业务编号获取正在办理的业务实例
 *       2.如果业务实例不存在，查询业务第一步节点配置
 *       3.如果业务实例存在，切当前节点不是finish，查询当前节点配置
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月26日 下午12:21:22
 */
public class Function1004900 extends ISMPBaseFunction
{
	
	private long userId;//用户编号
	
	private String businessCode;//业务编号
	
	private String opSource;//客户端类型
	
	private String needQueryEntity;//是否需要查询业务办理实例
	
	private String nodeId;//节点标识
	
	private String flag;
	
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		
		ResultVo resultVo = new ResultVo();
		
		//获取业务实例
		if (DictionaryConstants.BOL_TRUE.equals(needQueryEntity))
		{
			BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
			BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCodeOrFlag(userId, businessCode, flag);
			if (StringUtils.isBlank(nodeId) && businessEntityModel != null)
			{
				nodeId = businessEntityModel.getNodeId();
			}
			if (businessEntityModel == null)
			{
				businessEntityModel = new BusinessEntityModel();
				businessEntityModel.set("query_flag", DictionaryConstants.BOL_FALSE);
			}
			else
			{
				businessEntityModel.set("query_flag", DictionaryConstants.BOL_TRUE);
			}
			resultVo.setResult("businessEntityModel", businessEntityModel);
		}
		//查询业务配置项
		BusinessConfigService businessConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSCONFIG, BusinessConfigService.class);
		BusinessConfigModel businessConfigModel = businessConfigService.queryByOpSourceAndBusinessCode(businessCode, opSource);
		resultVo.setResult("businessConfigModel", businessConfigModel);
		
		//如果业务配置
		if (businessConfigModel == null)
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_CONFIG_ERROR);
		}
		
		//查询业务流程节点配置
		BprocNodeConfigAndDefineVO bprocNodeConfigAndDefineVO = null;
		BprocNodeConfigService bprocNodeConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BPROCNODECONFIG, BprocNodeConfigService.class);
		
		//如果没有数据,根据上一步（start）查询第一步节点配置
		if (StringUtils.isBlank(nodeId))
		{
			bprocNodeConfigAndDefineVO = bprocNodeConfigService.queryNadVoByBtypeIdAndPreNodeId(businessConfigModel.getBtypeId(), DictionaryConstants.FLOW_FIRSTSTEP_PRENODE);
			resultVo.setResult("bprocNodeConfigAndDefineVO", bprocNodeConfigAndDefineVO);
		}
		else
		{
			bprocNodeConfigAndDefineVO = bprocNodeConfigService.queryNadVoByBtypeIdAndNodeId(businessConfigModel.getBtypeId(), nodeId);
		}
		
		resultVo.setResult("bprocNodeConfigAndDefineVO", bprocNodeConfigAndDefineVO);
		
		//根据当前节点标识和流程编号查询节点属性
		if (bprocNodeConfigAndDefineVO != null && StringUtils.isNotBlank(bprocNodeConfigAndDefineVO.getNodeType()))
		{
			NodePropertyConfigService nodePropertyConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_NODEPROPERTYCONFIG, NodePropertyConfigService.class);
			List<NodePropertyConfigModel> nodePropertyConfigModelList = nodePropertyConfigService.queryByNodeIdAndState(bprocNodeConfigAndDefineVO.getNodeId(), DictionaryConstants.BOL_TRUE);
			resultVo.setResult("nodePropertyConfigModelList", nodePropertyConfigModelList);
		}
		resultVo.setResult("defaultDate", new DataRow());
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		businessCode = this.getAndCheckBlankStrParam("businessCode", ErrorCodeCheckInput.BLANK_BUSINESSCODE);
		opSource = this.getAndCheckBlankStrParam("op_source", ErrorCodeCheckInput.BLANK_OP_SOURCE);
		needQueryEntity = this.getStrParameter("needQueryEntity", DictionaryConstants.BOL_TRUE);
		nodeId = this.getStrParameter("nodeId");
		flag = this.getStrParameter("flag");
	}
}
