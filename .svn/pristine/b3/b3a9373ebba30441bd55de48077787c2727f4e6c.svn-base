/**
 * 
 */
package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.StringUtil;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.LinkmanRecordDao;
import com.thinkive.fxc.ismp.bus.base.business.model.LinkmanRecordModel;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 紧急联系人修改记录表(t_ismp_linkman_record) DAO 实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 尹杰民
 * @版本: 2.0 
 * @创建时间: 2016年8月16日 下午2:25:47
 */
public class LinkmanRecordDaoImpl extends ISMPBaseDao implements LinkmanRecordDao
{
	
	@Override
	public LinkmanRecordModel add(LinkmanRecordModel emergencyLinkmanRecordModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_LINKMAN_RECORD);
		emergencyLinkmanRecordModel.setId(Long.valueOf(id));
		emergencyLinkmanRecordModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BusinessTableConstants.T_ISMP_LINKMAN_RECORD, emergencyLinkmanRecordModel);
		return emergencyLinkmanRecordModel;
	}
	
	@Override
	public int update(LinkmanRecordModel emergencyLinkmanRecordModel)
	{
		Long id = emergencyLinkmanRecordModel.getId();
		String user_id = emergencyLinkmanRecordModel.getUserId();
		Long linkmanId = emergencyLinkmanRecordModel.getLinkmanId();
		if (null == id || null == linkmanId)
		{
			return 0;
		}
		emergencyLinkmanRecordModel.setUpdateDate(new Date());
		String[] identifys = { "USER_ID", "LINKMAN_ID" };
		String[] identifyValues = { user_id, linkmanId.toString() };
		emergencyLinkmanRecordModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_LINKMAN_RECORD, emergencyLinkmanRecordModel, identifys, identifyValues);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<LinkmanRecordModel> queryByParams(Long businessId, String nodeId)
	{
		StringBuilder sql = new StringBuilder();
		List<String> paramsList = new ArrayList<String>();
		sql.append("SELECT ID, BUSINESS_ID, NODE_ID, LINKMAN_ID, LINKMAN_NAME, LINKMAN_RELATION, LINKMAN_TEL");
		sql.append(" ,LINKMAN_ADRESS, LINKMAN_MOBILE, LINKMAN_EMAIL, LINKMAN_IDTYPE, LINKMAN_POSTCODE, LINKMAN_IDNO, LINKMAN_SEX, OPRETION_TYPE,  CREATE_DATE, UPDATE_DATE ");
		sql.append("  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_LINKMAN_RECORD).append(" WHERE 1=1 ");
		if (null != businessId)
		{
			sql.append(" AND BUSINESS_ID = ?");
			paramsList.add(businessId.toString());
		}
		
		if (StringUtil.isNotEmpty(nodeId))
		{
			sql.append(" AND NODE_ID = ?");
			paramsList.add(nodeId);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), paramsList.toArray());
		return ModelUtil.packList(queryResult, LinkmanRecordModel.class);
	}
	
}
