package com.thinkive.fxc.ismp.bus.base.basicdata.dao.impl;

import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BaseTableConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.BankInfoDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.BankInfoModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.ThirdBankInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 公共-银行信息表(T_FXC_BANK_INFO)数据层接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月19日 下午3:06:53
 */
public class BankInfoDaoImpl extends ISMPBaseDao implements BankInfoDao
{
	
	@SuppressWarnings("unchecked")
	@Override
	public List<BankInfoModel> queryAll()
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID,BANK_NO,BANK_NAME,BANK_FULL_NAME,BRIEF,SMALLIMG,BIGIMG,BGIMG,BANK_SMALL_URL,THIRD_BANK_URL,ORDER_LINE FROM ");
		sql.append(BaseTableConstants.T_FXC_BANK_INFO);
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString());
		return ModelUtil.packList(queryResult, BankInfoModel.class);
	}
	
	@Override
	public BankInfoModel queryByBankNo(String bankNo)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID,BANK_NO,BANK_NAME,BANK_FULL_NAME,BRIEF,SMALLIMG,BIGIMG,BGIMG,BANK_SMALL_URL,THIRD_BANK_URL,ORDER_LINE FROM ");
		sql.append(BaseTableConstants.T_FXC_BANK_INFO);
		sql.append(" WHERE BANK_NO = ?");
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { bankNo });
		return ModelUtil.packInfo(queryResult, BankInfoModel.class);
	}
	
	@Override
	public ThirdBankInfoVo queryVoByLinkBankOrg(String linkBankOrg)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT TB.ID THIRD_BANK_ID,BI.BANK_NO,BI.BANK_NAME,BI.BANK_FULL_NAME,BI.BRIEF,BI.SMALLIMG,BI.BIGIMG,BI.BGIMG,BI.BANK_SMALL_URL,BI.THIRD_BANK_URL,BI.ORDER_LINE FROM ");
		sql.append(BaseTableConstants.T_FXC_BANK_INFO);
		sql.append(" BI LEFT JOIN ");
		sql.append(BaseTableConstants.T_FXC_THIRD_BANK);
		sql.append(" TB ON BI.BANK_NO = TB.BANK_NO ");
		sql.append(" WHERE TB.LINK_BANK_ORG = ? ");
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { linkBankOrg });
		return ModelUtil.packInfo(queryResult, ThirdBankInfoVo.class);
	}
	
	@Override
	public BankInfoModel queryByThirdBankConfigId(Long bankConfigId)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT BI.ID,BI.BANK_NO,BI.BANK_NAME,BI.BANK_FULL_NAME,BI.BRIEF,BI.SMALLIMG,BI.BIGIMG,BI.BGIMG,BI.BANK_SMALL_URL,BI.THIRD_BANK_URL,BI.ORDER_LINE FROM ");
		sql.append(BaseTableConstants.T_FXC_THIRD_BANK);
		sql.append(" TB INNER JOIN  ");
		sql.append(BaseTableConstants.T_FXC_BANK_INFO);
		sql.append(" BI ON TB.BANK_NO=BI.BANK_NO ");
		sql.append(" WHERE TB.ID = ? ");
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { bankConfigId });
		return ModelUtil.packInfo(queryResult, BankInfoModel.class);
	}
}
