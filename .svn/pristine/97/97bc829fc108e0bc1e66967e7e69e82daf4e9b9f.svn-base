package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.function;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankContants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.ThirdBankService;
import com.thinkive.server.ResultVo;

/**
 * @描述: 确认完成三方存管修改业务中，取消成功但绑定失败的业务办理数据
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月1日 下午4:38:49
 */
public class Function1004493 extends ISMPBaseFunction
{
	
	@Override
	public ResultVo execute() throws Exception
	{
		//step1:获取入参并校验
		Long businessId = Long.valueOf(this.getAndCheckBlankStrParam("business_id", ErrorCodeCheckInput.BLANK_BUSINESSID));
		
		//step2:确认完成失败数据
		ThirdBankService thirdBankService = SpringHelper.getBean(ThirdBankContants.SERVICE_ID_THIRDBANK, ThirdBankService.class);
		Integer total = thirdBankService.completeCancelBindErrorInfo(businessId);
		if (1 != total)
		{
			throw new BusinessException(ThirdBankErrorCode.COMPLETE_CANCEL_BIND_FAILURE);
		}
		
		//step3:打包出参
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
}
