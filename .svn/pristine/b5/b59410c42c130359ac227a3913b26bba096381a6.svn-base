package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.function;

import java.util.Date;
import java.util.List;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.DateHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 根据资金帐号和交易密码，校验三方存管银行操作条件是否满足(中邮实现)
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月1日 下午5:25:58
 */
public class Function1004494 extends ISMPBaseFunction
{
    
    private String fundAccount; //资金帐号
                                
    private String password;   //交易密码
                                
    @Override
    public ResultVo execute() throws Exception
    {
        //step1:获取入参并校验
        checkInput();
        
        //step2:帐号密码校验
        ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE,
                ThirdInterface.class);
        DataRow loginResult = thirdInterface.checkLogin(fundAccount, password,
                ThirdTBASConstants.LOGIN_TYPE_CAPITALACCOUNT,opStation);
        if ( !loginResult.getBoolean("loginflag") )
        {
            throw new BusinessException(ThirdBankErrorCode.VALIdate_ACCOUNT_PASSWORD_FAILURE,
                    loginResult.getString("msg"));
        }
        
        //step3:查询证券委托交易记录,判断是否有今天的记录
        DataRow thirdInput = new DataRow();
        thirdInput.set("client_id", loginResult.getString("client_id"));
        thirdInput.set("account", fundAccount);
        thirdInput.set("password", password);
        thirdInput.set("org_id", loginResult.getString("org_id"));
        List<DataRow> stockEntrustRecord = thirdInterface.queryStockEntrustRecord(thirdInput);
        String nowDate = DateHelper.formatDate(new Date(), "yyyyMMdd");
        for (DataRow item : stockEntrustRecord)
        {
            if ( nowDate.equals(item.getString("entrust_date")) )
            {
                throw new InvokeException("当日账户有委托交易，请于次1工作日进行存管预销户", 98);
            }
        }
        
        //step4:查询用户资产
        thirdInput.set("account_type", ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
        thirdInput.set("moneytype", ThirdInterfaceConstant.MONEY_TYPE_RMB); //货币类型 0：人民币
        String account = thirdInput.getString("account");
        thirdInput.remove("account");
        List<DataRow> assetList = thirdInterface.getAssetInfo(thirdInput);
        thirdInput.set("account", account);
        DataRow assetInfo = assetList.get(0);
        Double fundbal = assetInfo.getDouble("fundbal");//资金余额
        Double integral_balance = assetInfo.getDouble("integral_balance");//利息基数
        if ( fundbal != 0 || integral_balance != 0 )
        {
            throw new BusinessException(ThirdBankErrorCode.ZJYE_LXJS_MORETHAN_ZERO);
        }
        
        //step5：打包出参
        ResultVo resultVo = new ResultVo();
        resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
        resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
        return resultVo;
    }
    
    private void checkInput() throws InvokeException
    {
        password = this.getAndCheckBlankStrParam("password", ErrorCodeCheckInput.BALNK_PASSWORD);
        fundAccount = this.getAndCheckBlankStrParam("fund_account", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
    }
}
