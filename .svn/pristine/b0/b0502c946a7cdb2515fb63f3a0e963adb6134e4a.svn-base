package com.thinkive.fxc.ismp.bus.business.jg.function;

import java.util.ArrayList;
import java.util.List;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;
import com.thinkive.server.ResultVo;

/**
 * @描述: 获取可以加挂的股东帐号数据
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2017年3月14日 下午2:41:55
 */
public class Function1004469 extends ISMPBaseFunction
{
	
	private ThirdTrdAccountService thirdTrdAccountService;
	
	private Long userId;
	
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		ResultVo resultVo = new ResultVo();
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);

		//1.是否是重点监控名单之内的
		DataRow input = new DataRow();
		input.set("name",userInfoVo.getName());
		input.set("identity_num",userInfoVo.getIdentityNum());
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		thirdInterface.queryUserInfoByAccount(input);

		//校验是否为中登时间
		TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
		if (!tradeTimeService.checkZdTradeTime())
		{
			throw new BusinessException(ErrorCodeSystem.IS_NOT_TRADE_TIME);
		}


		
		String hasAccount = DictionaryConstants.BOL_FALSE;
		//查询柜台和中登股东帐号，获取未加挂的深A帐号,不传查询深A和沪A
//		String sktbd = ThirdInterfaceConstant.STKBD_SZA;
//		String trdacct_excls = ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD;

		thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> jgAccountList = thirdTrdAccountService.queryThirdTraAccount("", "", userInfoVo, ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GTANDZD);

		List<DataRow> accountList = new ArrayList<DataRow>();

		for (int i = 0; i < jgAccountList.size(); i++)
		{

			//过滤非深A和非沪A的股东户,后期如果需要取深基金沪基金去掉以下代码
			if(ThirdTBASConstants.STKBD_TYPE_SAG.equals(jgAccountList.get(i).get("trdacct_type"))&&ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(jgAccountList.get(i).get("state"))){
				accountList.add(jgAccountList.get(i));
				hasAccount = DictionaryConstants.BOL_TRUE;
			}
		}

		// 过滤掉已经注销的账号
		for (int i = 0; i < jgAccountList.size(); i++)
		{
			//过滤非深A和非沪A的股东户,后期如果需要取深基金沪基金去掉以下代码
			if(ThirdTBASConstants.STKBD_TYPE_HAG.equals(jgAccountList.get(i).get("trdacct_type"))&&ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(jgAccountList.get(i).get("state"))){
				accountList.add(jgAccountList.get(i));
				hasAccount = DictionaryConstants.BOL_TRUE;
			}
		}


		
		//查询数据库有没有正在办理的业务，如果为空说明没有正在办理的业务，直接查询柜台所有账号数据及其指定状态
		//出参
		DataRow result = new DataRow();
		result.set("hasAccount", hasAccount);
		resultVo.setResult("otherInfo", result);
		resultVo.setResult("accountList", accountList);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
	}
	
}
