package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.JsonHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.AgreeMentService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.AgreementInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.AgreeNodePropertyConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.AgreeRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.AgreeRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.CertCofferTBASSService;
import com.thinkive.fxc.ismp.bus.base.business.service.CertManageService;
import com.thinkive.fxc.ismp.bus.base.business.service.CertTBASService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.constants.CertConstants;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.gateway.v2.result.Result;
import com.thinkive.server.InvokeException;

/**
 * @描述: 签名验签服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月29日 下午10:14:33
 */
public class SignAndVerifyServiceImpl implements SignAndVerifyService
{
	
	private static final String VERIFY_TYPE_SINGLE = "0"; //单个验签
	
	private static final String VERIFY_TYPE_BATCH = "1"; //批量验签
	
	public static Logger logger = Logger.getLogger(SignAndVerifyServiceImpl.class);
	
	@Override
	@SuppressWarnings("rawtypes")
	public List<DataRow> verify(String sign_source_flag, List signList, String certuid, String cert_type, String checksign) throws Exception
	{
		List<DataRow> resultsList = new ArrayList<DataRow>();
		String verify_type = Configuration.getString("cert.verify_type", VERIFY_TYPE_BATCH);
		if (VERIFY_TYPE_BATCH.equals(verify_type))
		{
			resultsList = verifyBatch(sign_source_flag, signList, certuid, cert_type, checksign);
		}
		else if (VERIFY_TYPE_SINGLE.equals(verify_type))
		{
			resultsList = verifySingle(sign_source_flag, signList, certuid, cert_type, checksign);
		}
		return resultsList;
	}
	
	@Override
	@SuppressWarnings("rawtypes")
	public List<DataRow> verifyBatch(String signSourceFlag, List signList, String certuid, String certType, String checkSign) throws Exception
	{
		List<DataRow> resultsList = new ArrayList<DataRow>();
		if (signList == null || signList.size() == 0)
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);
		}
		Map<String, String> parmMap = new HashMap<String, String>();
		for (int i = 0; i < signList.size(); i++)
		{
			DataRow dcsignLogRow = new DataRow();
			Map signTextMap = (Map) signList.get(i);
			
			String agreeCode = signTextMap.get("protocol_id").toString();// 协议编号
			String agreeSign = (String) signTextMap.get("protocol_dcsign");//签名值
			String summary = (String) signTextMap.get("summary");//摘要
			String plain_text = (String) signTextMap.get("plain_text"); //签名原文
			
			AgreementInfoVo agreementInfoVo = queryAgreementInfo(signSourceFlag, agreeCode);
			String agreeMd5 = agreementInfoVo.getAgreeMd5();
			String agreeContent = agreementInfoVo.getAgreeContent();
			
			if (CertConstants.SIGN_SOURCE_FLAG_TEXT.equals(signSourceFlag))
			{
				parmMap.put(agreeContent, agreeSign);
			}
			else if (CertConstants.SIGN_SOURCE_FLAG_MD5.equals(signSourceFlag))
			{
				parmMap.put(agreeMd5, agreeSign);
			}
			else if (CertConstants.SIGN_SOURCE_FLAG_OTHER.equals(signSourceFlag))
			{
				parmMap.put(plain_text, agreeSign);
			}
			parmMap.put(agreeMd5, agreeSign);
			dcsignLogRow.set("agreeNo", agreementInfoVo.getId());
			dcsignLogRow.set("agreeName", agreementInfoVo.getAgreeEname());
			dcsignLogRow.set("agreeContent", agreeContent);
			dcsignLogRow.set("agreeSign", agreeSign);
			dcsignLogRow.set("agreeMd5", agreeMd5);
			dcsignLogRow.set("summary", summary);
			dcsignLogRow.set("certuid", certuid);
			
			if (DictionaryConstants.BOL_TRUE.equals(checkSign))
			{
				dcsignLogRow.set("cert_dn", queryCert(certType, certuid));
			}
			resultsList.add(dcsignLogRow);
		}
		if (DictionaryConstants.BOL_FALSE.equals(checkSign))
		{
			return resultsList;
		}
		String parmMapString = JsonHelper.getJSONString(parmMap);
		//执行验签
		verifyText(parmMapString, parmMapString, certType);
		return resultsList;
	}
	
	@Override
	@SuppressWarnings("rawtypes")
	public List<DataRow> verifySingle(String signSourceFlag, List signList, String certuid, String certType, String checkSign) throws Exception
	{
		List<DataRow> resultsList = new ArrayList<DataRow>();
		if (signList == null || signList.size() == 0)
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);
		}
		Map<String, String> parmMap = new HashMap<String, String>();
		for (int i = 0; i < signList.size(); i++)
		{
			DataRow dcsignLogRow = new DataRow();
			Map signTextMap = (Map) signList.get(i);
			
			String agreeCode = signTextMap.get("protocol_id").toString();// 协议id
			String agreeSign = (String) signTextMap.get("protocol_dcsign");//签名值
			String summary = (String) signTextMap.get("summary");//摘要
			String plain_text = (String) signTextMap.get("plain_text"); //签名原文
			
			AgreementInfoVo agreementInfoVo = queryAgreementInfo(signSourceFlag, agreeCode);
			String agreeMd5 = agreementInfoVo.getAgreeMd5();
			String agreeContent = agreementInfoVo.getAgreeContent();
			
			if (CertConstants.SIGN_SOURCE_FLAG_TEXT.equals(signSourceFlag))
			{
				parmMap.put(agreeContent, agreeSign);
			}
			else if (CertConstants.SIGN_SOURCE_FLAG_MD5.equals(signSourceFlag))
			{
				parmMap.put(agreeMd5, agreeSign);
			}
			else if (CertConstants.SIGN_SOURCE_FLAG_OTHER.equals(signSourceFlag))
			{
				parmMap.put(plain_text, agreeSign);
			}
			parmMap.put(agreeMd5, agreeSign);
			dcsignLogRow.set("agreeNo", agreementInfoVo.getId());
			dcsignLogRow.set("agreeName", agreementInfoVo.getAgreeEname());
			dcsignLogRow.set("agreeContent", agreeContent);
			dcsignLogRow.set("agreeSign", agreeSign);
			dcsignLogRow.set("agreeMd5", agreeMd5);
			dcsignLogRow.set("summary", summary);
			dcsignLogRow.set("certuid", certuid);
			
			if (DictionaryConstants.BOL_TRUE.equals(checkSign))
			{ //验签
				verifyText(agreeMd5, agreeSign, certType);
				dcsignLogRow.set("cert_sn", queryCert(certType, certuid));
			}
			resultsList.add(dcsignLogRow);
		}
		return resultsList;
	}
	
	@Override
	public String queryCert(String cert_type, String certuid)
	{
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result cert = null;
		if (CertConstants.CERT_TYPE_ZD.equals(cert_type))
		{
			cert = certTBASService.getCsdcCert(certuid);
		}
		else
		{
			cert = certTBASService.getTianWeiCert(certuid);
		}
		if (cert.getErr_no() != 0)
		{
			logger.error("查询证书失败，证书bus错误编号：" + cert.getErr_no() + ";错误信息：" + cert.getErr_info());
			throw new BusinessException(ErrorCodeSystem.CERT_QUERY_FAIL);
		}
		return cert.getData().getString("cert_dn");
	}
	
	private void verifyText(String plainText, String signedText, String cert_type) throws InvokeException
	{
		Result detacchRs = null;
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		if (CertConstants.CERT_TYPE_ZD.equals(cert_type))
		{
			detacchRs = certTBASService.detachedSign(plainText, signedText);
		}
		else
		{
			detacchRs = certTBASService.detachedSignZJ(plainText, signedText);
		}
		if (detacchRs.getErr_no() != 0)
		{
			logger.error("验签失败，证书bus错误编号：" + detacchRs.getErr_no() + ";错误信息：" + detacchRs.getErr_info());
			throw new BusinessException(ErrorCodeSystem.VERIFYTEXT_FAIL);
		}
	}
	
	@Override
	public DataRow signByTg(String textList, String cert_type, DataRow userInfo, String ipaddr, String macaddr, String password) throws Exception
	{
		DataRow input = new DataRow();
		input.set("ipaddr", ipaddr);
		input.set("macaddr", macaddr);
		input.set("jsondata", textList);
		input.set("privatekey_pwd", password);
		
		input.set("user_id", userInfo.getString("certuid"));
		input.set("nationality", userInfo.getString("nationality"));
		input.set("custname", userInfo.getString("name"));
		input.set("idtype", DataFormatUtils.convertIdType(userInfo.getString("identity_type")));
		input.set("idtype", userInfo.getString("identity_type"));
		input.set("idNo", userInfo.getString("identity_num"));
		input.set("mobileno", userInfo.getString("mobile"));
		CertCofferTBASSService certCofferTBASSService = (CertCofferTBASSService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTCOFFERTBASS);
		Result result = null;
		if (CertConstants.CERT_TYPE_ZD.equals(cert_type))
		{
			result = certCofferTBASSService.signByZD(input);
		}
		else
		{
			result = certCofferTBASSService.signByZJ(input);
		}
		if (result.getErr_no() != 0)
		{
			//托管证书密码错误
			if (-10011 == result.getErr_no())
			{
				throw new BusinessException(ErrorCodeSystem.TG_CDET_PWD_WRONG);
			}
			logger.error("签名失败，托管bus错误编号：" + result.getErr_no() + ";错误信息：" + result.getErr_info());
			throw new BusinessException(ErrorCodeSystem.TG_SIGN_FAIL);
		}
		DataRow resultData = result.getData();
		return resultData;
	}
	
	@Override
	@SuppressWarnings("rawtypes")
	public List<DataRow> verifySignText(Long userId, String jsondata, String signType, String signSourceFlag) throws Exception
	{
		//获取自建证书类型
		String certSource = "";
		if (CertConstants.SIGN_TYPE_ZJ.equals(signType))
		{
			certSource = Configuration.getString(CertConstants.CONFIG_KEY_ZJCERTTYPE);
		}
		else if (CertConstants.SIGN_TYPE_ZD.equals(signType))
		{
			certSource = CertConstants.CERTSOURCE_ZD;
		}
		List paramList = (List) JsonHelper.getObjectByJSON(jsondata);
		if (CertConstants.SIGN_TYPE_NOCERT.equals(signType)) //不验签
		{
			return verify(signSourceFlag, paramList, "", signType, DictionaryConstants.BOL_FALSE);
		}
		CertManageService certManageService = (CertManageService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTMANAGE);
		DataRow userInfo = certManageService.checkUserCert(userId, certSource);
		return verify(signSourceFlag, paramList, userInfo.getString("certuid"), signType, DictionaryConstants.BOL_TRUE);
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public Map<String, List<Map<String, String>>> verifySignText(String jsondata, Map<String, DataRow> signParamsMap) throws Exception
	{
		List<Map<String, String>> jsonList = (List<Map<String, String>>) JsonHelper.getObjectByJSON(jsondata);
		
		Map<String, String> verifySignDataZd = new HashMap<String, String>();
		
		Map<String, String> verifySignDataZj = new HashMap<String, String>();
		
		List<Map<String, String>> needSubmitThirdSignList = new ArrayList<Map<String, String>>();
		
		List<Map<String, String>> allSignList = new ArrayList<Map<String, String>>();
		
		String verify_type = Configuration.getString("cert.verify_type", VERIFY_TYPE_BATCH);
		
		for (Map<String, String> item : jsonList)
		{
			String agreeCode = item.get("protocol_id");// 协议id
			String agreeSign = item.get("protocol_dcsign");//签名值
			DataRow paramDataRow = signParamsMap.get(agreeCode);
			if (paramDataRow == null)
			{
				throw new BusinessException(ErrorCodeSystem.SUBMIT_AGREENO_ERROR);
			}
			
			String signType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTYPE);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
			String submitType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SUBMITTYPE);//提交方式 0-否，1-是，默认值0
			String signTextType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTEXTTYPE);//协议原文类型 0-否，1-是，默认值0
			
			AgreementInfoVo agreementInfoVo = queryAgreementInfo(signTextType, agreeCode);
			item.put("agreeCode", agreeCode);
			item.put("agreeSign", agreeSign);
			item.put("signType", signType);
			item.put("submitType", submitType);
			item.put("signTextType", signTextType);
			item.put("agreeId", agreementInfoVo.getId().toString());
			item.put("agreeName", agreementInfoVo.getAgreeName());
			item.put("agreeVersion", agreementInfoVo.getAgreeVersion().toString());
			item.put("agreeSign", agreeSign);
			item.put("agreeMd5", agreementInfoVo.getAgreeMd5());
			item.put("agreeContent", agreementInfoVo.getAgreeContent());
			
			if (CertConstants.SIGN_TYPE_ZD.equals(signType))
			{
				//单个验签
				if (VERIFY_TYPE_SINGLE.equals(verify_type))
				{
					verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZD);
				}
				//批量验签
				else
				{
					verifySignDataZd.put(getSignText(item, signTextType), agreeSign);
				}
			}
			else if (CertConstants.SIGN_TYPE_ZJ.equals(signType))
			{
				//单个验签
				if (VERIFY_TYPE_SINGLE.equals(verify_type))
				{
					verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZJ);
				}
				//批量验签
				else
				{
					verifySignDataZj.put(getSignText(item, signTextType), agreeSign);
				}
			}
			if (CertConstants.SUBMIT_TYPE_THIRD.equals(submitType))
			{
				needSubmitThirdSignList.add(item);
			}
			allSignList.add(item);
			signParamsMap.remove(agreeCode);
		}
		if (!signParamsMap.isEmpty())
		{
			throw new BusinessException(ErrorCodeSystem.SUBMIT_AGREENO_NOTALLSUBMITTED);
		}
		//如果批量验签
		if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZd.isEmpty())
		{
			String parmMapString = JsonHelper.getJSONString(verifySignDataZd);
			verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZD);
		}
		if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZj.isEmpty())
		{
			String parmMapString = JsonHelper.getJSONString(verifySignDataZj);
			verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZJ);
		}
		Map<String, List<Map<String, String>>> result = new HashMap<String, List<Map<String, String>>>();
		result.put("needSubmitThirdSignList", needSubmitThirdSignList);
		result.put("allSignList", allSignList);
		return result;
	}
	
	private AgreementInfoVo queryAgreementInfo(String signTextType, String agreeCode)
	{
		AgreeMentService agreeMentService = (AgreeMentService) SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_AGREEMENT);
		AgreementInfoVo agreementInfoVo = null;
		if (CertConstants.SIGN_SOURCE_FLAG_TEXT.equals(signTextType))
		{
			agreementInfoVo = agreeMentService.queryInfoAndContentByCode(agreeCode);
		}
		else
		{
			agreementInfoVo = agreeMentService.queryInfoAndMdByCode(agreeCode);
		}
		if (agreementInfoVo == null)
		{
			throw new BusinessException(ErrorCodeSystem.AGREE_NO_EXIST);
		}
		return agreementInfoVo;
	}
	
	private String getSignText(Map<String, String> signData, String signTextType)
	{
		String signText = "";
		if (CertConstants.SIGN_SOURCE_FLAG_TEXT.equals(signTextType))
		{
			signText = signData.get("agreeContent");
		}
		else if (CertConstants.SIGN_SOURCE_FLAG_MD5.equals(signTextType))
		{
			signText = signData.get("agreeMd5");
		}
		else
		{
			signText = signData.get("plain_text");
		}
		return signText;
	}
	
	@Override
	public List<AgreeRecordModel> getAgreeRecordModels(Long userId, List<Map<String, String>> allSignList, Long businessId, String nodeId,String checksign) throws Exception
	{
		if (allSignList == null || allSignList.isEmpty())
		{
			return null;
		}
		List<AgreeRecordModel> agreeRecordModels = new ArrayList<AgreeRecordModel>();
		String zdCertDn = "";
		String zjCertDn = "";
		for (Map<String, String> signItem : allSignList)
		{
			AgreeRecordModel agreeRecordModel = new AgreeRecordModel();
			agreeRecordModel.setBusinessId(businessId);
			agreeRecordModel.setNodeId(nodeId);
			agreeRecordModel.setAgreeName(signItem.get("agreeName"));
			agreeRecordModel.setAgreeNo(signItem.get("agreeId"));
			agreeRecordModel.setAgreeVersion(signItem.get("agreeVersion"));
			agreeRecordModel.setProtocolDcsign(signItem.get("agreeSign"));
			agreeRecordModel.setSignType(signItem.get("signType"));
			agreeRecordModel.setSignSourceFlag(signItem.get("signTextType"));
			agreeRecordModel.setAgreePath(signItem.get("agree_path"));
			agreeRecordModel.setSecret(signItem.get("secret"));
			if(checksign.equals("1")){
				//如果使用中等证书签名
				if (CertConstants.SIGN_TYPE_ZD.equals(signItem.get("signType")))
				{
					if (StringUtils.isBlank(zdCertDn))
					{
						//查询DN
						CertManageService certManageService = (CertManageService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTMANAGE);
						DataRow userInfo = certManageService.checkUserCert(userId, CertConstants.CERTSOURCE_ZD);
						zdCertDn = queryCert(CertConstants.SIGN_TYPE_ZD, userInfo.getString("certuid"));
					}
					agreeRecordModel.setCertDn(zdCertDn);
				}
				else if (CertConstants.SIGN_TYPE_ZJ.equals(signItem.get("signType")))
				{
					if (StringUtils.isBlank(zjCertDn))
					{
						//查询DN
						CertManageService certManageService = (CertManageService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTMANAGE);
						DataRow userInfo = certManageService.checkUserCert(userId, Configuration.getString(CertConstants.CONFIG_KEY_ZJCERTTYPE));
						zjCertDn = queryCert(CertConstants.SIGN_TYPE_ZJ, userInfo.getString("certuid"));
					}
					agreeRecordModel.setCertDn(zjCertDn);
				}
			}
			agreeRecordModels.add(agreeRecordModel);
		}
		return agreeRecordModels;
	}
	
	@Override
	public List<AgreeRecordModel> verifyAndSave(Long userId, Long businessId, String nodeId, String jsondata, Map<String, DataRow> signParamsMap) throws Exception
	{
		List<Map<String, String>> allSignList = verifySignTextAndSubmitThird(jsondata, signParamsMap);
		
		List<AgreeRecordModel> agreeRecordModels = getAgreeRecordModels(userId, allSignList, businessId, nodeId,"");
		
		AgreeRecordService agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
		agreeRecordService.addBatch(agreeRecordModels, businessId, nodeId);
		return agreeRecordModels;
	}
	
	@Override
	public List<Map<String, String>> verifySignTextAndSubmitThird(String jsondata, Map<String, DataRow> signParamsMap) throws Exception
	{
		Map<String, List<Map<String, String>>> verifyResult = verifySignText(jsondata, signParamsMap);
		List<Map<String, String>> needSubmitThirdSignList = verifyResult.get("needSubmitThirdSignList");
		
		if (!needSubmitThirdSignList.isEmpty())
		{
			//TODO 提交协议到第三方
		}
		
		return verifyResult.get("allSignList");
	}

	@Override
	public List<Map<String, String>> verifySignTextAndSubmitThirdSpecial(String jsondata, Map<String, DataRow> signParamsMap) throws Exception
	{
		Map<String, List<Map<String, String>>> verifyResult = verifySignTextSpecial(jsondata, signParamsMap);
		List<Map<String, String>> needSubmitThirdSignList = verifyResult.get("needSubmitThirdSignList");

		if (!needSubmitThirdSignList.isEmpty())
		{
			//TODO 提交协议到第三方
		}

		return verifyResult.get("allSignList");
	}

	@Override
	public Map<String, List<Map<String, String>>> verifySignTextSpecial(String jsondata, Map<String, DataRow> signParamsMap) throws Exception
	{
		List<Map<String, String>> jsonList = (List<Map<String, String>>) JsonHelper.getObjectByJSON(jsondata);

		Map<String, String> verifySignDataZd = new HashMap<String, String>();

		Map<String, String> verifySignDataZj = new HashMap<String, String>();

		List<Map<String, String>> needSubmitThirdSignList = new ArrayList<Map<String, String>>();

		List<Map<String, String>> allSignList = new ArrayList<Map<String, String>>();

		String verify_type = Configuration.getString("cert.verify_type", VERIFY_TYPE_BATCH);

		for (Map<String, String> item : jsonList)
		{
			String agreeCode = item.get("protocol_id");// 协议id
			String agreeSign = item.get("protocol_dcsign");//签名值
			DataRow paramDataRow = signParamsMap.get(agreeCode);
//			if (paramDataRow == null)
//			{
//				throw new BusinessException(ErrorCodeSystem.SUBMIT_AGREENO_ERROR);
//			}

			String signType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTYPE);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
			String submitType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SUBMITTYPE);//提交方式 0-否，1-是，默认值0
			String signTextType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTEXTTYPE);//协议原文类型 0-否，1-是，默认值0

			AgreementInfoVo agreementInfoVo = queryAgreementInfo(signTextType, agreeCode);
			item.put("agreeCode", agreeCode);
			item.put("agreeSign", agreeSign);
			item.put("signType", signType);
			item.put("submitType", submitType);
			item.put("signTextType", signTextType);
			item.put("agreeId", agreementInfoVo.getId().toString());
			item.put("agreeName", agreementInfoVo.getAgreeName());
			item.put("agreeVersion", agreementInfoVo.getAgreeVersion().toString());
			item.put("agreeSign", agreeSign);
			item.put("agreeMd5", agreementInfoVo.getAgreeMd5());
			item.put("agreeContent", agreementInfoVo.getAgreeContent());

			if (CertConstants.SIGN_TYPE_ZD.equals(signType))
			{
				//单个验签
				if (VERIFY_TYPE_SINGLE.equals(verify_type))
				{
					verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZD);
				}
				//批量验签
				else
				{
					verifySignDataZd.put(getSignText(item, signTextType), agreeSign);
				}
			}
			else if (CertConstants.SIGN_TYPE_ZJ.equals(signType))
			{
				//单个验签
				if (VERIFY_TYPE_SINGLE.equals(verify_type))
				{
					verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZJ);
				}
				//批量验签
				else
				{
					verifySignDataZj.put(getSignText(item, signTextType), agreeSign);
				}
			}
			if (CertConstants.SUBMIT_TYPE_THIRD.equals(submitType))
			{
				needSubmitThirdSignList.add(item);
			}
			allSignList.add(item);
			signParamsMap.remove(agreeCode);
		}
		if (!signParamsMap.isEmpty())
		{
			throw new BusinessException(ErrorCodeSystem.SUBMIT_AGREENO_NOTALLSUBMITTED);
		}
		//如果批量验签
		if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZd.isEmpty())
		{
			String parmMapString = JsonHelper.getJSONString(verifySignDataZd);
			verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZD);
		}
		if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZj.isEmpty())
		{
			String parmMapString = JsonHelper.getJSONString(verifySignDataZj);
			verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZJ);
		}
		Map<String, List<Map<String, String>>> result = new HashMap<String, List<Map<String, String>>>();
		result.put("needSubmitThirdSignList", needSubmitThirdSignList);
		result.put("allSignList", allSignList);
		return result;
	}

    @Override
    public List<AgreeRecordModel> signContract(long userId, String jsondata) throws Exception
    {
        List<Map<String, String>> allSignList = verifySignTextAndSubmitThird(jsondata);
        List<AgreeRecordModel> agreeRecordModels = getAgreeRecordModels(userId, allSignList,"");
        
        AgreeRecordService agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
        agreeRecordService.addSign(agreeRecordModels);
        return agreeRecordModels;
    }
    @Override
    public List<Map<String, String>> verifySignTextAndSubmitThird(String jsondata)throws Exception
    {
        Map<String, List<Map<String, String>>> verifyResult = verifySignText(jsondata);
        List<Map<String, String>> needSubmitThirdSignList = verifyResult.get("needSubmitThirdSignList");
        
        if (!needSubmitThirdSignList.isEmpty())
        {
            //TODO 提交协议到第三方
        }
        
        return verifyResult.get("allSignList");
    }

    private Map<String, List<Map<String, String>>> verifySignText(String jsondata)
    {
        List<Map<String, String>> jsonList = (List<Map<String, String>>) JsonHelper.getObjectByJSON(jsondata);
        
        Map<String, String> verifySignDataZd = new HashMap<String, String>();
        
        Map<String, String> verifySignDataZj = new HashMap<String, String>();
        
        List<Map<String, String>> needSubmitThirdSignList = new ArrayList<Map<String, String>>();
        
        List<Map<String, String>> allSignList = new ArrayList<Map<String, String>>();
        
        String verify_type = Configuration.getString("cert.verify_type", VERIFY_TYPE_BATCH);
        
        for (Map<String, String> item : jsonList)
        {
            String agreeCode = item.get("protocol_id");// 协议id
            String agreeSign = item.get("protocol_dcsign");//签名值
            
            String signType = "2";//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
            String submitType = "0";//提交方式 0-否，1-是，默认值0
            String signTextType = "0";//协议原文类型 0-否，1-是，默认值0
            
            AgreementInfoVo agreementInfoVo = queryAgreementInfo(signTextType, agreeCode);
            item.put("agreeCode", agreeCode);
            item.put("agreeSign", agreeSign);
            item.put("signType", signType);
            item.put("submitType", submitType);
            item.put("signTextType", signTextType);
            item.put("agreeId", agreementInfoVo.getId().toString());
            item.put("agreeName", agreementInfoVo.getAgreeName());
            item.put("agreeVersion", agreementInfoVo.getAgreeVersion().toString());
            item.put("agreeSign", agreeSign);
            item.put("agreeMd5", agreementInfoVo.getAgreeMd5());
            item.put("agreeContent", agreementInfoVo.getAgreeContent());
            item.put("agree_path", agreementInfoVo.getString("fileupload_url"));
            item.put("secret", agreementInfoVo.getString("secret_key"));
            
            if (CertConstants.SIGN_TYPE_ZD.equals(signType))
            {
                //单个验签
                if (VERIFY_TYPE_SINGLE.equals(verify_type))
                {
                    verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZD);
                }
                //批量验签
                else
                {
                    verifySignDataZd.put(getSignText(item, signTextType), agreeSign);
                }
            }
            else if (CertConstants.SIGN_TYPE_ZJ.equals(signType))
            {
                //单个验签
                if (VERIFY_TYPE_SINGLE.equals(verify_type))
                {
                    verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZJ);
                }
                //批量验签
                else
                {
                    verifySignDataZj.put(getSignText(item, signTextType), agreeSign);
                }
            }
            if (CertConstants.SUBMIT_TYPE_THIRD.equals(submitType))
            {
                needSubmitThirdSignList.add(item);
            }
            allSignList.add(item);
        }
        //如果批量验签
        if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZd.isEmpty())
        {
            String parmMapString = JsonHelper.getJSONString(verifySignDataZd);
            verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZD);
        }
        if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZj.isEmpty())
        {
            String parmMapString = JsonHelper.getJSONString(verifySignDataZj);
            verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZJ);
        }
        Map<String, List<Map<String, String>>> result = new HashMap<String, List<Map<String, String>>>();
        result.put("needSubmitThirdSignList", needSubmitThirdSignList);
        result.put("allSignList", allSignList);
        return result;
    }
    
    public List<AgreeRecordModel> getAgreeRecordModels(Long userId, List<Map<String, String>> allSignList,String checksign) throws Exception
    {
        if (allSignList == null || allSignList.isEmpty())
        {
            return null;
        }
        List<AgreeRecordModel> agreeRecordModels = new ArrayList<AgreeRecordModel>();
        String zdCertDn = "";
        String zjCertDn = "";
        for (Map<String, String> signItem : allSignList)
        {
            AgreeRecordModel agreeRecordModel = new AgreeRecordModel();
            agreeRecordModel.setAgreeName(signItem.get("agreeName"));
            agreeRecordModel.setAgreeNo(signItem.get("agreeId"));
            agreeRecordModel.setAgreeVersion(signItem.get("agreeVersion"));
            agreeRecordModel.setProtocolDcsign(signItem.get("agreeSign"));
            agreeRecordModel.setSignType(signItem.get("signType"));
            agreeRecordModel.setSignSourceFlag(signItem.get("signTextType"));
            if(checksign.equals("1")){
                //如果使用中等证书签名
                if (CertConstants.SIGN_TYPE_ZD.equals(signItem.get("signType")))
                {
                    if (StringUtils.isBlank(zdCertDn))
                    {
                        //查询DN
                        CertManageService certManageService = (CertManageService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTMANAGE);
                        DataRow userInfo = certManageService.checkUserCert(userId, CertConstants.CERTSOURCE_ZD);
                        zdCertDn = queryCert(CertConstants.SIGN_TYPE_ZD, userInfo.getString("certuid"));
                    }
                    agreeRecordModel.setCertDn(zdCertDn);
                }
                else if (CertConstants.SIGN_TYPE_ZJ.equals(signItem.get("signType")))
                {
                    if (StringUtils.isBlank(zjCertDn))
                    {
                        //查询DN
                        CertManageService certManageService = (CertManageService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTMANAGE);
                        DataRow userInfo = certManageService.checkUserCert(userId, Configuration.getString(CertConstants.CONFIG_KEY_ZJCERTTYPE));
                        zjCertDn = queryCert(CertConstants.SIGN_TYPE_ZJ, userInfo.getString("certuid"));
                    }
                    agreeRecordModel.setCertDn(zjCertDn);
                }
            }
            agreeRecordModels.add(agreeRecordModel);
        }
        return agreeRecordModels;
    }

    @Override
    public List<Map<String, String>> verifySignTextAndSubmitThirdNew(String jsondata, Map<String, DataRow> signParamsMap) throws Exception
    {
        Map<String, List<Map<String, String>>> verifyResult = verifySignTextNew(jsondata, signParamsMap);
        List<Map<String, String>> needSubmitThirdSignList = verifyResult.get("needSubmitThirdSignList");
        
        if (!needSubmitThirdSignList.isEmpty())
        {
            //TODO 提交协议到第三方
        }
        
        return verifyResult.get("allSignList");
    }
    
    @SuppressWarnings("unchecked")
    public Map<String, List<Map<String, String>>> verifySignTextNew(String jsondata, Map<String, DataRow> signParamsMap) throws Exception
    {
        List<Map<String, String>> jsonList = (List<Map<String, String>>) JsonHelper.getObjectByJSON(jsondata);
        
        Map<String, String> verifySignDataZd = new HashMap<String, String>();
        
        Map<String, String> verifySignDataZj = new HashMap<String, String>();
        
        List<Map<String, String>> needSubmitThirdSignList = new ArrayList<Map<String, String>>();
        
        List<Map<String, String>> allSignList = new ArrayList<Map<String, String>>();
        
        String verify_type = Configuration.getString("cert.verify_type", VERIFY_TYPE_BATCH);
        
        for (Map<String, String> item : jsonList)
        {
            String agreeCode = item.get("protocol_id");// 协议id
            String agreeSign = item.get("protocol_dcsign");//签名值
            DataRow paramDataRow = signParamsMap.get(agreeCode);
            if (paramDataRow == null)
            {
                throw new BusinessException(ErrorCodeSystem.SUBMIT_AGREENO_ERROR);
            }
            
            String signType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTYPE);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
            String submitType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SUBMITTYPE);//提交方式 0-否，1-是，默认值0
            String signTextType = paramDataRow.getString(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTEXTTYPE);//协议原文类型 0-否，1-是，默认值0
            
            AgreementInfoVo agreementInfoVo = queryAgreementInfo(signTextType, agreeCode);
            item.put("agreeCode", agreeCode);
            item.put("agreeSign", agreeSign);
            item.put("signType", signType);
            item.put("submitType", submitType);
            item.put("signTextType", signTextType);
            item.put("agreeId", agreementInfoVo.getId().toString());
            item.put("agreeName", agreementInfoVo.getAgreeName());
            item.put("agreeVersion", agreementInfoVo.getAgreeVersion().toString());
            item.put("agreeMd5", agreementInfoVo.getAgreeMd5());
            item.put("agreeContent", agreementInfoVo.getAgreeContent());
            item.put("agree_path", agreementInfoVo.getString("fileupload_url"));
            item.put("secret", agreementInfoVo.getString("secret_key"));
            
            if (CertConstants.SIGN_TYPE_ZD.equals(signType))
            {
                //单个验签
                if (VERIFY_TYPE_SINGLE.equals(verify_type))
                {
                    verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZD);
                }
                //批量验签
                else
                {
                    verifySignDataZd.put(getSignText(item, signTextType), agreeSign);
                }
            }
            else if (CertConstants.SIGN_TYPE_ZJ.equals(signType))
            {
                //单个验签
                if (VERIFY_TYPE_SINGLE.equals(verify_type))
                {
                    verifyText(getSignText(item, signTextType), agreeSign, CertConstants.CERT_TYPE_ZJ);
                }
                //批量验签
                else
                {
                    verifySignDataZj.put(getSignText(item, signTextType), agreeSign);
                }
            }
            if (CertConstants.SUBMIT_TYPE_THIRD.equals(submitType))
            {
                needSubmitThirdSignList.add(item);
            }
            allSignList.add(item);
        }
        //如果批量验签
        if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZd.isEmpty())
        {
            String parmMapString = JsonHelper.getJSONString(verifySignDataZd);
            verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZD);
        }
        if (VERIFY_TYPE_BATCH.equals(verify_type) && !verifySignDataZj.isEmpty())
        {
            String parmMapString = JsonHelper.getJSONString(verifySignDataZj);
            verifyText(parmMapString, parmMapString, CertConstants.CERT_TYPE_ZJ);
        }
        Map<String, List<Map<String, String>>> result = new HashMap<String, List<Map<String, String>>>();
        result.put("needSubmitThirdSignList", needSubmitThirdSignList);
        result.put("allSignList", allSignList);
        return result;
    }
}