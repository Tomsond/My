package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.fileupload.bean.FileUploadResultVo;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ChkidnoLogModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.ChkidnoLogService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.CitizenInfo;
import com.thinkive.fxc.ismp.bus.base.business.service.CitizenInfoService;
import com.thinkive.fxc.ismp.bus.base.business.service.FileUploadService;
import com.thinkive.fxc.ismp.bus.base.business.service.PoliceCheckService;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.redis.client.JedisClient;

/**
 * @描述: 公安校验工具类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年11月4日 上午10:25:46
 */
public class PoliceCheckServiceImpl implements PoliceCheckService
{
	
	private static Set<String> checkingCitizenidnumber = new HashSet<String>(); //存储当前正在请求公安校验的身份证号，用于防止重复调用          
	
	public int getPoliceCheckErrorTime(Long userId, String businessCode)
	{
		String policeCheckRedisKey = "ismp|policecheckerrortime|" + userId + "|" + businessCode;
		JedisClient jedisClient = new JedisClient("web");
		String currErrorTimeString = jedisClient.getString(policeCheckRedisKey);
		if (StringUtils.isBlank(currErrorTimeString))
		{
			return 0;
		}
		return Integer.parseInt(currErrorTimeString);
	}
	
	public long policeCheckAndCacheErrorTime(Long userId, Long businessId, String businessCode, String identityNum, String name) throws Exception
	{
		String policeCheckRedisKey = "ismp|policecheckerrortime|" + userId + "|" + businessCode;
		//校验结果
		boolean checkFlag = false;
		//公安校验
		//1.先到数据库查询公安信息
		String policeSource = "";//公安校验来源
		CitizenInfoService citizenInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CITIZENINFO, CitizenInfoService.class);
		CitizenInfo citizenInfo = citizenInfoService.getCitizenInfoByidNo(identityNum);
		//本地数据库有公安数据，直接校验
		if (citizenInfo != null && !citizenInfo.isEmpty())
		{
			String citizenName = citizenInfo.getName();
			checkFlag = name.equals(citizenName);
			policeSource = citizenInfo.getSource();
		}
		//2.数据库没有查到公安信息则调用第三方接口校验
		else
		{
			DataRow checkResult = thirdPoliceCheck(identityNum, name);
			checkFlag = DictionaryConstants.BOL_TRUE.equals(checkResult.getString("check_flag"));
			policeSource = checkResult.getString("source");
		}
		//如果校验失败，缓存失败次数+1
		long currErrorTime = 0; //当前错误次数
		JedisClient jedisClient = new JedisClient("web");
		if (!checkFlag)
		{
			currErrorTime = jedisClient.incr(policeCheckRedisKey);
			if (1 == currErrorTime)
			{
				Calendar calendar = Calendar.getInstance();
				int hours = calendar.get(Calendar.HOUR_OF_DAY);
				int minutes = calendar.get(Calendar.MINUTE);
				int seconds = calendar.get(Calendar.SECOND);
				int time = (24 - hours) * 60 * 60 + (60 - minutes) * 60 + (60 - seconds);
				jedisClient.expire(policeCheckRedisKey, time);
			}
		}
		//校验成功，保存公安信息到数据库
		else
		{
			jedisClient.delete(policeCheckRedisKey);
		}
		//添加公安校验日志
		ChkidnoLogModel chkidnoLogModel = new ChkidnoLogModel();
		chkidnoLogModel.setBusinessCode(businessCode);
		chkidnoLogModel.setBusinessId(businessId);
		chkidnoLogModel.setUserId(userId);
		chkidnoLogModel.setChkStatus(checkFlag ? DictionaryConstants.BOL_TRUE : DictionaryConstants.BOL_FALSE);
		chkidnoLogModel.setIdNo(identityNum);
		chkidnoLogModel.setName(name);
		chkidnoLogModel.setSource(policeSource);
		ChkidnoLogService chkidnoLogService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_CHKIDNOLOG, ChkidnoLogService.class);
		chkidnoLogService.add(chkidnoLogModel);
		return currErrorTime;
	}
	
	public DataRow thirdPoliceCheck(String identityNum, String name) throws Exception
	{
		
		//校验用户是否正在公安校验（公安校验接口调用时间较长）
		synchronized (checkingCitizenidnumber)
		{
			if (checkingCitizenidnumber.contains(identityNum))
			{
				throw new BusinessException(ErrorCodeSystem.POLICE_CERTIFY_DOING);
			}
			checkingCitizenidnumber.add(identityNum);
		}
		
		DataRow checkResult = new DataRow();
		try
		{
			ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
			DataRow thirdInput = new DataRow();
			thirdInput.set("identity_num", identityNum);
			thirdInput.set("name", name);
			checkResult = thirdInterface.policeCheck(thirdInput);
		}
		finally
		{
			synchronized (checkingCitizenidnumber)
			{
				checkingCitizenidnumber.remove(identityNum);
			}
		}
		boolean checkFlag = DictionaryConstants.BOL_TRUE.equals(checkResult.getString("check_flag"));
		//如果校验成功，接口会返回公安信息,保存到数据库
		if (checkFlag)
		{
			FileUploadService fileUploadService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_FILEUPLOAD, FileUploadService.class);
			FileUploadResultVo fileUploadResultVo = fileUploadService
					.upLoadFileToFileServer(checkResult.getString("identity_num"), "1", checkResult.getString("photos"), DictionaryConstants.BOL_FALSE);
			String photoPath = fileUploadResultVo.getFilePath();//文件路径
			String secretKey = fileUploadResultVo.getSecret();//密钥
			CitizenInfo newCitizenInfo = new CitizenInfo();
			newCitizenInfo.setCitizenidnumber(checkResult.getString("identity_num"));
			newCitizenInfo.setName(checkResult.getString("name"));
			newCitizenInfo.setSecretKey(secretKey);
			newCitizenInfo.setPhotoPath(photoPath);
			newCitizenInfo.setSource(checkResult.getString("source"));
			CitizenInfoService citizenInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CITIZENINFO, CitizenInfoService.class);
			citizenInfoService.saveCitizenInfo(newCitizenInfo);
		}
		
		return checkResult;
	}
	
}
