package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.function; 

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map; 

import com.alibaba.fastjson.JSON; 
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow; 
import com.thinkive.base.util.JsonHelper;
import com.thinkive.base.util.SpringHelper;  
import com.thinkive.base.util.StringUtil; 
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants; 
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ThirdBankModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserInfoModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserRetentionModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserSnapShotService;  
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;  
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankContants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.model.ThirdBankExtendModel;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.model.UserBankBindModel;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.ThirdBankService; 
import com.thinkive.fxc.ismp.bus.business.util.PwdEncryptUtil;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants; 
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/** 
 * @描述: 修改三方存管绑定银行 （包含注销和绑定）
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0
 * @创建时间: 2016年8月31日 下午5:16:43
 */
public class Function1004811 extends IsmpFlowBaseFunction { 

    private Long userId; // 用户id
    
    private String fundAccount; // 资金帐号 

    private String oldBanknum; // 旧银行卡号
    private String oldBankcode; // 旧银行机构码
    private String oldBankpwd; // 旧银行密码
    
    private String newBanknum; // 新银行卡卡号 
    private String newBankcode; // 新银行机构码 
    private String newBankpwd; // 新银行卡密码
    private String newBankConfigId;//新银行数据库id

    private String opAccount; //副资金账号 
    
    private String jsondata; 
    private String checksign;

    @SuppressWarnings("unchecked")
    @Override
    public ResultVo execute() throws Exception {
        
        // step1:获取入参并校验
        checkInput();
        
        // step2:获取用户和用户账号信息
        UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO,UserInfoService.class);
        ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
        UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);

        // step3:检查用户是否匹配的银行卡
        ThirdBankService thirdBankService = SpringHelper.getBean(ThirdBankContants.SERVICE_ID_THIRDBANK, ThirdBankService.class);
        UserBankBindModel bankBindModel = thirdBankService.queryByBankCodeAndFundAccountAndUserId(oldBankcode, opAccount,userId);
        if (null == bankBindModel) {
            throw new BusinessException(ThirdBankErrorCode.NO_MATCHING_USERBANKBIND);// 用户没有匹配的银行卡
        }  
        
        //判断是否存管交易时间 
        TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME,TradeTimeService.class);
        boolean isTradeTime = tradeTimeService.checkBankTradeTime();
        if(!isTradeTime){
            throw new InvokeException("非存管交易时间，无法操作此业务！", -1);
        }
        
        BusinessEntityModel businessEntityModel=getNewBusinessEntity();  
        try{
            ThirdBankModel thirdBankModel = thirdBankService.queryThirdBankModelById(Long.valueOf(newBankConfigId));//根据ID获取对应银行的三方存管配置信息
            String[] agreenoArray=thirdBankModel.getAgreeNo().split(",");
            String agreeno=agreenoArray[0];
            //获取节点属性组
            //Map<String, DataRow> signParamsMap = ModularNodeUtil.checkAndReturnSignNodeProperty(nodePropertyConfigModelList); 
            Map<String, DataRow> signParamsMap =new HashMap<String, DataRow>();
            DataRow signParamsdata=new DataRow();
            signParamsdata.set("signtype", 2);
            signParamsdata.set("submittype", 0);
            signParamsdata.set("signtexttype", 1);
            signParamsdata.set("id", newBankConfigId);
            signParamsMap.put(agreeno, signParamsdata); 
            
            List<Map<String, String>> jsonList = (List<Map<String, String>>) JsonHelper.getObjectByJSON(jsondata);
            List<Map<String, String>> jsonToList=new ArrayList<Map<String,String>>();
            Map<String, String> map=jsonList.get(0);
            map.put("protocol_id", agreeno);
            map.put("protocol_content", "");
            jsonToList.add(map);
            jsondata=JSON.toJSONString(jsonToList);
            
            //提交的所有协议
            SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
            List<Map<String, String>> allSignList = signAndVerifyService.verifySignTextAndSubmitThird(jsondata, signParamsMap); 
            BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
          
            
            //调用三方存管变更接口 
            DataRow sss=packThirdInput(userInfoVo);
            DataRow bindResult = thirdInterface.changeBindBankCard(sss); 
            
            //添加业务实例和协议
            businessEntityService.addEntityAndAgree(businessEntityModel,  submitBprocNodeConfigAndDefineVO.getNodeId(), allSignList,checksign);
            businessEntityModel=businessEntityService.queryNotCompleteByUserIdAndBusinessCode(userId, businessCode);
            
            //保存变更业务数据和流水
            ThirdBankExtendModel thirdBankExtendModel =new ThirdBankExtendModel();
            thirdBankExtendModel.setBusinessId(businessEntityModel.getId());
            thirdBankExtendModel.setFundAccount(opAccount);
            thirdBankExtendModel.setOldBankcode(oldBankcode);
            thirdBankExtendModel.setOldBanknum(oldBanknum); 
            thirdBankExtendModel.setNewBankcode(newBankcode);
            thirdBankExtendModel.setNewBanknum(newBanknum);
            //thirdBankExtendModel.setNewBankpwd(newBankpwd);//不保存存管密码
            thirdBankExtendModel.setYwqqid(bindResult.getString("request_no")); 
            thirdBankService.addOrUpdateThirdBankModel(thirdBankExtendModel);
        } catch (Exception e){
            throw new InvokeException("变更银行卡异常："+e.getMessage(), -1004182);
        } 
          
        // 添加业务办理快照
        UserSnapShotService userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT,UserSnapShotService.class);
        userSnapShotService.addUserSnapShot(businessEntityModel.getId(), userInfoVo);
        
         //获取用户信息和用户拓展信息办理业务时数据
        UserInfoModel olduserInfoModel = userInfoService.queryUserInfoByUserId(userInfoVo.getUserId());
        UserExtendModel oldUserExtendModel = userInfoService.queryUserExtendByUserId(userInfoVo.getUserId()); 
        UserRetentionModel userretentionmodel = new UserRetentionModel();
        userretentionmodel.setEntrustway(entrust_way);
        userretentionmodel.setStockaccount(stock_account);
        userretentionmodel.setRiskvalue(riskvalue);
        userretentionmodel.setRisklevel(risklevel);
        userretentionmodel.setSubitemname(subitemname);
        userretentionmodel.setSurveysn(survey_sn);
        userretentionmodel.setBankname(newBankcode);
        userretentionmodel.setBankCardNumber(newBanknum);
        userretentionmodel.setOperationtype("2");
        userretentionmodel.setAmountOfMoney(amount_of_money);
        userretentionmodel.setMarket(market); 
        userSnapShotService.InsertRetention(olduserInfoModel, oldUserExtendModel, businessEntityModel, userretentionmodel);//添加 客户业务办理时信息记录表
        
        ResultVo resultVo=new ResultVo();
        return resultVo;
    }

    /**
     * @作者：田源
     * @时间：2016年9月1日 上午10:25:23
     * @throws InvokeException
     */
    private void checkInput() throws InvokeException {
        jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON); 
        checksign = this.getStrParameter("checksign", "0");
        userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id",ErrorCodeCheckInput.BLANK_USERID));
        fundAccount = this.getAndCheckBlankStrParam("fund_account",ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
        oldBankcode = this.getAndCheckBlankStrParam("old_bankcode",ThirdBankErrorCode.BLANK_OLD_BANKCODE);
        oldBankpwd = this.getStrParameter("old_bankpwd");  
        if(StringUtil.isEmpty(oldBankpwd)){
            throw new InvokeException("旧银行密码不能为空", -1);
        } 
        oldBanknum = this.getStrParameter("old_banknum"); 
        if(StringUtil.isEmpty(oldBankpwd)){
            throw new InvokeException("旧银行可卡号不能为空", -1);
        } 
        
        opAccount = this.getAndCheckBlankStrParam("op_account",ThirdBankErrorCode.BLANK_OPEN_ACCOUNT); 
        newBankcode = this.getAndCheckBlankStrParam("new_bankcode",ThirdBankErrorCode.BLANK_NEW_BANKCODE);
        newBanknum = this.getStrParameter("new_banknum"); 
        newBankpwd = this.getStrParameter("new_bankpwd"); 
        newBankConfigId = this.getStrParameter("newBankConfigId"); 
        opSource = getStrParameter("op_source");  
        if(StringUtil.isEmpty(newBanknum)){
            throw new InvokeException("新银行卡号不能为空", -1);
        }
        if(StringUtil.isEmpty(newBankpwd)){ 
            throw new InvokeException("新银行密码不能为空", -1);
        }
        if(StringUtil.isEmpty(newBankConfigId)){
            throw new InvokeException("新银行数据id不能为空", -1);
        } 
    }
 
    
    public  DataRow packThirdInput(UserInfoVo userInfoVo) throws Exception{ 
        DataRow thirdInput = new DataRow();
        if (userInfoVo == null || userInfoVo.isEmpty()){
           throw new Exception("数据为空");
        } 
        try{  
            thirdInput.set("new_bankcode", newBankcode);//新绑定银行机构码
            thirdInput.set("new_banknum", newBanknum);//新绑定银行卡号
            thirdInput.set("new_bankpwd",  newBankpwd); //新绑定银行的密码
            
            thirdInput.set("old_bankcode", oldBankcode);//旧绑定银行机构码
            thirdInput.set("old_banknum", oldBanknum);//旧绑定银行卡号
            thirdInput.set("old_bankpwd", oldBankpwd); //旧绑定银行的密码
            
            thirdInput.set("gt_fund_account", opAccount); //副资金账号
            thirdInput.set("branch_no", userInfoVo.getString("branch_no"));//营业部
            thirdInput.set("client_id", userInfoVo.getString("client_id"));//客户号
            thirdInput.set("fund_account", userInfoVo.getString("fund_account"));//资金账号   
            String pwd=userInfoVo.getString("pwd");
            thirdInput.set("password",   PwdEncryptUtil.decryptionPsw(pwd));//资金密码  
        }catch (Exception e) {
                throw new Exception(e.getMessage());
        } 
        return thirdInput; 
    } 
}
