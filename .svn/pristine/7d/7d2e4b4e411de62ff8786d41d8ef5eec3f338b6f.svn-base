package com.thinkive.fxc.ismp.bus.business.ggtCancel.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.jdbc.session.SessionFactory;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants; 
import com.thinkive.fxc.ismp.bus.base.business.dao.AgreeRecordDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.ChoiceAccountRecordDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.PpTaskDao;
import com.thinkive.fxc.ismp.bus.base.business.dao.ProcNodeDefineDao; 
import com.thinkive.fxc.ismp.bus.base.business.model.AgreeRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel; 
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.PpTaskModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ProcNodeDefineModel; 
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants; 
import com.thinkive.fxc.ismp.bus.business.ggt.contants.GgtContants;
import com.thinkive.fxc.ismp.bus.business.ggt.service.GgtService;
import com.thinkive.fxc.ismp.bus.business.ggtCancel.constants.GgtCancelConstants;
import com.thinkive.fxc.ismp.bus.business.ggtCancel.service.GgtCancelService;
import com.thinkive.fxc.ismp.bus.business.service.impl.BusinessCommonServiceImpl;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.fxc.ismp.bus.third.service.ThirdTrdAccountService;

/**
 * @描述: 港股通服务接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月19日 下午4:41:26
 */

@SuppressWarnings("unused")
public class GgtCancelServiceImpl extends BusinessCommonServiceImpl implements GgtCancelService{
	
private ProcNodeDefineDao procNodeDefineDao;
    
    private PpTaskDao ppTaskDao;
    
    private ChoiceAccountRecordDao choiceAccountRecordDao;
    
    private AgreeRecordDao agreeRecordDao;
    
    public void setAgreeRecordDao(AgreeRecordDao agreeRecordDao)
    {
        this.agreeRecordDao = agreeRecordDao;
    }
    
    public void setProcNodeDefineDao(ProcNodeDefineDao procNodeDefineDao)
    {
        this.procNodeDefineDao = procNodeDefineDao;
    }
    
    public void setPpTaskDao(PpTaskDao ppTaskDao)
    {
        this.ppTaskDao = ppTaskDao;
    }
    
    public void setChoiceAccountRecordDao(ChoiceAccountRecordDao choiceAccountRecordDao)
    {
        this.choiceAccountRecordDao = choiceAccountRecordDao;
    }
	
	 
	@Override
	public BusinessEntityModel queryOrAddBusinessInfo(Long userId, String nodeId, String opSource, String opStation, String ip) throws Exception{
		String businessCode = BusinessConstants.BUSINESS_GGT;
		
		//查询用户当前有没有正在办理的港股通业务
		BusinessEntityModel businessEntityModel = businessEntityDao.querNotCompleteByUserIdAndBusinessCode(userId, businessCode);
		
		//如果没有正在办理的业务，就新增一个业务实例
		if (null == businessEntityModel)
		{
			Session session = null;
			try
			{
				//创建session，开启事务
				session = SessionFactory.getSession(SystemConstants.DB_ISMP);
				session.beginTrans();
				
				businessEntityModel = new BusinessEntityModel(userId, businessCode, nodeId, DictionaryConstants.BOL_FALSE, null, opSource, opStation, ip);
				
				//新增港股通业务实例
				businessEntityModel = this.addBusinessEntityModel(businessEntityModel, session);
				Long businessId = businessEntityModel.getId();
				
				// 查询用户是否是第一次办理港股通 业务，如果用户之前做过港股通业务，则默认用户所有流程都通过
				List<BusinessEntityModel> list = businessEntityDao.queryByParams(userId, businessCode, DictionaryConstants.BOL_TRUE);
				if (null != list && list.size() > 0)
				{
					//查询到港股通业务流程节点，然后循环向业务办理流程节点记录表和业务办理节点操作记录表中循环插入记录
					List<ProcNodeDefineModel> procNodeDefineModels = procNodeDefineDao.queryByBusinessType(businessCode);//获取港股通业务流程节点
					if (null != procNodeDefineModels)
					{
						for (ProcNodeDefineModel procNodeDefineModel : procNodeDefineModels)
						{
							String nodeid = procNodeDefineModel.getNodeId();
							//新增业务办理流程节点记录
							this.addFlowNodeModel(businessId, nodeid, ip, opSource, opStation, session);
							
							//新增业务办理节点操作记录
							this.addNodeLogModel(businessId, nodeid, ip, opSource, opStation, session);
							
						}
						
					}
				}
				else
				{//用户是第一次办理港股通 业务，新加当前节点
				    //新增业务办理流程节点记录
                    this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
                    
                    //新增业务办理节点操作记录
                    this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
				}
				session.commitTrans();
			}
			catch (Exception e)
			{
				if (session != null)
				{
					session.rollbackTrans();
				}
				throw e;
			}
			finally
			{
				if (session != null)
				{
					session.close();
				}
			}
		}
		return businessEntityModel;
	}
	
	@Override
	public void addTaskAndUpdateDealResult(BusinessEntityModel businessEntityModel) throws Exception
	{
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			Long businessId = businessEntityModel.getId();
			
			//设置业务办理实例为待跑批
			businessEntityModel.setDealResult(DictionaryConstants.DEAL_RESULT_NEEDPP);
			this.updateBusinessEntityModel(businessEntityModel, session);
			
			//添加跑批任务
			PpTaskModel ppTaskModel = new PpTaskModel();
			ppTaskModel.setBusinessId(businessId);
			ppTaskModel.setIsLoop(DictionaryConstants.BOL_FALSE);
			ppTaskModel.setTaskName(businessEntityModel.getBusinessCode());
			ppTaskModel.setTaskStatus(DictionaryConstants.PP_TASK_STATUS_EFFECTIVE);
			ppTaskModel.setExecStatus(DictionaryConstants.PP_TASK_EXEC_STATUS_NODEAL);
			ppTaskDao.add(ppTaskModel, session);
			
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public void UpdateGGtNode(Long businessId, String nodeId, String opSource, String opStation, String ip) throws Exception
	{
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//更新业务实例当前节点
			BusinessEntityModel businessEntityModel = new BusinessEntityModel();
			businessEntityModel.setId(businessId);
			businessEntityModel.setNodeId(nodeId);
			this.updateBusinessEntityModel(businessEntityModel, session);
			
			//更新节点记录
			this.addOrUpdateFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//添加节点记录操作日志
			this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
			
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	} 
	
	@Override
	public Map<String, Object> getSgtAccountState(UserInfoVo userInfoVo) throws Exception
	{
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> trdAccountList = thirdTrdAccountService.queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SZA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo,
				ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		//因为查询的是柜台帐号，先检查是否存在深A帐号，再检查深A帐号状态是否正常
		if (trdAccountList != null && trdAccountList.size() != 0)
		{
			//有已加挂的深A帐号，默认状态为不正常
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			//遍历所有已加挂的深A证券帐号
			for (DataRow accountItem : trdAccountList)
			{
				//只要有一个帐号状态为正常，既可以视为深A证券帐号状态正常,并且查询深港通状态
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(accountItem.getString("state")))
				{
					accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
					//thirdInput.set("trdaccount", accountItem.get("trdacct"));
					//DataRow ggtAccount = thirdInterface.queryGGTAccount(thirdInput);//查询港股通信息
					//accountItem = getAccountState(accountItem, ggtAccount);
				}
			}
		}
		Map<String, Object> stateMap = new HashMap<String, Object>();
		stateMap.put("accountState", accountState);
		stateMap.put("accountList", trdAccountList);
		return stateMap;
	}
	
	@Override
	public Map<String, Object> getHgtAccountState(UserInfoVo userInfoVo) throws Exception
	{
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> trdAccountList = thirdTrdAccountService.queryThirdTraAccount(ThirdInterfaceConstant.STKBD_SHA, ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo,
				ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		//如果是沪A帐号，因为查询的是柜台数据，查询到的帐号都是已加挂帐号
		if (trdAccountList != null && trdAccountList.size() != 0)
		{
			//有已加挂的沪A帐号，默认帐号不正常
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			//遍历所有已加挂的沪A证券帐号
			for (DataRow accountItem : trdAccountList)
			{
				//只要有一个帐号状态正常且已指定交易，既可以视为沪A证券帐号状态正常
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(accountItem.getString("state")))
				{
					if (!accountState.equals(DictionaryConstants.ZQACCOUNTSTATE_NOMAL))
					{
						accountState = DictionaryConstants.ZQACCOUNTSTATE_NOAPPOINT;
					}
					//如果遍历到的帐号同时也处于已指定状态，既可以视为沪A证券帐号状态正常，并查询用户沪港通信息
					if (ThirdTBASConstants.TRDACCOUNT_STATE_BINDED.equals(accountItem.getString("bind_state")))
					{
						accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
						//thirdInput.set("trdaccount", accountItem.get("trdacct"));
						//DataRow ggtAccount = thirdInterface.queryGGTAccount(thirdInput);//查询港股通信息
						//accountItem = getAccountState(accountItem, ggtAccount);
					}
				}
			}
		}
		
		Map<String, Object> stateMap = new HashMap<String, Object>();
		stateMap.put("accountState", accountState);
		stateMap.put("accountList", trdAccountList);
		return stateMap;
	}
	
	@Override
	public Map<String, Object> getGgtAccountState(UserInfoVo userInfoVo) throws Exception{
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		String accountState = DictionaryConstants.ZQACCOUNTSTATE_NO;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		ThirdTrdAccountService thirdTrdAccountService = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDTRDACCOUNT, ThirdTrdAccountService.class);
		List<DataRow> trdAccountList = thirdTrdAccountService.queryThirdTraAccountByTrdacctExcls(ThirdInterfaceConstant.TRDACCT_EXCLS_GRGD, userInfoVo, ThirdTBASConstants.THIRDINTERFACE_QUERYTYPE_GT);
		if (trdAccountList != null && trdAccountList.size() != 0){
			//默认所有帐号状态都异常
			accountState = DictionaryConstants.ZQACCOUNTSTATE_ERROR;
			//遍历所有已加挂的证券帐号
			for (DataRow accountItem : trdAccountList){
				//如果有状态正常的帐号
				if (ThirdTBASConstants.TRDACCOUNT_THIRDSTATE_NOMAL.equals(accountItem.getString("state"))){
					//如果有一个深A帐号状态为正常，则业务办理的整体帐号状态正常
					if (ThirdInterfaceConstant.STKBD_SZA.equals(accountItem.getString("stkbd"))){
						accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
						thirdInput.set("trdaccount", accountItem.get("trdacct"));
						//DataRow ggtAccount = thirdInterface.queryGGTAccount(thirdInput);//查询港股通信息
						//accountItem = getAccountState(accountItem, ggtAccount);
					}
					//如果有一个沪A帐号正常
					if (ThirdInterfaceConstant.STKBD_SHA.equals(accountItem.getString("stkbd"))){
						if (!accountState.equals(DictionaryConstants.ZQACCOUNTSTATE_NOMAL)){
							accountState = DictionaryConstants.ZQACCOUNTSTATE_NOAPPOINT;
						}
						//如果遍历到的帐号同时也处于已指定状态，既可以视为沪A证券帐号状态正常，停止循环
						if (ThirdTBASConstants.TRDACCOUNT_STATE_BINDED.equals(accountItem.getString("bind_state"))){
							accountState = DictionaryConstants.ZQACCOUNTSTATE_NOMAL;
							thirdInput.set("trdaccount", accountItem.get("trdacct"));
							//DataRow ggtAccount = thirdInterface.queryGGTAccount(thirdInput);//查询港股通信息
							//accountItem = getAccountState(accountItem, ggtAccount);
						}
					}
				}
			}
		}
		Map<String, Object> stateMap = new HashMap<String, Object>();
		stateMap.put("accountState", accountState);
		stateMap.put("accountList", trdAccountList);
		return stateMap;
	}
	
	private DataRow getAccountState(DataRow shaAccount, DataRow ggtAccount){
		String ggt_open = DictionaryConstants.BOL_FALSE;//是否已开通港股通权限
		if (ggtAccount != null && DictionaryConstants.BOL_TRUE.equals(ggtAccount.getString("query_flag"))){
			ggt_open = DictionaryConstants.BOL_TRUE;
			shaAccount.set("stk_code", ggtAccount.getString("stk_code"));
		}
		shaAccount.set("open_flag", ggt_open);
		return shaAccount;
	}

    @Override
    public void choiceTrdAccount(String[] trdAccounts, BusinessEntityModel businessEntityModel,String nodeId ) throws Exception
    {
        Session session = null;
        try
        {
            //创建session，开启事务
            session = SessionFactory.getSession();
            session.beginTrans();
            
            //更新业务实例当前节点
            this.updateBusinessEntityModel(businessEntityModel, session);
            
            Long businessId = businessEntityModel.getId();
            //String nodeId= GgtCancelConstants.GGT_CANCEL_CHOOSE_ACCOUNT;
            String ip = businessEntityModel.getIp();
            String opSource = businessEntityModel.getOpSource();
            String opStation = businessEntityModel.getOpStation();
            
            //批量添加账号选择记录
            choiceAccountRecordDao.deleteByBusinessIdAndNodeId(businessId, nodeId, session);
            List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
            for (String trdAccount : trdAccounts)
            {
                String[] accountStkbd = trdAccount.split("\\|");
                
                ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
                choiceAccountRecordModel.setBusinessId(businessId);
                choiceAccountRecordModel.setNodeId(nodeId);
                choiceAccountRecordModel.setTrdAccount(accountStkbd[0]);
                if(accountStkbd.length > 1){
                    choiceAccountRecordModel.setStkbd(accountStkbd[1]);
                }
                choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
                choiceAccountRecordModels.add(choiceAccountRecordModel);
            }
            choiceAccountRecordDao.addBatch(choiceAccountRecordModels, session);
            
            //更新节点记录
            this.addOrUpdateFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
            
            //添加节点记录操作日志
            this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
            
            session.commitTrans();
        }
        catch (Exception e)
        {
            if (session != null)
            {
                session.rollbackTrans();
            }
            throw e;
        }
        finally
        {
            if (session != null)
            {
                session.close();
            }
        }
    }

    @Override
    public void addProtocolAndUpdateNodeId(BusinessEntityModel businessEntityModel, List<AgreeRecordModel> agreeRecordModels,String nodeId) throws Exception
    {
        Session session = null;
        try
        {
            //创建session，开启事务
            session = SessionFactory.getSession();
            session.beginTrans();
            
            //更新业务实例当前节点
            this.updateBusinessEntityModel(businessEntityModel, session);
            
            Long businessId = businessEntityModel.getId();
            String ip = businessEntityModel.getIp();
            String opSource = businessEntityModel.getOpSource();
            String opStation = businessEntityModel.getOpStation();
            
            //删除记录
            agreeRecordDao.deleteByBusinessIdAndNodeId(businessId, nodeId, session);
            
            //添加新记录
            for (AgreeRecordModel agreeRecord : agreeRecordModels)
            {
                agreeRecordDao.addBatch(agreeRecord, session);
            }
            
            //更新节点记录
            this.addOrUpdateFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
            
            //添加节点记录操作日志
            this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
            
            session.commitTrans();
        }
        catch (Exception e)
        {
            if (session != null)
            {
                session.rollbackTrans();
            }
            throw e;
        }
        finally
        {
            if (session != null)
            {
                session.close();
            }
        }
    }

    @Override
    public void choiceTrdAccountAddPpTask(String[] trdAccounts, BusinessEntityModel businessEntityModel, String nodeId)
            throws Exception
    {
        Session session = null;
        try
        {
            //创建session，开启事务
            session = SessionFactory.getSession();
            session.beginTrans();
            
            //更新业务实例当前节点
            this.updateBusinessEntityModel(businessEntityModel, session);
            
            Long businessId = businessEntityModel.getId();
            String ip = businessEntityModel.getIp();
            String opSource = businessEntityModel.getOpSource();
            String opStation = businessEntityModel.getOpStation();
            
            //批量添加账号选择记录
            choiceAccountRecordDao.deleteByBusinessIdAndNodeId(businessId, nodeId, session);
            List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
            for (String trdAccount : trdAccounts)
            {
                String[] accountStkbd = trdAccount.split("\\|");
                
                ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
                choiceAccountRecordModel.setBusinessId(businessId);
                choiceAccountRecordModel.setNodeId(nodeId);
                choiceAccountRecordModel.setTrdAccount(accountStkbd[0]);
                if(accountStkbd.length > 1){
                    choiceAccountRecordModel.setStkbd(accountStkbd[1]);
                }
                choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
                choiceAccountRecordModels.add(choiceAccountRecordModel);
            }
            choiceAccountRecordDao.addBatch(choiceAccountRecordModels, session);
            
            //更新节点记录
            this.addOrUpdateFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
            
            //添加节点记录操作日志
            this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
            
            //添加跑批任务、
            PpTaskModel ppTaskModel = new PpTaskModel();
            ppTaskModel.setBusinessId(businessId);
            ppTaskModel.setIsLoop(DictionaryConstants.BOL_FALSE);
            ppTaskModel.setTaskName(businessEntityModel.getBusinessCode());
            ppTaskModel.setTaskStatus(DictionaryConstants.PP_TASK_STATUS_EFFECTIVE);
            ppTaskModel.setExecStatus(DictionaryConstants.PP_TASK_EXEC_STATUS_NODEAL);
            ppTaskDao.add(ppTaskModel, session);
            
            session.commitTrans();
        }
        catch (Exception e)
        {
            if (session != null)
            {
                session.rollbackTrans();
            }
            throw e;
        }
        finally
        {
            if (session != null)
            {
                session.close();
            }
        }
        
    }
 
	
}
