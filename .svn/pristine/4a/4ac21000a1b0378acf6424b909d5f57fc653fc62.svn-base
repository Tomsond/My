package com.thinkive.fxc.ismp.bus.business.user.function;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.LinkmanRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.service.LinkmanRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.ResultVo;

/**
 * @描述: 更新用户信息
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月7日 上午10:04:25
 */
public class Function1004103 extends ISMPBaseFunction
{
	
	private Long userId; //用户编号
	
	private String fundAccount; //资金帐号
	
	private String email; //邮箱
	
	private String address; //联系地址
	
	private String postCode; //邮编
	
	private String occupational; //职业
	
	private String adapter; //学历
	
	//第二联系人
	private Long emergencyId; //第二联系人ID
	
	private String emergencyName; //第二联系人姓名
	
	private String emergencyRelation; //第二联系人关系
	
	private String emergencyTel; //第二联系人电话号码
	
	private String emergencyMobile; //第二联系人手机号码
	
	private String emergencyEmail; //第二联系人邮箱
	
	private String emergencyAddress; //第二联系人地址
	
    private String   control_person; //操作控制人
    
    private String   benefit_person ;//受益人
    
    private String   credit_record ;//诚信记录
    
    private String   tax_resident_person ;//涉税信息

    
	private ThirdInterface thirdInterface;
	
	private UserInfoService userInfoService;
	
	private String opSource;
	
	private static Map<String, String> keyWords = new HashMap<String, String>();
	
	static
	{
		keyWords.put("email", "邮箱");
		keyWords.put("post_code", "邮编");
		keyWords.put("occupational", "职业");
		keyWords.put("address", "地址");
		keyWords.put("adapter", "学历");
		keyWords.put("emergency_name", "应急联系人姓名");
		keyWords.put("emergency_relation", "与应急联系人关系");
		keyWords.put("emergency_mobile", "应急联系人手机");
	}
	
	public ResultVo execute() throws Exception
	{
		//step1:获取入参并校验
		checkInput();
		
		//step2:查询用户基本信息和用户账号信息
		userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);
		UserExtendModel oldUserExtendModel = userInfoService.queryUserExtendByUserId(userId);//查询用户修改前资料
		//step4:调用第三方接口，修改用户信息
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		StringBuffer buffer = new StringBuffer();
		if (StringUtils.isNotBlank(email)){
			thirdInput.set("email", email);
		 buffer.append("邮箱地址修改前："+oldUserExtendModel.getEmail()+",修改后："+email);
		}
		if (StringUtils.isNotBlank(address)){
			thirdInput.set("address", address);
		 buffer.append("地址修改前："+oldUserExtendModel.getAddress()+",修改后："+address);
		}
		if (StringUtils.isNotBlank(postCode)){
			thirdInput.set("post_code", postCode);
		buffer.append("邮编修改前："+oldUserExtendModel.getPostCode()+",修改后："+postCode);
		}
		if (StringUtils.isNotBlank(adapter)){
			thirdInput.set("adapter", adapter);
		buffer.append("学历修改前："+oldUserExtendModel.getEducation() +",修改后："+adapter);
		}
		if (StringUtils.isNotBlank(occupational)){
			thirdInput.set("occupational", occupational);
		buffer.append("职业修改前："+oldUserExtendModel.getOccupation()+",修改后："+occupational);
		}
		if (StringUtils.isNotBlank(control_person)){
			thirdInput.set("control_person", control_person);
		buffer.append("控制人修改前："+oldUserExtendModel.getControlPerson()+",修改后："+control_person);
		}
		if (StringUtils.isNotBlank(benefit_person)){
			thirdInput.set("benefit_person", benefit_person);
		buffer.append("受益人修改前："+oldUserExtendModel.getBenefitPerson()+",修改后："+benefit_person);
		}
		if (StringUtils.isNotBlank(credit_record)){
			thirdInput.set("credit_record", credit_record);
		buffer.append("诚信记录修改前："+oldUserExtendModel.getCreditrecord()+",修改后："+credit_record);
		}
		if (StringUtils.isNotBlank(tax_resident_person)){
			thirdInput.set("tax_resident_person", tax_resident_person);
		buffer.append("涉税信息修改后："+tax_resident_person);
		}
		logger.info("credit_record=================" + credit_record);
		thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		thirdInterface.updateUserInfo(thirdInput);
		
		//step5:调用第三方接口，修改用户联系人信息
		if (null != emergencyId && 0 != emergencyId)
			thirdInput.set("emergency_id", emergencyId);
		if (StringUtils.isNotBlank(emergencyName)){
			thirdInput.set("emergency_name", emergencyName);
		buffer.append("第二联系人名称修改为："+emergencyName);
		}
		if (StringUtils.isNotBlank(emergencyRelation)){
			thirdInput.set("emergency_relation", emergencyRelation);
		buffer.append("第二联系人关系修改为："+emergencyRelation);
		}
		if (StringUtils.isNotBlank(emergencyTel)){
			thirdInput.set("emergency_tel", emergencyTel);
		buffer.append("第二联系人电话修改为："+emergencyTel);
		}
		if (StringUtils.isNotBlank(emergencyMobile)){
			thirdInput.set("emergency_mobile", emergencyMobile);
		buffer.append("第二联系人手机号码修改为："+emergencyMobile);
		}
		if (StringUtils.isNotBlank(emergencyEmail)){
			thirdInput.set("emergency_email", emergencyEmail);
		buffer.append("第二联系人邮箱修改为："+emergencyEmail);
		}
		if (StringUtils.isNotBlank(emergencyAddress)){
			thirdInput.set("emergency_address", emergencyAddress);
		buffer.append("第二联系人地址修改为："+emergencyAddress);
		}
		if (StringUtils.isNotBlank(thirdInput.getString("emergency_name")) && StringUtils.isNotBlank(thirdInput.getString("emergency_mobile")))
		{
			thirdInterface.updateContact(thirdInput);
		}
		
		//step6:修改云柜台用户拓展信息 (T_ISMP_USER_EXTEND)对应数据,添加个人修改业务办理记录,并添加业务快照
		UserExtendModel userExtend = new UserExtendModel();
		userExtend.setUserId(userId);
		if (StringUtils.isNotBlank(address))
			userExtend.setAddress(address);
		if (StringUtils.isNotBlank(postCode))
			userExtend.setPostCode(postCode);
		if (StringUtils.isNotBlank(occupational))
			userExtend.setOccupation(occupational);
		if (StringUtils.isNotBlank(adapter))
			userExtend.setEducation(adapter);
		if (StringUtils.isNotBlank(email))
			userExtend.setEmail(email);
		if ( StringUtils.isNotBlank(control_person) )
        	userExtend.setControlPerson(control_person);
        if ( StringUtils.isNotBlank(benefit_person) )
        	userExtend.setBenefitPerson(benefit_person);
        if ( StringUtils.isNotBlank(credit_record) )
        	userExtend.setCreditrecord(credit_record);
		BusinessEntityModel entityModel = new BusinessEntityModel(userId, BusinessConstants.BUSINESS_UPDATE_INFO, DictionaryConstants.FLOW_LASTSTEP_NEXT, DictionaryConstants.BOL_TRUE,
				DictionaryConstants.DEAL_RESULT_SUCCESS, opSource, opStation, ip);
		userInfoService.updateUserExtend(userExtend, entityModel,buffer.toString());
		
		//step7:修改云柜台用户第二联系人信息 (t_ismp_billing_contact_name)对应数据
		LinkmanRecordModel linkmanRecordModel = new LinkmanRecordModel();
		if (StringUtils.isNotBlank(emergencyName))
		{
			linkmanRecordModel.setlinkmanName(emergencyName);
		}
		if (StringUtils.isNotBlank(emergencyRelation))
		{
			linkmanRecordModel.setLinkmanRelation(emergencyRelation);
			
		}
		if (StringUtils.isNotBlank(emergencyMobile))
		{
			linkmanRecordModel.setLinkmanTel(emergencyMobile);
		}
		if (StringUtils.isNotBlank(emergencyEmail))
		{
			linkmanRecordModel.setLinkmanEmail(emergencyEmail);
		}
		if (StringUtils.isNotBlank(emergencyAddress))
		{
			linkmanRecordModel.setLinkmanAdress(emergencyAddress);
		}
		if (null != emergencyId && 0 != emergencyId)
		{
			linkmanRecordModel.setLinkmanId(emergencyId);
		}
		if (!linkmanRecordModel.isEmpty())
		{
			linkmanRecordModel.setUserId(userId);
			linkmanRecordModel.setBusinessId(entityModel.getId());
			linkmanRecordModel.setNodeId(BusinessConstants.BUSINESS_UPDATE_INFO);
			LinkmanRecordService linkmanRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_LINKMANRECORD, LinkmanRecordService.class);
			int flag = linkmanRecordService.update(linkmanRecordModel);//更新第二联系人
			if(flag==0){
				linkmanRecordService.add(linkmanRecordModel);//添加第二联系人
			}
		}
		
		//step8:出参
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * @描述：获取入参并校验
	 * @作者：田源
	 * @时间：2016年9月7日 下午4:00:10
	 */
	private void checkInput()
	{
		fundAccount = this.getAndCheckBlankStrParam("fundid", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
		email = getStrParameter("email");
		address = getStrParameter("address");
		postCode = getStrParameter("post_code");
		occupational = getStrParameter("occupational");
		adapter = getStrParameter("adapter");
		String emergencyIdString = getStrParameter("emergency_id");
		if (StringUtils.isNotBlank(emergencyIdString))
		{
			emergencyId = Long.parseLong(getStrParameter("emergency_id"));
		}
		emergencyName = getStrParameter("emergency_name");
		emergencyRelation = getStrParameter("emergency_relation");
		emergencyTel = getStrParameter("emergency_tel");
		emergencyMobile = getStrParameter("emergency_mobile");
		emergencyEmail = getStrParameter("emergency_email");
		emergencyAddress = getStrParameter("emergency_address");
		opSource = getStrParameter("op_source");
        control_person = getStrParameter("control_person");
        benefit_person = getStrParameter("benefit_person");
        credit_record = getStrParameter("credit_record");
        
        tax_resident_person= getStrParameter("tax_resident_person");
	}
}
