package com.thinkive.fxc.ismp.bus.base.business.function;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.server.ResultVo;

public class Function1004913 extends ISMPBaseFunction
{
	
	private Long userId;
	
	private String businessCode;
	
	private String flag;
	
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		BusinessEntityModel businessEntityModel = businessEntityService.queryNotCompleteByUserIdAndBusinessCodeOrFlag(userId, businessCode, flag);
		if (null == businessEntityModel || businessEntityModel.isEmpty())
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW);
		}
		String dealResult = businessEntityModel.getDealResult();//|| DictionaryConstants.DEAL_RESULT_REVIEW_THE_REJECTED.equals(dealResult)
		if (!DictionaryConstants.FLOW_LASTSTEP_NEXT.equals(businessEntityModel.getNodeId()) || DictionaryConstants.DEAL_RESULT_NEEDAUTIT.equals(dealResult)
				|| DictionaryConstants.DEAL_RESULT_NEEDPP.equals(dealResult) || DictionaryConstants.DEAL_RESULT_RUN_BATCH_REJECTED.equals(dealResult)
				|| StringUtils.isBlank(dealResult))
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOTCOMPLETE);
		}
		BusinessEntityModel updateModel = new BusinessEntityModel();
		updateModel.setId(businessEntityModel.getId());
		updateModel.setIsComplete(DictionaryConstants.BOL_TRUE);
		businessEntityService.update(updateModel);
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		businessCode = this.getAndCheckBlankStrParam("businessCode", ErrorCodeCheckInput.BLANK_BUSINESSCODE);
		flag = this.getStrParameter("flag");
	}
}
