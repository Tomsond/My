package com.thinkive.fxc.ismp.bus.base.common;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.MapHelper;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserSnapShotService;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.RSA;
import com.thinkive.fxc.ismp.bus.business.constants.RedisCacheKeyConstants;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.constant.ErrorCodeBusiness;
import com.thinkive.redis.client.JedisClient;
import com.thinkive.server.BaseFunction;
import com.thinkive.server.InvokeException;

/**
 * 描述: 云柜台基础Functon
 * 版权: Copyright (c) 2010
 * 公司: 深圳市思迪信息技术股份有限公司
 * 作者: 刘恺
 * 版本: 2.0.0 
 * 创建日期: 2016年8月12日 
 * 创建时间: 下午2:08:30
 */
public abstract class ISMPBaseFunction extends BaseFunction
{
	
	protected static Logger logger = Logger.getLogger(ISMPBaseFunction.class);
	
	private static final String ENCRYPT_RSA = "encrypt_rsa:";
	
	private Map<String, String> param;
	
	/**
	 * 操作站点
	 */
	protected String opStation;
	
	/**
	 * ip地址
	 */
	protected String ip;
	
	/**
	 * 操作渠道 0：pc/web，1：H5客户端，2： Android平板客户端，3： Android手机客户端，4：  iPhone客户端
	 */
	protected long userId;
	protected String businessCode;
	protected String opSource;
	private String nodeid;
	protected String mac;
	
	protected String fundAccount; //用户资金帐号
	
	protected String entrust_way;//委托方式
	protected String stock_account;//股东号
	protected String riskvalue;//测评分数
	protected String risklevel;//测评等级
	protected String subitemname;//测评等级名称
	protected String survey_sn;//问卷类型
	protected String bank_name;//存管银行
	protected String bank_card_number;//银行卡号
	protected String operation_type;//存管操作类型
	protected String amount_of_money;//转账金额
	protected String market;//交易市场
	protected String describe;//描述
	
	
	private boolean operatingSite = DictionaryConstants.BOL_TRUE.equals(Configuration.getString(SystemConstants.OPERATING_SITE_FLAG));

	/**
	 * 描述：execute执行前行此方法
	 * 作者：刘恺
	 * 时间：2016年8月22日 下午1:33:02
	 */
	@Override
	public void before()
	{
		param = super.getArrayParameter();
		if (SystemConstants.WEB_TYPE_C.equals(Configuration.getString(SystemConstants.CONFIG_KEY_SYSTEM_WEBTYPE, SystemConstants.WEB_TYPE_JAVA)))
		{
			try
			{
				paramsInterceptor();
			}
			catch (Exception e)
			{
				logger.error("参数拦截异常", e);
			}
		}
		//step1：初始化基本入参
		initVar();
		//操作站点数据缓存redis 
		if (operatingSite)
		{
			JedisClient jedisClient = new JedisClient(SystemConstants.REDIS_DATASOURCE);
			if(StringHelper.isNotEmpty(fundAccount)&&StringHelper.isNotEmpty(opStation)){
			  jedisClient.set(fundAccount, opStation);
			}
			String op_station =jedisClient.getString(fundAccount);
			if(StringHelper.isNotEmpty(op_station)){
				logger.error("操作站点缓存redis成功："+op_station);
			}else{
				logger.error("操作站点缓存redis失败："+op_station);
			}
		}
	}
	
	/**
	 * 描述：获取并校验入参是否为空
	 * 作者：刘恺
	 * 时间：2016年8月12日 下午2:05:26
	 * @param key 入参字段
	 * @param errorNo 入参为空错误编号
	 * @return
	 */
	public String getAndCheckBlankStrParam(String key, int errorNo)
	{
		String value = StringUtils.trimToEmpty(getStrParameter(key));
		if (StringUtils.isBlank(value))
		{
			throw new BusinessException(errorNo);
		}
		return value;
	}
	
	/**
	 * 描述：获取并校验入参是否为空
	 * 作者：MIKE
	 * 时间：2018年3月23日 下午2:05:26
	 * @param key 入参字段
	 * @param errorNo 入参为空错误信息
	 * @return
	 */
	public String getCheckBlankStrParam(String key) throws InvokeException
	{
		String value = StringUtils.trimToEmpty(getStrParameter(key));
		if (StringUtils.isBlank(value))
		{
			throw new InvokeException(-1,"入参["+key+"]不能为空！");
		}
		return value;
	}
	
	/**
	 * 描述：格式化数字入参
	 * 作者：刘恺
	 * 时间：2016年8月12日 下午1:57:29
	 * @param value 获取到的数字入参内容
	 * @param errorNo 格式不正确错误编号
	 * @return
	 */
	public int formatIntParam(String value, int errorNo)
	{
		try
		{
			return Integer.parseInt(value);
		}
		catch (NumberFormatException e)
		{
			throw new BusinessException(errorNo);
		}
	}
	
	/**
	 * 描述：格式化Long数字入参
	 * 作者：刘恺
	 * 时间：2016年8月12日 下午1:57:29
	 * @param value 获取到的数字入参内容
	 * @param errorNo 格式不正确错误编号
	 * @return
	 */
	public long formatLongParam(String value, int errorNo)
	{
		try
		{
			return Long.parseLong(value);
		}
		catch (NumberFormatException e)
		{
			throw new BusinessException(errorNo);
		}
	}
	
	/**
	 * 描述：格式化日期入参
	 * 作者：刘恺
	 * 时间：2016年8月12日 下午2:26:06
	 * @param dateString 获取到的时间入参内容
	 * @param pattern
	 * @param errorNo
	 * @return
	 */
	public Date formatDateParam(String dateString, String pattern, int errorNo)
	{
		SimpleDateFormat dateFormat = new SimpleDateFormat(pattern);
		try
		{
			return dateFormat.parse(dateString);
		}
		catch (ParseException e)
		{
			throw new BusinessException(errorNo);
		}
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午8:55:24
	 */
	private void initVar()
	{
		userId = this.getIntParameter("user_id");
		businessCode = this.getStrParameter("businessCode");
		nodeid = this.getStrParameter("nodeId");
		opStation = this.getStrParameter("op_station");
		ip = this.getStrParameter("ip");
		mac = this.getStrParameter("mac");
		opSource = this.getStrParameter("op_source");
		fundAccount = this.getStrParameter("fundAccount");
		entrust_way = this.getStrParameter("entrust_way");
		stock_account = this.getStrParameter("stock_account");
		riskvalue = this.getStrParameter("riskvalue");
		risklevel = this.getStrParameter("risklevel");
		subitemname = this.getStrParameter("subitemname");
		survey_sn = this.getStrParameter("survey_sn");
		bank_name = this.getStrParameter("bank_name");
		bank_card_number = this.getStrParameter("bank_card_number");
		operation_type = this.getStrParameter("operation_type");
		amount_of_money = this.getStrParameter("amount_of_money");
		market = this.getStrParameter("market");
		describe= this.getStrParameter("describe");
		
	}
	
	/**
	 * @描述：参数拦截
	 * @作者：刘恺
	 * @创建时间: 2017年3月9日 下午2:45:10
	 * @throws Exception
	 */
	public void paramsInterceptor() throws Exception
	{
		logger.info("进入参数拦截器");
		if (param != null)
		{
			String passwordFields = Configuration.getString("system.passwordFields");
			if (StringHelper.isNotBlank(passwordFields))
			{
				String[] passwords = StringHelper.split(passwordFields, "|");
				if (passwords != null && passwords.length > 0)
				{
					for (int i = 0; i < passwords.length; i++)
					{
						String pwd = passwords[i];
						String encrypt = MapHelper.getString(param, pwd);
						if ("mobile_no".equals(pwd) && !encrypt.startsWith(ENCRYPT_RSA))
						{
							param.put(pwd, "");
						}
						if (StringHelper.isNotBlank(encrypt) && encrypt.startsWith(ENCRYPT_RSA))
						{
							encrypt = encrypt.substring(ENCRYPT_RSA.length());
							encrypt = RSA.decrypt(encrypt);
							param.put(pwd, encrypt);
						}
					}
				}
			}
		}
	}
	
	/**
	* 
	* 描述：
	* 作者：李炜
	* 时间：Jul 10, 2013 2:10:34 PM
	* @return
	* 
	* 修改：肖明
	* 1.使用泛型
	* 2.方法名起的有问题，建议修改一下
	*/
	public Map<String, String> getArrayParameter()
	{
		if (SystemConstants.WEB_TYPE_C.equals(Configuration.getString(SystemConstants.CONFIG_KEY_SYSTEM_WEBTYPE, SystemConstants.WEB_TYPE_JAVA)))
		{
			return param;
		}
		return super.getArrayParameter();
	}
	
	/**
	* 描述：返回字串Parameter,若不存在，则返回空字串
	* 作者：李炜
	* 时间：Jul 10, 2013 1:55:34 PM
	* @param fieldName
	* @return
	*/
	public String getStrParameter(String fieldName)
	{
		if (SystemConstants.WEB_TYPE_C.equals(Configuration.getString(SystemConstants.CONFIG_KEY_SYSTEM_WEBTYPE, SystemConstants.WEB_TYPE_JAVA)))
		{
			String value = param.get(fieldName);
			return (StringHelper.isEmpty(value)) ? "" : value;
		}
		return super.getStrParameter(fieldName);
	}
	
	 protected String parametersToString()
	    {
	        int num = getRequest().getFieldCount();
	        StringBuffer str = new StringBuffer();
	        for (int i = 0; i < num; i++)
	        {
	            String name = getRequest().getFieldName(i);
	            String value = getRequest().getFieldValue(name);
	            //过滤密码相关入参
	            String[] pwdContents = new String[] { "pwd", "password", "loginPass", "PINCode" };
	            for (int j = 0; j < pwdContents.length; j++)
	            {
	                if ( (name.toLowerCase()).contains((pwdContents[j].toLowerCase())) )
	                {
	                    value = "******";
	                }
	            }
	            if ( StringHelper.isBlank(str.toString()) )
	            {
	                str.append(name + "=" + value);
	            }
	            else
	            {
	                str.append("," + name + "=" + value);
	            }
	            
	        }
	        String returnStr = "传入参数为：" + str;
	        return returnStr;
	    }
	 
		/**
		 * @描述：获取新业务实例
		 * @作者：刘恺
		 * @时间：2016年8月28日 上午10:38:27
		 * @return
		 */
		protected BusinessEntityModel getNewBusinessEntity()
		{
			BusinessEntityModel businessEntityModel = new BusinessEntityModel();
			businessEntityModel.setUserId(userId);
			businessEntityModel.setOpSource(opSource);
			businessEntityModel.setOpStation(opStation);
			businessEntityModel.setBusinessCode(businessCode);
			businessEntityModel.setIsComplete(DictionaryConstants.BOL_FALSE);
			businessEntityModel.setIp(ip);
			businessEntityModel.setNodeId(nodeid);
			return businessEntityModel;
		}
		
}
