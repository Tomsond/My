package com.thinkive.fxc.ismp.bus.business.entrust.function;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.entrust.contants.EntrustDictionaryInfoContants;
import com.thinkive.fxc.ismp.bus.business.entrust.contants.EntrustErrorCodeContants;
import com.thinkive.fxc.ismp.bus.business.entrust.model.EntrustModel;
import com.thinkive.fxc.ismp.bus.business.entrust.service.EntrustService;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 委托方式-查询并同步
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月5日 下午3:33:53
 */
public class Function1004151 extends ISMPBaseFunction
{
    private String          fundAccount;     //资金账号
                                             
    private Long            userId;          //用户ID
                                             
    private UserInfoService userInfoService;
    
    private ThirdInterface  thirdInterface;
    
    private EntrustService  entrustService;
    
    public ResultVo execute() throws Exception
    {
        //step1:获取入参并校验
        checkInput();
        
        //step2:根据资金账号获取,获取用户和用户账号信息
        userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
        UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);
        
        //step3:根据资金账号从第三方接口获取该资金账号开通的委托方式
        DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
        thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
        DataRow outPut = thirdInterface.getEntrustOpenInfo(thirdInput);
        String entrustString = outPut.getString("entrustString");
        @SuppressWarnings("unchecked")
        List<String> entrustList = (List<String>) outPut.get("entrustList");
        
        //step4:从数据库获取所有的委托方式类型数据
        entrustService = SpringHelper.getBean(EntrustDictionaryInfoContants.SERVICE_ID_ENTRUSTINFO, EntrustService.class);
        List<EntrustModel> entrustModels = entrustService.queryAll();
        if ( entrustModels == null || entrustModels.size() == 0 )
        {
            throw new BusinessException(EntrustErrorCodeContants.NO_ENTRUST);
        }
        
        //step5:遍历entrustList,将其转换为map,map中数据结构key为EntrustCode,value为0或1 ,便于接下来的比对
        Map<String, String> thirdEntrustMap = new HashMap<String, String>();
        if(entrustList!=null&&entrustList.size()>0){
	        for (int i = 0; i <entrustList.size(); i++) {
	        	thirdEntrustMap.put(entrustList.get(i), DictionaryConstants.BOL_TRUE);
			}
        }
        //step6:遍历数据库中配置的委托方式,并通过比对，将委托方式配置每条记录加上开通和未开通状态，便于前端展示
       if(entrustModels!=null&&entrustModels.size()>0){
	        for (EntrustModel infoItem : entrustModels)
	        {
	            String isOpened = thirdEntrustMap.get(infoItem.getEntrustCode());//用户是否已开通该委托方式标识(0：未开通，1：已开通)
	            if ( DictionaryConstants.BOL_TRUE.equals(isOpened) )
	            {
	                infoItem.setEntrustStatus(DictionaryConstants.BOL_TRUE);//设置为已开通
	            }
	            else
	            {
	                infoItem.setEntrustStatus(DictionaryConstants.BOL_FALSE);//设置为未开通
	            }
	            
	        }
       }
        //step7:保存用户的委托方式到数据库
        entrustService.addOrUpdateUserEntrust(userId, entrustString);
        
        //step8：出参
        ResultVo resultVo = new ResultVo();
        resultVo.setResult(entrustModels);
        return resultVo;
    }
    
    private void checkInput() throws InvokeException
    {
        fundAccount = this.getAndCheckBlankStrParam("zj_account", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
        userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
    }
}
