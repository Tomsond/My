package com.thinkive.fxc.ismp.bus.base.business.function;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ImageRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.RejectRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.ImageRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.RejectRecordService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.server.ResultVo;

/**
 * @描述: 通用---驳回影像资料上传，不用信息确认
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2017年4月18日 下午10:21:22
 */
public class Function1004927 extends ISMPBaseFunction
{
	
	private Long userId;//用户编号
	
	private Long businessId;//业务实例编号
	
	private String nodeId;//节点英文标识
	
	private String mediaCode; //影像资料编号
	
	private String imgSecretKey; //图像密钥
	
	private String imgPath; //图像路径
	
	public ResultVo execute() throws Exception
	{
		initVar();
		
		//step1:查询业务办理实例
		BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
		BusinessEntityModel businessEntityModel = businessEntityService.queryByUserIdAndBusinessId(userId, businessId);
		if (businessEntityModel == null)
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW);
		}
		String dealResult = businessEntityModel.getDealResult();
		
		//如果当前状态不是驳回，返回异常
		if (!DictionaryConstants.DEAL_RESULT_REVIEW_THE_REJECTED.equals(dealResult) && !DictionaryConstants.DEAL_RESULT_RUN_BATCH_REJECTED.equals(dealResult))
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_OPERATION_SEQUENCE_ERROR);
		}
		
		//查询驳回记录
		RejectRecordService rejectRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_REJECTRECORD, RejectRecordService.class);
		RejectRecordModel rejectRecord = rejectRecordService.queryByBidAndStepAndStepChild(businessEntityModel.getId(), nodeId, mediaCode);
		
		//如果没有驳回信息，返回异常
		if (rejectRecord == null)
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_NO_REJECT_RECORD);
		}
		
		//添加影像资料上传记录
		ImageRecordService imageRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_IMAGERECORD, ImageRecordService.class);
		ImageRecordModel imageRecordModel = new ImageRecordModel();
		imageRecordModel.setBusinessId(businessId);
		imageRecordModel.setImagePath(imgPath);
		imageRecordModel.setMediaCode(mediaCode);
		imageRecordModel.setNodeId(nodeId);
		imageRecordModel.setSecretKey(imgSecretKey);
		imageRecordService.addOrUpdate(imageRecordModel);
		
		//修改驳回状态
		rejectRecord.setIsFix(DictionaryConstants.BOL_TRUE);
		rejectRecordService.updateById(rejectRecord);
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午8:55:24
	 */
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		businessId = this.formatLongParam(this.getAndCheckBlankStrParam("businessId", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		nodeId = this.getAndCheckBlankStrParam("nodeId", ErrorCodeCheckInput.BLANK_NODEID);
		mediaCode = this.getAndCheckBlankStrParam("mediaCode", ErrorCodeCheckInput.BLANK_IMG_TYPE);
		imgSecretKey = this.getAndCheckBlankStrParam("imgSecretKey", ErrorCodeCheckInput.BLANK_IMG_IMGSECRETKEY);
		imgPath = this.getAndCheckBlankStrParam("imgPath", ErrorCodeCheckInput.BLANK_IMG_IMGPATH);
	}
}
