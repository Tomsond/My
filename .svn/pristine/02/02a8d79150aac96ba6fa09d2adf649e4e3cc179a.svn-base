package com.thinkive.fxc.ismp.bus.base.business.function;

import java.util.Map;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.SurveyOperationService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.utils.ModularNodeUtil;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.server.ResultVo;

/**
 * @描述: 模块化节点提交---提交问卷
 *       注意：
 *          1.如果有其他业务处理，需要单独写function实现，统一的functon无法处理所有业务在开始节点的条件判断和其他数据处理
 *          2.如果是最后一步，需要单独写function实现，统一的function无法处理所有业务最后的第三方接口调用情况
 *       使用场景：不是最后一步，也不是第一步
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月28日 上午11:14:27
 */
public class Function1004901 extends IsmpFlowBaseFunction
{
	
	private String answerStr;//答案信息
	
	public ResultVo execute() throws Exception
	{
		checkFlowConfig();
		
		initVar();
		
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		
		//step1：获取并检测属性配置是否正确
		Map<String, String> surveyNodeProperty = ModularNodeUtil.checkSurveyNodeProperty(nodePropertyConfigModelList);
		
		//step2：校验问卷是否通过，如果通过则保存答案
		SurveyOperationService surveyOperationService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SURVEYOPERATION, SurveyOperationService.class);
		DataRow checkResult = surveyOperationService.surveyCheckAndSave(answerStr, userInfo, surveyNodeProperty, businessEntityAndConfigVO.getId(), submitBprocNodeConfigAndDefineVO.getNodeId());
		resultVo.setResult("checkResult", checkResult);
		boolean check_flag = DictionaryConstants.BOL_TRUE.equals(checkResult.getString("check_flag"));
		//如果校验失败，返回结构
		if (!check_flag)
		{
			declareNotChangeNodeId();
			//校验通过，但不的新的业务实例，保存用户问卷结果信息
			return resultVo;
		}
		
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		answerStr = this.getStrParameter("answerStr");
	}
	
	/**
	 * @描述：校验节点配置是否正确
	 * @作者：刘恺
	 * @时间：2016年8月28日 下午11:17:20
	 */
	private void checkFlowConfig()
	{
		if (isNewBusiness())
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_CONFIG_ERROR);
		}
		boolean isLastStep = DictionaryConstants.FLOW_LASTSTEP_NEXT.equals(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
		if (isLastStep)
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_CONFIG_ERROR);
		}
	}
}
