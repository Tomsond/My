package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.function;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ThirdBankModel;
import com.thinkive.fxc.ismp.bus.base.business.constants.AgreeNodePropertyConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.AgreeRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.AgreeRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.SignAndVerifyService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserSnapShotService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.CertConstants;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankContants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.model.UserBankBindModel;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.ThirdBankService;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.vo.ThirdBankBusinessInfoVo;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 三方存管修改(注销后绑定) --- 第二步：将银行卡和资金账号绑定
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月2日 上午11:09:15
 */
public class Function1004526 extends ISMPBaseFunction
{
	
	private Long userId; //用户ID
	
//	private Long businessId; //业务实例ID
	
	private Long newBankConfigId; //新绑定银行卡对应的三方存管配置编号
	
	private String cardNum; //银行卡号
	
	private String cardPassword; //银行卡密码
	
	private String jsondata; //签名json字符串
	
	private ThirdBankService thirdBankService;
	
	private ThirdInterface thirdInterface;
	
	private UserInfoService userInfoService;
	
	private UserSnapShotService userSnapShotService;
	
	private AgreeRecordService agreeRecordService;

	private String zjPassword; //资金密码

	private Long oldBankConfigId; //旧银行卡对应的三方存管配置编号

	private String opAccount; //旧银行对应的资金账号
	
	@Override
	public ResultVo execute() throws Exception
	{
		//step1:获取入参并校验
		checkInput();

		//step2:获取业务办理数据
		thirdBankService = SpringHelper.getBean(ThirdBankContants.SERVICE_ID_THIRDBANK, ThirdBankService.class);
		//step4:判断是否是中登时间
		thirdBankService.checkTradeTime();

		ThirdBankModel oldThirdBankModel = thirdBankService.queryThirdBankModelById(oldBankConfigId);//根据ID获取对应银行的三方存管配置信息
		//没有这种三方存管配置
		if (oldThirdBankModel == null)
		{
			throw new BusinessException(ThirdBankErrorCode.NO_BANKCODE);
		}

		ThirdBankModel newThirdBankModel = thirdBankService.queryThirdBankModelById(newBankConfigId);//根据ID获取对应银行的三方存管配置信息
		//没有这种三方存管配置
		if (newThirdBankModel == null)
		{
			throw new BusinessException(ThirdBankErrorCode.NO_BANKCODE);
		}

		//同银行的银行卡不允许变更
		String newBankCode = newThirdBankModel.getBankNo();
		if (oldThirdBankModel.getBankNo().equals(newThirdBankModel.getBankNo()))
		{
			throw new BusinessException(ThirdBankErrorCode.SAME_BANK_CANNOT__MODIFY);//注销的三方存管银行不能与要绑定的银行一致
		}

		//step2:检测需要注销的银行卡是否可操作
		UserBankBindModel bankBindModel = thirdBankService.queryByBankCodeAndFundAccountAndUserId(oldThirdBankModel.getBankNo(), opAccount, userId);
		if (null == bankBindModel)
		{
			throw new BusinessException(ThirdBankErrorCode.NO_MATCHING_USERBANKBIND);//用户没有匹配的银行卡
		}

		userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);

		//step4:校验是否满足注销条件
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		thirdInput.set("bank_code", oldThirdBankModel.getLinkBankOrg());
		thirdInput.set("card_num", bankBindModel.getAccount());
		thirdInput.set("zj_password", zjPassword);
		thirdInput.set("op_account", opAccount);
		thirdInput.set("money_type", bankBindModel.getMoneyType());
		thirdInput.set("banktype", oldThirdBankModel.getLinkBankOrg());

		thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow cancelResult = thirdInterface.cancelAccountBindBankCard(thirdInput);
		Boolean isCancleFlag = cancelResult.getBoolean("flag");//true：成功 false:失败
		if (!isCancleFlag)
		{
			throw new InvokeException(cancelResult.getString("message"),ThirdBankErrorCode.CANCEL_THIRDBANKBIND_FAILURE);
		}
		else
		{
			Long businessId = addBusinessFlow(bankBindModel);
			if (null == businessId)
			{
				throw new BusinessException(ThirdBankErrorCode.ADD_THIRDBANK_BUSINESS_FAILURE);//添加业务办理记录失败
			}



			ThirdBankBusinessInfoVo thirdBankBusinessInfoVo = thirdBankService.queryByBusinessId(businessId);
			if (null == thirdBankBusinessInfoVo)
			{
				throw new BusinessException(ErrorCodeSystem.BUSINESS_NOFLOW);//业务办理数据不存在
			}

			//step5:判断用户银行卡是否已经绑定三方存管
			thirdBankService.checkCardExit(cardNum, userId);

			//step6:检查银行绑定类型的帐号密码是否需要
			thirdBankService.checkBindBankInfo(newThirdBankModel, cardNum, cardPassword);

			//step7:绑定银行卡数量上限验证，目前最多绑定五张银行卡
			thirdBankService.checkBankCount(userInfoVo, ThirdBankContants.THIRDBANK_OP_TYPE_CANCELANDBIND);
			//获取需要提交的协议信息
			Map<String, DataRow> signParamsMap = getNeedSignAgereeInfo(newThirdBankModel);
			signParamsMap.remove("dhcgfxjjs");
			//提交的所有需要签署的协议
			SignAndVerifyService signAndVerifyService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_SIGNANDVERIFY, SignAndVerifyService.class);
			List<Map<String, String>> allSignList = signAndVerifyService.verifySignTextAndSubmitThirdSpecial(jsondata, signParamsMap);

			//step7:将银行卡和资金账号进行绑定
			String success_type;//绑定成功方式（0：绑定失败后，自动预指定成功 1：正常绑定成功）
			String bindType = newThirdBankModel.getBindType();//三方存管银行签约方式（1：一步式；2：预指定）
			DataRow bindthirdInput = DataFormatUtils.packThirdInput(userInfoVo);
			bindthirdInput.set("bank_code", newThirdBankModel.getLinkBankOrg());
			bindthirdInput.set("card_num", cardNum);
			bindthirdInput.set("card_password", cardPassword);
			bindthirdInput.set("bindtype", newThirdBankModel.getBindType());
			thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
			DataRow bindResult = thirdInterface.accountBindBankCard(bindthirdInput);
		/* 如果绑定失败，处理分两种情况：
		 1 如果该银行本身的三方存管绑定方式为预指定，则直接抛出异常 。
		 2 如果该银行本身的三方存管绑定方式为一步式，则取该条记录的绑定错误次数，如果绑定错误没有超过系统配置的最大错误次数，则直接去更新错误数，抛出异常  ；
					 如果绑定错误超过系统配置的最大错误次数，自动预指定，如果预指定成功，记录新银行卡信息，修改业务办理为完成，否则抛出异常*/
			if (!bindResult.getBoolean("flag")) {
				//1：如果用户选择的预指定则直接报错
				if (ThirdBankContants.BINDTYPE_PRE_SPECIFIED.equals(bindType)) {
					throw new BusinessException(ThirdBankErrorCode.ADDORUPDATEUSERBANKBIND_CODE, bindResult.getString("message"));
				}
				//2：如果用户选择的一步式，则判断错误次数，超过错误次数则直接预指定
				int bindErrorCount = thirdBankBusinessInfoVo.getBindErrorCount() + 1;//计算绑定失败次数
				//如果绑定失败次数超过限制，自动预指定
				if (bindErrorCount > Configuration.getInt(ThirdBankContants.UPDATE_BANKERRORMAX)) {
					bindthirdInput.remove("card_num");
					bindthirdInput.remove("card_password");
					bindthirdInput.set("bindtype", ThirdBankContants.BINDTYPE_PRE_SPECIFIED);
					DataRow yzdResult = thirdInterface.accountBindBankCard(bindthirdInput);
					//如果预指定失败，记录绑定错误次数，并抛出异常
					if (!yzdResult.getBoolean("flag")) {
						thirdBankService.updateBindErrorCount(businessId, bindErrorCount);
						throw new BusinessException(ThirdBankErrorCode.ADDORUPDATEUSERBANKBIND_CODE, yzdResult.getString("message"));
					}
					//如果预指定成功，记录新银行卡信息，修改业务办理为完成
					updateThirdBankBusinessInfo(newBankCode, cardNum, thirdBankBusinessInfoVo);//预指定成功是不需要记录卡号的，修改业务办理为完成
					success_type = "0";//绑定失败后，自动预指定成功

					//step11：协议留痕
					//根据用户提交的协议获取协议对象
					List<AgreeRecordModel> agreeRecordModels = signAndVerifyService.getAgreeRecordModels(userId, allSignList, businessId, BusinessConstants.BUSINESS_THIRDBANK, "");
					agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
					agreeRecordService.addBatch(agreeRecordModels, businessId, BusinessConstants.BUSINESS_THIRDBANK);

					//添加业务办理快照
					userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT, UserSnapShotService.class);
					userSnapShotService.addUserSnapShot(businessId, userInfoVo);
				}
				//错误次数也没有到达最大值，记录错误次数
				else {
					thirdBankService.updateBindErrorCount(businessId, bindErrorCount);
					throw new BusinessException(ThirdBankErrorCode.ADDORUPDATEUSERBANKBIND_CODE, bindResult.getString("message"));
				}
			}else
			{
				//如果绑定成功，记录新银行卡信息，修改业务办理为完成
				updateThirdBankBusinessInfo(newBankCode, cardNum, thirdBankBusinessInfoVo);
				success_type = "1";//正常绑定成功

				//step11：协议留痕
				//根据用户提交的协议获取协议对象
				List<AgreeRecordModel> agreeRecordModels = signAndVerifyService.getAgreeRecordModels(userId, allSignList, businessId, BusinessConstants.BUSINESS_THIRDBANK,"");
				agreeRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_AGREERECORD, AgreeRecordService.class);
				agreeRecordService.addBatch(agreeRecordModels, businessId, BusinessConstants.BUSINESS_THIRDBANK);

				//添加业务办理快照
				userSnapShotService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERSNAPSHOT, UserSnapShotService.class);
				userSnapShotService.addUserSnapShot(businessId, userInfoVo);
			}
			DataRow result = new DataRow();
			result.set("success_type", success_type);
			ResultVo resultVo = new ResultVo();
			resultVo.setResult(result);
			resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
			resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
			return resultVo;

		}

		

	}
	
	private void checkInput() throws InvokeException
	{
//		businessId = Long.valueOf(this.getAndCheckBlankStrParam("business_id", ErrorCodeCheckInput.BLANK_BUSINESSID));
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
		newBankConfigId = Long.valueOf(this.getAndCheckBlankStrParam("newBankConfigId", ErrorCodeCheckInput.BLANK_ENUM_BANKCONFIGID));//三方存管配置编号
		jsondata = this.getAndCheckBlankStrParam("jsondata", ErrorCodeCheckInput.BLANK_FORMAT_SIGNJSON);//签名json
		cardNum = this.getStrParameter("cardNo");//银行卡号
		cardPassword = this.getStrParameter("cardPassword");//银行卡密码
		opAccount = this.getAndCheckBlankStrParam("op_account", ErrorCodeCheckInput.BALNK_OP_ACCOUNT);
		zjPassword = this.getStrParameter("zj_password");
		oldBankConfigId = Long.valueOf(this.getAndCheckBlankStrParam("oldBankConfigId", ErrorCodeCheckInput.BLANK_ENUM_BANKCONFIGID));//三方存管配置编号
		fundAccount = this.getAndCheckBlankStrParam("fund_account", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
	}
	
	/**
	 * @描述：更改三方存管业务办理信息为完成
	 * @作者：田源
	 * @时间：2016年9月2日 下午4:21:23
	 * @param bank_code
	 * @param bank_num
	 * @param bankBusinessInfoVo
	 * @throws Exception 
	 */
	private void updateThirdBankBusinessInfo(String bank_code, String bank_num, ThirdBankBusinessInfoVo bankBusinessInfoVo) throws Exception
	{
		bankBusinessInfoVo.setNodeId(DictionaryConstants.FLOW_LASTSTEP_NEXT);
		bankBusinessInfoVo.setIsComplete(DictionaryConstants.BOL_TRUE);
		bankBusinessInfoVo.setDealResult(DictionaryConstants.DEAL_RESULT_SUCCESS);
		bankBusinessInfoVo.setNewBankcode(newBankConfigId.toString());
		bankBusinessInfoVo.setNewBanknum(bank_num);
		Boolean flag = thirdBankService.updateThirdBankBusinessInfoVo(bankBusinessInfoVo);
		if (!flag)
		{
			throw new BusinessException(ThirdBankErrorCode.MODIFY_FALURE_THIRDBANK);
		}
	}
	
	/**
	 * @描述：获取业务办理需要签署的协议信息
	 * @作者：刘恺
	 * @时间：2017年2月22日 下午1:12:41
	 * @param thirdBankModel
	 * @return
	 */
	private Map<String, DataRow> getNeedSignAgereeInfo(ThirdBankModel thirdBankModel)
	{
		String agreeNos = thirdBankModel.getAgreeNo();
		String[] agreeNoArr = agreeNos.split(",");
		Map<String, DataRow> signParamsMap = new HashMap<String, DataRow>();
		for (String agreeNo : agreeNoArr)
		{
			DataRow signParams = new DataRow();
			signParams.set(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTYPE, CertConstants.SIGN_TYPE_NOCERT);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
			signParams.set(AgreeNodePropertyConstants.PROPERTY_KEY_SUBMITTYPE, CertConstants.SUBMIT_TYPE_LOCAL);//提交方式 0-否，1-是，默认值0
			signParams.set(AgreeNodePropertyConstants.PROPERTY_KEY_SIGNTEXTTYPE, CertConstants.SIGN_SOURCE_FLAG_MD5);//签署类型 0-不签署，1-中登证书签署，2-自建证书签署,默认值0
			signParamsMap.put(agreeNo, signParams);
		}
		return signParamsMap;
	}

	/**
	 * @描述：添加业务办理记录
	 * @作者：田源
	 * @时间：2016年9月2日 上午10:29:01
	 * @param user_id
	 * @param fund_account
	 * @param bank
	 * @param op_source
	 * @param new_bankcode
	 * @return
	 * @throws Exception
	 */
	private Long addBusinessFlow(UserBankBindModel bank) throws Exception
	{
		ThirdBankBusinessInfoVo bankBusinessInfoVo = new ThirdBankBusinessInfoVo();
		bankBusinessInfoVo.setUserId(userId);
		bankBusinessInfoVo.setNodeId(ThirdBankContants.THIRDBANK_ZXBD_ONESTEP);//注销后绑定分两步，此处为注销成功未绑定
		bankBusinessInfoVo.setIsComplete(DictionaryConstants.BOL_FALSE);//未完成
		bankBusinessInfoVo.setOpSource(opSource);
		bankBusinessInfoVo.setOpStation(opStation);
		bankBusinessInfoVo.setIp(ip);
		bankBusinessInfoVo.setFundAccount(fundAccount);
		bankBusinessInfoVo.setOpType(ThirdBankContants.THIRDBANK_OP_TYPE_CANCELANDBIND);//分两个function的方式，先注销，后绑定
		bankBusinessInfoVo.setOldBankcode(oldBankConfigId.toString());
		bankBusinessInfoVo.setNewBankcode(newBankConfigId.toString());
		bankBusinessInfoVo.setOldBanknum(bank.getAccount());
		bankBusinessInfoVo.setBindErrorCount(0);
		return thirdBankService.addThirdBankBusinessInfoVo(bankBusinessInfoVo);
	}
}
