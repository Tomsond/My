package com.thinkive.fxc.ismp.bus.business.function;

import java.util.ArrayList;
import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.ResultVo;

/** 对账单--交易对账单
 */
public class Function1004476 extends ISMPBaseFunction
{
	
	private Long userId;//用户ID
	
	private String fundid; //资金帐号
	
	private String strdate; //起始日期
	
	private String enddate; //终止日期
	
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		UserInfoVo userInfo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundid);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfo);
		thirdInput.set("strdate", strdate);
		thirdInput.set("enddate", enddate);
		List<DataRow> pageList = thirdInterface.accountStatement(thirdInput);
		List<DataRow> outList = new ArrayList<DataRow>();
		for (DataRow resultItem : pageList)
		{
			DataRow outputItem = new DataRow();
			outputItem.set("orderdate", resultItem.getString("orderdate"));
			outputItem.set("digestname", resultItem.getString("digestname"));
			outputItem.set("client_id", resultItem.getString("client_id"));
			outputItem.set("orgid", resultItem.getString("orgid"));
			outputItem.set("fundid", resultItem.getString("fundid"));
			outputItem.set("secuid", resultItem.getString("secuid"));
			outputItem.set("stkcode", resultItem.getString("stkcode"));
			outputItem.set("stkname", resultItem.getString("stkname"));
			outputItem.set("matchqty", resultItem.getString("matchqty"));
			outputItem.set("matchprice", resultItem.getString("matchprice"));
			outputItem.set("matchamt", resultItem.getString("matchamt"));
			outputItem.set("fee_sxf", resultItem.getString("fee_sxf"));
			outputItem.set("fee_yhs", resultItem.getString("fee_yhs"));
			outputItem.set("fee_ghf", resultItem.getString("fee_ghf"));
			outList.add(outputItem);
		}
		ResultVo resultVo = new ResultVo();
		resultVo.setResult("pageList", outList);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		fundid = this.getAndCheckBlankStrParam("fundid", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
		strdate = this.getStrParameter("strdate"); //起始日期
		enddate = this.getStrParameter("enddate"); //终止日期
	}
	
}
