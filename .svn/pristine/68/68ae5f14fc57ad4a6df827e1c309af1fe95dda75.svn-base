package com.thinkive.fxc.ismp.bus.base.util;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

import com.thinkive.base.jdbc.DBPage;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.StringHelper;

/**
 * @描述: 帮助类
 * @版权: Copyright (c) 2014 
 * @公司: 深圳市思迪信息技术有限公司
 * @作者: 吴江波
 * @版本: 1.0 
 * @创建日期: 2014-10-23 
 * @创建时间: 下午03:41:48
 */
public class ToolsHelper
{
	
	private static Logger logger = Logger.getLogger(ToolsHelper.class);
	
	/**
	 * @描述：对指定的数按照指定的位数四舍五入
	 * @作者：吴江波
	 * @时间：2014-10-30 下午03:42:11
	 * @param num
	 * @param scaleValue
	 * @return
	 */
	public static float formatFloatNum(float num, int scaleValue)
	{
		BigDecimal b = new BigDecimal(num);
		int scale = scaleValue;//设置位数
		//ROUND_HALF_UP表示四舍五入
		float returnValue = b.setScale(scale, BigDecimal.ROUND_HALF_UP).floatValue();
		return returnValue;
	}
	
	/**
	 * @描述：date和本地系统时间比较，如果未过期返回true，过期了返回false
	 * @作者：吴江波
	 * @时间：2014-10-23 下午04:09:26
	 * @param date
	 * @return
	 */
	public static boolean compareDate(String date)
	{
		boolean flag = false;
		DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
		Date d1;
		try
		{
			d1 = dateformat.parse(date);
			Date d2 = new Date();
			if (d1.before(d2))
			{
				//小于或等于本地系统时间都是到期了
				//                System.out.println("字符串的时间早于本地时间！");
				flag = false;
			}
			if (d1.after(d2))
			{
				flag = true;
				//未过期
				//                System.out.println("字符串的时间晚于本地时间！");
			}
		}
		catch (ParseException e)
		{
			e.printStackTrace();
			logger.error("ToolsHelper类发生异常了:" + e);
		}
		return flag;
	}
	
	/**
	 * @描述：在当前日期上加上指定年数
	 * @作者：吴江波
	 * @时间：2014-10-23 下午03:40:52
	 * @param num
	 */
	public static String getDateAfterYear(int num)
	{
		// 当前时间
		Date date = new Date();
		// 创建(日期)格式化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		// 创建(日历)格式化
		GregorianCalendar gc = new GregorianCalendar();
		// 格式化当前日期
		gc.setTime(date);
		// 在当前年上增加num年
		gc.add(1, num);
		return sdf.format(gc.getTime());
	}
	
	/**
	 * @描述：在当前日期上减去指定天数
	 * @作者：吴江波
	 * @时间：2014-10-23 下午03:45:47
	 * @param num
	 * @return
	 */
	public static String getDateBeforeDay(int num)
	{
		// 当前时间
		Date date = new Date();
		// 创建(日期)格式化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		// 创建(日历)格式化
		GregorianCalendar gc = new GregorianCalendar();
		// 格式化当前日期
		gc.setTime(date);
		// 在当前日期上减去num天
		gc.add(5, -num);
		return sdf.format(gc.getTime());
	}
	
	public static boolean isCard(String str)
	{
		if (StringHelper.isEmpty(str))
		{
			return false;
		}
		Pattern pattern = Pattern.compile("(\\d{14}[0-9a-zA-Z])|(\\d{17}[0-9a-zA-Z])");
		Matcher matcher = pattern.matcher(str);
		return matcher.matches();
	}
	
	/**
	 * 格式yyyymmdd
	 * @param str
	 * @return
	 */
	public static boolean isDate(String str)
	{
		Format f = new SimpleDateFormat("yyyyMMdd");
		Date d = null;
		try
		{
			d = (Date) f.parseObject(str);
		}
		catch (ParseException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String tmp = f.format(d);
		System.out.println(str + ":" + tmp.equals(str));
		if (tmp.equals(str) == true)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	/**
	 * 格式yyyy-mm-dd
	 * @param str
	 * @return
	 */
	public static boolean isDateForm(String str)
	{
		if (StringHelper.isEmpty(str))
		{
			return false;
		}
		Pattern pattern = Pattern.compile("[0-9]{4}-[0-9]{2}-[0-9]{2}");
		Matcher matcher = pattern.matcher(str);
		return matcher.matches();
	}
	
	public static DBPage getPageData(List<DataRow> raw, int numPerPage, int currentPage)
	{
		
		if (raw == null)
		{
			return null;
		}
		
		if (numPerPage <= 0)
		{
			numPerPage = 10;
		}
		if (currentPage <= 0)
		{
			currentPage = 1;
		}
		
		DBPage page = new DBPage(currentPage, numPerPage);
		page.setTotalRows(raw.size());
		
		//查询对应页的数据
		//        int startIndex  = page.getStartIndex();
		//        int endIndex    = page.getLastIndex();
		int startIndex = (currentPage - 1) * numPerPage;
		int endIndex = (currentPage * numPerPage) > raw.size() ? raw.size() - 1 : (currentPage * numPerPage) - 1;
		
		List<DataRow> ret = new ArrayList<DataRow>();
		for (int i = startIndex; i <= endIndex; i++)
		{
			ret.add(raw.get(i));
		}
		page.setTotalRows(raw.size());
		//设置数据
		page.setData(ret);
		return page;
	}
	
	public static String getEighteenByFifteen(String fifteenCard)
	{
		fifteenCard = fifteenCard.substring(0, 6) + "19" + fifteenCard.substring(6);
		char[] localIdCardArr = fifteenCard.toCharArray();
		//计算系数
		Integer[] coefficientArr = new Integer[] { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 };
		//最后一位匹配map
		Map<Integer, String> lastNumMap = new HashMap<Integer, String>();
		lastNumMap.put(0, "1");
		lastNumMap.put(1, "0");
		lastNumMap.put(2, "X");
		lastNumMap.put(3, "9");
		lastNumMap.put(4, "8");
		lastNumMap.put(5, "7");
		lastNumMap.put(6, "6");
		lastNumMap.put(7, "5");
		lastNumMap.put(8, "4");
		lastNumMap.put(9, "3");
		lastNumMap.put(10, "2");
		int resultNum = 0;
		for (int i = 0; i < localIdCardArr.length; i++)
		{
			resultNum += Integer.parseInt(String.valueOf(localIdCardArr[i])) * coefficientArr[i];
		}
		resultNum = resultNum % 11;
		String lastNum = lastNumMap.get(resultNum);
		return fifteenCard + lastNum;
	}
	
	public static void main(String[] args)
	{
		System.out.println(ToolsHelper.getEighteenByFifteen("430723930824111"));
	}
}
