package com.thinkive.fxc.ismp.bus.business.retrieveAccount.business;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.EnumValueModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.EnumInfoService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserFundAccountModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserInfoModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.retrieveAccount.business.constant.ErrorCodeBusiness;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.business.util.SmsUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdTBASConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.ResultVo;

/**
 * @描述: 找回账户---用户信息确认
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2017年3月20日 下午3:35:13
 */
public class Function1004804 extends ISMPBaseFunction
{
	
	private String identityNum;//身份证号码
	
	private String name;//姓名
	
	private String mobile;//手机号码
	
	public ResultVo execute() throws Exception
	{
		initVar();
		
		UserInfoModel userInfo = getAndsynUserInfo(name, identityNum);
		
		//配置为不校验短信，则不发送短信
		if (DictionaryConstants.BOL_FALSE.equals(Configuration.getString("sms.smsValidate")))
		{
			ResultVo resultVo = new ResultVo();
			resultVo.setResult(userInfo);
			resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
			resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
			return resultVo;
		}
		
		String mobileNo = userInfo.getMobile();
		//检测短信发送类型是否存在
		EnumInfoService enumService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_ENUMINFO, EnumInfoService.class);
		EnumValueModel enumValueModel = enumService.getEnumByTypeAndValue(DictionaryConstants.ENUMNO_SMS_TYPE, DictionaryConstants.SMS_TYPE_REACCOUNT_CHECK);
		String smsTypeString = enumValueModel.getItemValue();
		
		//判断是否已发送过短信
		boolean hadSend = SmsUtils.hadSend(smsTypeString, mobileNo);
		
		//如果没有发送过短信，则发送
		if (!hadSend)
		{
			//获取新的短信验证码
			String saved_code = SmsUtils.getNewCode(smsTypeString, mobileNo);
			Map<String, String> keyWords = new HashMap<String, String>();
			keyWords.put("verificationcode", saved_code);//验证码
			//根据短信类型发送短信
			Long userId = userInfo.getUserId();
			SmsUtils.sendByType(DictionaryConstants.SMS_TYPE_REACCOUNT_CHECK, BusinessConstants.SEND_TYPE_CHECK, keyWords, mobileNo, userId, "", ip, mac,"");
		}
		
		ResultVo resultVo = new ResultVo();
		resultVo.setResult(userInfo);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午8:55:24
	 */
	private void initVar()
	{
		identityNum = this.getAndCheckBlankStrParam("identity_num", ErrorCodeCheckInput.BLANK_IDNO);
		name = this.getAndCheckBlankStrParam("name", ErrorCodeCheckInput.BLANK_USER_NAME);
		mobile = this.getAndCheckBlankStrParam("mobile", ErrorCodeCheckInput.BLANK_MOBILE);
		if (!StringHelper.isMoblie(mobile))
		{
			throw new BusinessException(ErrorCodeCheckInput.ERROR_FORMAT_MOBILE);
		}
	}
	
	/**
	 * @描述：获取并同步用户基本信息
	 * @作者：刘恺
	 * @时间：2016年11月15日 下午5:04:48
	 * @param name
	 * @param identity_num
	 * @return
	 * @throws Exception
	 */
	private UserInfoModel getAndsynUserInfo(String name, String identity_num) throws Exception
	{
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow thirdInput = new DataRow();
		thirdInput.set("identity_num", identity_num);
		thirdInput.set("name", name);
		thirdInput.set("type", "1");//特殊业务标志,三方接口1004602判断用
		DataRow thirdUserInfo = thirdInterface.queryUserInfoByAccount(thirdInput);
		if (thirdUserInfo == null || thirdUserInfo.isEmpty())
		{
			throw new BusinessException(ErrorCodeBusiness.LOGIN_ERROR_NAMEORID);
		}
		
		if(!thirdUserInfo.getString("name").equals(name)||!thirdUserInfo.getString("identity_num").equals(identity_num)){//校验柜台信息与输入的信息是否一致
			throw new BusinessException(ErrorCodeBusiness.LOGIN_ERROR_NAMEORID);
		}
		String identityType = thirdUserInfo.getString("identity_type");
		String clientId = thirdUserInfo.getString("client_id");
		String thirdMobile = thirdUserInfo.getString("mobile");
		if (StringUtils.isBlank(thirdMobile))
		{
			throw new BusinessException(ErrorCodeBusiness.NO_MOBILE);
		}
		if (!mobile.equals(thirdMobile))
		{
			throw new BusinessException(ErrorCodeBusiness.ERROR_MOBILE);
		}
		//根据身份证在我们本地数据库查找用户信息
		UserInfoService userInfoService = (UserInfoService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoModel userInfo = userInfoService.queryUserInfobyIdNumAndName(identityType, identity_num, thirdUserInfo.getString("name"), clientId);
		if (userInfo == null)
		{
			if (DictionaryConstants.IDENTITYNUM_EIGHTEEN == identity_num.length())
			{
				String newIdentityNum = DataFormatUtils.idNum18To15(identity_num);
				userInfo = userInfoService.queryUserInfobyIdNumAndName(identityType, newIdentityNum, thirdUserInfo.getString("name"), clientId);
			}
		}
		
		boolean isNewUser = userInfo == null;
		if (isNewUser)
		{
			userInfo = new UserInfoModel();
		}
		
		userInfo.setIdentityType(thirdUserInfo.getString("identity_type"));//证件类型
		userInfo.setIdentityNum(thirdUserInfo.getString("identity_num"));//证件号码
		userInfo.setName(thirdUserInfo.getString("name"));//姓名
		userInfo.setNickName(thirdUserInfo.getString("nick_name"));//昵称
		userInfo.setSex(thirdUserInfo.getString("sex"));//性别
		userInfo.setBirthday(thirdUserInfo.getString("birthday"));//生日
		userInfo.setMobile(thirdUserInfo.getString("mobile"));//手机号码
		userInfo.setSignOffice(thirdUserInfo.getString("sign_office"));//证件签署机构
		userInfo.setPapersAddr(thirdUserInfo.getString("papers_addr"));//证件地址
		userInfo.setValidityBegin(thirdUserInfo.getString("validity_begin"));//证件有效期开始日期
		userInfo.setValidityEnd(thirdUserInfo.getString("validity_end"));//证件有效期结束日期
		userInfo.setNationality(thirdUserInfo.getString("country"));//国籍
		userInfo.setBranchNo(thirdUserInfo.getString("org_id"));//营业部
		userInfo.setClientId(thirdUserInfo.getString("client_id"));
		
		UserExtendModel userExtend = new UserExtendModel();
		userExtend.setEmail(thirdUserInfo.getString("email"));//邮箱
		userExtend.setTelephone(thirdUserInfo.getString("telephone"));//联系电话
		userExtend.setAddress(thirdUserInfo.getString("address"));//联系地址
		userExtend.setPostCode(thirdUserInfo.getString("post_code"));//邮政编码
		userExtend.setOccupation(thirdUserInfo.getString("occupational"));//职业
		userExtend.setEducation(thirdUserInfo.getString("adapter"));//学历
		userExtend.setEthnicName(thirdUserInfo.getString("nation_id"));//民族编号
		userExtend.setOpStation(opStation);//操作站点
		userExtend.setLastLoginTime(new Date());
		userInfo.remove("fund_account");
		
		DataRow data = new DataRow();
		data.set("linkman_name", thirdUserInfo.getString("emergency_name"));
		data.set("linkman_relation", thirdUserInfo.getString("emergency_relation"));
		data.set("linkman_mobile", thirdUserInfo.getString("emergency_mobile"));
		
		UserFundAccountModel userFundAccount = new UserFundAccountModel();
		if(StringHelper.isNotEmpty(thirdUserInfo.getString("account"))){
			userFundAccount.setFundAccount(thirdUserInfo.getString("account"));
		}
		userFundAccount.setIsMain(DictionaryConstants.BOL_TRUE);
		userFundAccount.setState(ThirdTBASConstants.FUNDACCOUNT_THIRDSTATE_NOMAL);
		userFundAccount.setType("4");
		
		userInfo.remove("fund_account");
		if (isNewUser)
		{
			userInfoService.addUserInfoAndExtendAndAccount(userInfo, userExtend, userFundAccount, data);
		}
		else
		{
			userInfoService.updateUserInfoAndExtendAndAccount(userInfo, userExtend, userFundAccount, data);
		}
		userInfo.setFundaccount(thirdUserInfo.getString("account"));
		return userInfo;
	}
}
