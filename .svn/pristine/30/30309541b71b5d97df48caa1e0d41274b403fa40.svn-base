package com.thinkive.fxc.ismp.bus.business.resetphone;

import java.util.List;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserInfoModel;
import com.thinkive.fxc.ismp.bus.base.business.service.ChoiceAccountRecordService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.business.user.contants.UserErrorCodeContants;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * @描述: 手机号变更提交（工作平台审核通过后调用）
 * @版权: Copyright (c) 2016
 * @公司: 思迪科技
 * @作者: 谢能琥
 * @版本: 1.0
 * @创建日期: 2016年11月22日
 * @创建时间: 下午2:03:57
 */
public class Function1004821 extends ISMPBaseFunction
{
	
	private Long userId; //用户编号
	
	private String fundAccount; //资金帐号
	
	private Long businessId; //业务编号
	
	public ResultVo execute() throws Exception
	{
		//step1：获取入参并校验
		checkInput();
		
		//2:查询新手机号码
		ChoiceAccountRecordService choiceAccountRecordService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CHOICEACCOUNTRECORD, ChoiceAccountRecordService.class);
		
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = choiceAccountRecordService.queryByBusinessId(businessId);
		
		if (choiceAccountRecordModels == null || choiceAccountRecordModels.isEmpty())
		{
			//没有手机号码选择记录
			throw new BusinessException(ErrorCodeSystem.NOT_EXIST_CHOICE_ACCOUNT, "不存在账号选择记录");
		}
		ChoiceAccountRecordModel choiceAccountRecordModel = choiceAccountRecordModels.get(0);
		
		//取出新手机号码
		String newMobile = choiceAccountRecordModel.getTrdAccount();
		
		//step3:查询用户基本信息和用户账号信息,获取原手机号码
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);
		
		//step4:验证要修改的手机号码是否与原来的相同 
		String oldMobile = userInfoVo.getMobile();
		if (newMobile.equals(oldMobile))
		{
			throw new BusinessException(UserErrorCodeContants.BUSINESS_MOBILE_SAME, "修改的手机号与当前绑定手机号相同：" + newMobile);
		}
		
		//step5:验证要修改的手机号码是否已绑定其他用户
		boolean existMobile = userInfoService.existMobile(newMobile);
		if (existMobile)
		{
			throw new BusinessException(UserErrorCodeContants.BUSINESS_MOBILE_BINDING_OTHER, "该手机已绑定其他用户：" + newMobile);
		}
		
		//step6:调用第三方接口修改手机号码
		DataRow input = DataFormatUtils.packThirdInput(userInfoVo);
		input.set("mobile", newMobile);
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		thirdInterface.updateUserInfo(input);
		
		//step7:修改云柜台数据库用户手机号码(包含修改用户基本信息，添加业务办理信息，添加快照)
		UserInfoModel userInfoModel = new UserInfoModel();
		userInfoModel.setUserId(userId);
		userInfoModel.setMobile(newMobile);
		BusinessEntityModel busiEntityModel = new BusinessEntityModel(userId, BusinessConstants.BUSINESS_RESETPHONE, DictionaryConstants.FLOW_LASTSTEP_NEXT, DictionaryConstants.BOL_TRUE,
				DictionaryConstants.DEAL_RESULT_SUCCESS, opSource, opStation, ip);
		userInfoService.updateUserInfoModelAndUpdateBusinessEntity(userInfoModel, busiEntityModel, userInfoVo);
		
		//step7:出参
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void checkInput() throws InvokeException
	{
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
		fundAccount = this.getAndCheckBlankStrParam("fundid", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
		businessId = Long.valueOf(this.getAndCheckBlankStrParam("business_id", ErrorCodeCheckInput.BLANK_BUSINESSID));
	}
}
