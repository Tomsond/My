package com.thinkive.fxc.ismp.bus.business.entrust.function;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.thinkive.server.ResultVo;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.entrust.contants.EntrustDictionaryInfoContants;
import com.thinkive.fxc.ismp.bus.business.entrust.contants.EntrustErrorCodeContants;
import com.thinkive.fxc.ismp.bus.business.entrust.model.EntrustModel;
import com.thinkive.fxc.ismp.bus.business.entrust.model.UserEntrustModel;
import com.thinkive.fxc.ismp.bus.business.entrust.service.EntrustService;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;

/**
 * @描述: 委托方式-修改
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月6日 上午10:57:33
 */
public class Function1004161 extends ISMPBaseFunction
{
	
	private Long userId; //用户ID
	
	private String fundAccount; //资金账号
	
	private String entrustCode; //委托方式代码
	
	private String changeType; //修改类型 0：取消 1：开通  2:批量修改
	
	private ThirdInterface thirdInterface;
	
	private EntrustService entrustService;
	
	private UserInfoService userInfoService;
	
	public ResultVo execute() throws Exception
	{
		//step1:获取入参并校验
		checkInput();
		
		//step2:根据资金账号获取,获取用户和用户账号信息
		userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);
		
		//step3:根据用户ID获取该用户该云柜台保存的委托方式
		entrustService = SpringHelper.getBean(EntrustDictionaryInfoContants.SERVICE_ID_ENTRUSTINFO, EntrustService.class);
		UserEntrustModel entrust = entrustService.queryByUserId(userId);
		String sysEntrustCodes = entrust.getString("entrust_code");
		if (null == sysEntrustCodes)
		{
			throw new BusinessException(EntrustErrorCodeContants.NO_ENTRUST);
		}
		
		//step4:校验修改的委托方式操作类型是否允许,并同时获取业务办理记录说明关键字
		Map<String, String> checkResult = checkChangeType(changeType, entrustCode, sysEntrustCodes);
		entrustCode = checkResult.get("entrust_code");
		sysEntrustCodes = getNewEntrust(changeType, sysEntrustCodes, entrustCode);
		
		//step5:调用第三方接口修改委托方式
		DataRow input = DataFormatUtils.packThirdInput(userInfoVo);
		input.set("org_id", userInfoVo.getBranchNo());
		input.set("entrustWay", entrustCode);
		input.set("business_type", getType(changeType));
		input.set("newoperway", sysEntrustCodes);
		thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		thirdInterface.ChangeEntrust(input);
		
		//step6:更新数据库中同步的委托方式
//		sysEntrustCodes = getNewEntrust(changeType, sysEntrustCodes, entrustCode);这里会导致追加两次entrustCode
		entrust.setEntrustCode(sysEntrustCodes);
		entrustService.addOrUpdateUserEntrust(userId, sysEntrustCodes);
		
		//step7:添加业务办理记录(此处默认办理成功，流程完结)
		BusinessEntityModel entityModel = new BusinessEntityModel(userId, BusinessConstants.BUSINESS_WT, DictionaryConstants.FLOW_LASTSTEP_NEXT, DictionaryConstants.BOL_TRUE,
				DictionaryConstants.DEAL_RESULT_SUCCESS, opSource, opStation, ip);
		entrustService.addUserEntrustBusiness(entityModel, changeType, sysEntrustCodes);
		
		//step8:出参
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * 描述：校验修改的委托方式操作类型是否允许(目前只校验删除操作)
	 * 作者：刘恺
	 * 时间：2015年12月9日 下午2:23:30
	 * @param change_type
	 * @param entrust_code
	 * @param sysEntrustCodes 
	 */
	private Map<String, String> checkChangeType(String change_type, String entrust_code, String sysEntrustCodes)
	{
		Map<String, String> resultMap = new HashMap<String, String>();
		//关闭单个委托方式
		if (EntrustDictionaryInfoContants.CHANGE_TYPE_CANCEL.equals(change_type))
		{
			resultMap = checkDeleteOne(entrust_code, sysEntrustCodes);
		}
		//开通单个委托方式
		else if (EntrustDictionaryInfoContants.CHANGE_TYPE_OPEN.equals(change_type))
		{
			resultMap = checkAddOne(entrust_code, sysEntrustCodes);
		}
		//批量操作
		else if (EntrustDictionaryInfoContants.CHANGE_TYPE_UPDATE.equals(change_type))
		{
			resultMap = checkOpMany(entrust_code, sysEntrustCodes);
		}
		return resultMap;
	}
	
	/**
	 * @描述：获取入参并校验
	 * @作者：田源
	 * @时间：2016年9月6日 下午2:04:02
	 * @throws InvokeException
	 */
	private void checkInput() throws InvokeException
	{
		fundAccount = this.getAndCheckBlankStrParam("zj_account", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
		userId = Long.valueOf(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID));
		opSource = getStrParameter("op_source");
		entrustCode = this.getAndCheckBlankStrParam("entrust_code", EntrustErrorCodeContants.BLANK_ENTRUT);
		changeType = this.getStrParameter("change_type", DictionaryConstants.BOL_TRUE);
		if (!EntrustDictionaryInfoContants.CHANGE_TYPE_CANCEL.equals(changeType) && !EntrustDictionaryInfoContants.CHANGE_TYPE_OPEN.equals(changeType)
				&& !EntrustDictionaryInfoContants.CHANGE_TYPE_UPDATE.equals(changeType))
		{
			throw new BusinessException(EntrustErrorCodeContants.ERROR_CHANGE_TYPE);
		}
	}
	
	/**
	 * @描述：根据传过来的委托业务办理类型，获取委托方式code
	 * @作者：田源
	 * @时间：2016年9月6日 下午1:53:37
	 * @param change_type
	 * @param sysEntrustCodes
	 * @param entrust_code
	 */
	private String getNewEntrust(String change_type, String sysEntrustCodes, String entrust_code)
	{
		if (EntrustDictionaryInfoContants.CHANGE_TYPE_OPEN.equals(change_type))
		{
			sysEntrustCodes += entrust_code;
		}
		else if (EntrustDictionaryInfoContants.CHANGE_TYPE_CANCEL.equals(change_type))
		{
			sysEntrustCodes = sysEntrustCodes.replace(entrust_code, "");
		}
		else if (EntrustDictionaryInfoContants.CHANGE_TYPE_UPDATE.equals(change_type))
		{
			sysEntrustCodes = entrust_code;
		}
		return sysEntrustCodes;
	}
	
	private Map<String, String> checkDeleteOne(String entrust_code, String sysEntrustCodes)
	{
		Map<String, String> resultMap = new HashMap<String, String>();
		EntrustModel entrustInfo = entrustService.queryByCode(entrust_code);//获取数据库所有的委托方式
		//如果数据库未配置该委托方式，则禁止操作
		if (entrustInfo == null)
		{
			throw new BusinessException(EntrustErrorCodeContants.PROHIBIT_OPERATION_WT);
		}
		//如果用户未开通该委托方式则不能取消
		if (!sysEntrustCodes.contains(entrust_code))
		{
			throw new BusinessException(EntrustErrorCodeContants.CANNOT_CENCEL_WT);
		}
		//判断是否允许被删除
		if (DictionaryConstants.BOL_FALSE.equals(entrustInfo.getAllowClose()))
		{
			throw new BusinessException(EntrustErrorCodeContants.CANNOT_CLOSE_WT);
		}
		resultMap.put("entrust_code", entrust_code);
		resultMap.put("entrust_names", entrustInfo.getEntrustName() + "委托方式");
		return resultMap;
	}
	
	private Map<String, String> checkAddOne(String entrust_code, String sysEntrustCodes)
	{
		Map<String, String> resultMap = new HashMap<String, String>();
		//获取数据库所有的委托方式
		EntrustModel entrustInfo = entrustService.queryByCode(entrust_code);
		//如果数据库未配置该委托方式，则禁止操作
		if (entrustInfo == null)
		{
			throw new BusinessException(EntrustErrorCodeContants.PROHIBIT_OPERATION_WT);
		}
		//如果用户已开通该委托方式，则不能执行开通操作
		if (sysEntrustCodes.contains(entrust_code))
		{
			throw new BusinessException(EntrustErrorCodeContants.EARLY_OPENED_WT);
		}
		//判断是否允许被删除
		if (DictionaryConstants.BOL_FALSE.equals(entrustInfo.getAllowOpen()))
		{
			throw new BusinessException(EntrustErrorCodeContants.CANNOT_CLOSE_WT);
		}
		resultMap.put("entrust_code", entrust_code);
		resultMap.put("entrust_names", entrustInfo.getEntrustName() + "委托方式");
		return resultMap;
	}
	
	private Map<String, String> checkOpMany(String entrust_code, String sysEntrustCodes)
	{
		Map<String, String> resultMap = new HashMap<String, String>();
		String entrustNames = "";
		//查询全部委托方式
		List<EntrustModel> entrustInfoList = entrustService.queryAll();
		Map<String, EntrustModel> entrustMap = new HashMap<String, EntrustModel>();
		for (int i = 0; i < entrustInfoList.size(); i++)
		{//把数据库的委托方式存储在MAP中
			EntrustModel item = entrustInfoList.get(i);
			entrustMap.put(item.getEntrustCode(), item);
		}
		//对比数据，获取到新开通的委托方式
		char[] reqCodeArr = entrust_code.toCharArray();
		for (char item : reqCodeArr)
		{
			String itemString = String.valueOf(item);
			EntrustModel entrustInfo = entrustMap.get(itemString);
			//如果用户已开通的委托方式不包含新提交的，则是需要新开通的委托方式，需要判断该委托方式是否可操作
			if (!sysEntrustCodes.contains(itemString))
			{
				//如果需要新开通的委托方式后台未配置，则不能操作
				if (entrustInfo == null)
				{
					throw new BusinessException(EntrustErrorCodeContants.PROHIBIT_OPERATION_WT);
				}
				if (DictionaryConstants.BOL_FALSE.equals(entrustInfo.getAllowOpen()))
				{
					throw new BusinessException(EntrustErrorCodeContants.PROHIBIT_OPEN_WT);
				}
				entrustNames = entrustNames + entrustInfo.getEntrustName() + "、";
				continue;
			}
			//如果委托方式已配置则记录业务办理描述
			if (entrustInfo != null)
			{
				entrustNames = entrustNames + entrustInfo.getEntrustName() + "委托、";
			}
			//如果用户已开通的委托方式包含新开通的委托方式，则字符串中去掉，最后剩下的委托方式就是需要取消的
			sysEntrustCodes = sysEntrustCodes.replace(itemString, "");
		}
		//检查需要删除的委托方式
		char[] deleteCodeArr = sysEntrustCodes.toCharArray();
		for (char item : deleteCodeArr)
		{
			String itemString = String.valueOf(item);
			EntrustModel entrustInfo = entrustMap.get(itemString);
			//删除的委托方式后台未配置，将未配置但用户已开通的委托编号加入到请求串中，维持原装
			if (entrustInfo == null)
			{
				entrust_code = entrust_code + itemString;
			}
			else
			{
				//判断是否允许被删除
				if (DictionaryConstants.BOL_FALSE.equals(entrustInfo.getAllowClose()))
				{
					throw new BusinessException(EntrustErrorCodeContants.CANNOT_CLOSE_WT);
				}
			}
		}
		entrustNames = entrustNames.substring(0, entrustNames.length() - 1);
		resultMap.put("entrust_code", entrust_code);
		resultMap.put("entrust_names", entrustNames);
		return resultMap;
	}
	
	private String getType(String change_type)
    {
        if (EntrustDictionaryInfoContants.CHANGE_TYPE_OPEN.equals(change_type))
        {
            change_type = "0";
        }
        else if (EntrustDictionaryInfoContants.CHANGE_TYPE_CANCEL.equals(change_type))
        {
            change_type = "1";
        }
        else if (EntrustDictionaryInfoContants.CHANGE_TYPE_UPDATE.equals(change_type))
        {
            change_type = "01";
        }
        return change_type;
    }
}
