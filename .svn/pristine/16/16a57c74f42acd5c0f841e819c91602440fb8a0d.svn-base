package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import org.apache.log4j.Logger;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.UserExtendModel;
import com.thinkive.fxc.ismp.bus.base.business.service.CertCofferTBASSService;
import com.thinkive.fxc.ismp.bus.base.business.service.CertManageService;
import com.thinkive.fxc.ismp.bus.base.business.service.CertTBASService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.CertUserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.CertConstants;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.base.util.ToolsHelper;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.business.util.PwdEncryptUtil;
import com.thinkive.gateway.v2.result.Result;
import com.thinkive.server.InvokeException;

/**
 * @描述: 数字证书管理服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月29日 下午9:54:23
 */
public class CertManageServiceImpl implements CertManageService
{
	
	Logger logger = Logger.getLogger(CertManageServiceImpl.class);
	
	@Override
	public DataRow applyZDCert(String certuid, String pkcs10, String ipaddr, String macaddr) throws InvokeException
	{
		DataRow result = new DataRow();
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		DataRow downP7bParam = new DataRow();
		downP7bParam.set("user_id", certuid);
		downP7bParam.set("cert_type", CertConstants.CERT_TYPE_SOFT);// 软证书
		downP7bParam.set("pkcs10", pkcs10);
		downP7bParam.set("request_type", CertConstants.CERT_REQUEST_TYPE_VIDEO);
		downP7bParam.set("client_ip", ipaddr);
		downP7bParam.set("client_mac", macaddr);
		Result p7bRS = certTBASService.downCsdcP7B(downP7bParam);
		
		int p7bErrNo = p7bRS.getErr_no();
		if (p7bErrNo != 0)
		{
			throw new BusinessException(ErrorCodeSystem.CERT_ZD_DOWN_FAIL);
		}
		DataRow p7bRow = p7bRS.getData();
		//打包数据
		DataRow enumData = p7bRow;
		result.set("cert_id", enumData.get("cert_id"));
		result.set("cert_sn", enumData.get("cert_sn"));
		result.set("cert_dn", enumData.get("cert_dn"));
		result.set("cert_start_time", enumData.get("cert_start_time"));
		result.set("cert_end_time", enumData.get("cert_end_time"));
		result.set("cert_status", enumData.get("cert_status"));
		result.set("p7cert", enumData.get("p7cert"));
		return result;
	}
	
	@Override
	public DataRow updateZDCert(String cert_id, String pkcs10, String ipaddr, String macaddr) throws InvokeException
	{
		DataRow result = new DataRow();
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		DataRow updateP7bParam = new DataRow();
		updateP7bParam.set("cert_id", cert_id);
		updateP7bParam.set("cert_type", CertConstants.CERT_TYPE_SOFT);// 软证书
		updateP7bParam.set("pkcs10", pkcs10);
		updateP7bParam.set("request_type", CertConstants.CERT_REQUEST_TYPE_VIDEO);
		updateP7bParam.set("client_ip", ipaddr);
		updateP7bParam.set("client_mac", macaddr);
		Result p7bRS = certTBASService.updateCsdcP7B(updateP7bParam);
		int p7bErrNo = p7bRS.getErr_no();
		if (p7bErrNo != 0)
		{
			throw new BusinessException(ErrorCodeSystem.CERT_ZDEEXIST_UPDATE_FAIL);
		}
		DataRow p7bRow = p7bRS.getData();
		result.set("cert_id", p7bRow.get("cert_id"));
		result.set("cert_sn", p7bRow.get("cert_sn"));
		result.set("cert_dn", p7bRow.get("cert_dn"));
		result.set("cert_start_time", p7bRow.get("cert_start_time"));
		result.set("cert_end_time", p7bRow.get("cert_end_time"));
		result.set("cert_status", p7bRow.get("cert_status"));
		result.set("p7cert", p7bRow.get("p7cert"));
		return result;
	}
	
	@Override
	public DataRow applyZJCert(String certuid, String pkcs10, String email, String ipaddr, String macaddr) throws InvokeException
	{
		DataRow result = new DataRow();
		DataRow param = new DataRow();
		param.set("user_id", certuid);
		param.set("cert_type", CertConstants.CERT_TYPE_SOFT);// 软证书
		param.set("pkcs10", pkcs10);
		param.set("request_type", CertConstants.CERT_REQUEST_TYPE_VIDEO);
		param.set("client_ip", ipaddr);
		param.set("client_mac", macaddr);
		param.set("user_id", certuid);
		param.set("email", email);
		param.set("pkcs10", pkcs10);
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result p7bRS = certTBASService.downTWP7B(param);
		int p7bErrNo = p7bRS.getErr_no();
		if (p7bErrNo != 0)
		{
			throw new BusinessException(ErrorCodeSystem.CERT_ZJ_DOWN_FAIL);
		}
		DataRow p7bRow = p7bRS.getData();
		result.set("cert_id", p7bRow.get("cert_id"));
		result.set("cert_sn", p7bRow.get("cert_sn"));
		result.set("cert_dn", p7bRow.get("cert_dn"));
		result.set("cert_start_time", p7bRow.get("cert_start_time"));
		result.set("cert_end_time", p7bRow.get("cert_end_time"));
		result.set("cert_status", p7bRow.get("cert_status"));
		result.set("p7cert", p7bRow.get("p7cert"));
		return result;
	}
	
	@Override
	public DataRow updateZJCert(String cert_id, String pkcs10, String ipaddr, String macaddr) throws InvokeException
	{
		DataRow result = new DataRow();
		//更新证书
		DataRow updateP7bParam = new DataRow();
		updateP7bParam.set("cert_id", cert_id);
		updateP7bParam.set("cert_type", CertConstants.CERT_TYPE_SOFT);// 软证书
		updateP7bParam.set("pkcs10", pkcs10);
		updateP7bParam.set("request_type", CertConstants.CERT_REQUEST_TYPE_VIDEO);
		updateP7bParam.set("client_ip", ipaddr);
		updateP7bParam.set("client_mac", macaddr);
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result p7bRS = certTBASService.updateTWP7B(updateP7bParam);
		int p7bErrNo = p7bRS.getErr_no();
		if (p7bErrNo != 0)
		{
			throw new BusinessException(ErrorCodeSystem.CERT_ZJEEXIST_UPDATE_FAIL);
		}
		DataRow p7bRow = p7bRS.getData();
		result.set("cert_id", p7bRow.get("cert_id"));
		result.set("cert_sn", p7bRow.get("cert_sn"));
		result.set("cert_dn", p7bRow.get("cert_dn"));
		result.set("cert_start_time", p7bRow.get("cert_start_time"));
		result.set("cert_end_time", p7bRow.get("cert_end_time"));
		result.set("cert_status", p7bRow.get("cert_status"));
		result.set("p7cert", p7bRow.get("p7cert"));
		return result;
	}
	
	@Override
	public DataRow checkUserCert(Long userId, String certSource) throws Exception
	{
		DataRow queryData = new DataRow();
		queryData.set("user_id", userId);
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		CertUserInfoVo userInfo = userInfoService.queryCertUser(userId);
		if (userInfo == null || userInfo.isEmpty())
		{
			throw new BusinessException(ErrorCodeSystem.NOTEXIST_USER);
		}
		String nationality = userInfo.getNationality();
		String custName = userInfo.getName();
		String idType = userInfo.getIdentityType();
		String idNo = userInfo.getIdentityNum();
		// 中登CA是否已经存在用户证书
		String csdcIdType = DataFormatUtils.convertIdType(idType);
		checkUserInfo(userInfo);
		// 根据客户四项唯一标识信息校验是否申请过中登证书
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result certRs = certTBASService.chkIsExistCert(custName, nationality, csdcIdType, idNo, certSource);
		int errNo = certRs.getErr_no();
		DataRow csdcCertInfo = certRs.getData();
		String cert_id = "";
		String cert_status = "";
		
		if (csdcCertInfo == null || errNo != 0)
		{
			throw new BusinessException(ErrorCodeSystem.CERT_CHECK_ZD_VALIDITY_FAIL);
		}
		cert_id = csdcCertInfo.getString("cert_id");
		cert_status = csdcCertInfo.getString("cert_status");
		if (!CertConstants.CERT_STATE_EFFECTIVE.equals(cert_status))
		{
			throw new BusinessException(ErrorCodeSystem.CERT_STATUS_ERROR);
		}
		userInfo.set("cert_id", cert_id);
		userInfo.set("cert_status", cert_status);
		return userInfo;
	}
	
	@Override
	public void checkUserInfo(DataRow userInfo) throws InvokeException
	{
		//中登CA是否已经存在用户证书
		if (StringHelper.isEmpty(userInfo.getString("name")))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_USER_NAME);
		}
		else if (StringHelper.isEmpty(userInfo.getString("identity_type")))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_IDENTITY_TYPE);
		}
		else if (StringHelper.isEmpty(DataFormatUtils.convertIdType(userInfo.getString("identity_type"))))
		{
			throw new BusinessException(ErrorCodeCheckInput.FORMAT_IDENTITY_TYPE);
		}
		else if (StringHelper.isEmpty(userInfo.getString("identity_num")))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_IDENTITY_NUM);
		}
		if (!ToolsHelper.isCard(userInfo.getString("identity_num")))
		{
			throw new BusinessException(ErrorCodeCheckInput.FORMAT_IDCARD);
		}
		else if (StringHelper.isEmpty(userInfo.getString("nationality")))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_NATIONALITY);
		}
		else if (StringHelper.isEmpty(userInfo.getString("certuid")))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_CERTUID);
		}
	}
	
	/**
	 * @描述： 同步业务bus数据到证书数据，获取证书用户id
	 */
	@Override
	public String synCertUser(DataRow userInfo) throws InvokeException
	{
		DataRow certUserInput = new DataRow();
		certUserInput.set("user_name", userInfo.getString("name"));
		certUserInput.set("nationality", userInfo.getString("nationality"));
		certUserInput.set("card_type1", DataFormatUtils.convertIdType(userInfo.getString("identity_type")));
		certUserInput.set("card_num1", userInfo.getString("identity_num"));
		certUserInput.set("user_mail", userInfo.getString("email"));
		certUserInput.set("branch_no", userInfo.getString("org_id"));
		certUserInput.set("user_phone", userInfo.getString("mobile"));
		certUserInput.set("permission_type", userInfo.getString("permission_type"));
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result certUser = certTBASService.addCertUserInfo(certUserInput);
		if (certUser.getErr_no() != 0)
		{
			logger.error("同步证书用户数据失败，证书bus错误编号：" + certUser.getErr_no() + ";错误信息：" + certUser.getErr_info());
			throw new BusinessException(ErrorCodeSystem.CERT_SYNCERTUSER_FAIL);
		}
		DataRow certUserData = certUser.getData();
		String certuid = certUserData.getString("user_id");
		UserExtendModel userExtendModel = new UserExtendModel();
		userExtendModel.setUserId(userInfo.getLong("user_id"));
		userExtendModel.setCertuId(Long.parseLong(certuid));
		UserInfoService userInfoService = (UserInfoService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO);
		userInfoService.updateUserExtend(userExtendModel);
		userInfo.set("certuid", certuid);
		//修改证书申请状态
		changeCertApplyType(certuid);
		return certuid;
	}
	
	private void changeCertApplyType(String certuid) throws InvokeException
	{
		String cert_requesttype = Configuration.getString("system.certrequesttype", "03");
		DataRow newUserApply = new DataRow();
		newUserApply.set("user_id", certuid);
		newUserApply.set("request_type", cert_requesttype);
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result certUser = certTBASService.updateCertApplyInfo(newUserApply);
		if (certUser.getErr_no() != 0)
		{
			logger.error("修改证书申请方式失败，证书bus错误编号：" + certUser.getErr_no() + ";错误信息：" + certUser.getErr_info());
			throw new BusinessException(ErrorCodeSystem.CERT_CHANGECERTAPPLYTYPE_FAIL);
		}
	}
	
	//调用托管bus加密接口对用户密码进行加密
	@Override
	public String encodePwdByTGTBas(String password) throws InvokeException
	{
		CertCofferTBASSService certCofferTBASSService = (CertCofferTBASSService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTCOFFERTBASS);
		DataRow pwdInput = new DataRow();
		pwdInput.set("password", password);
		Result pwdInfo = certCofferTBASSService.encodePWD(pwdInput);
		if (pwdInfo.getErr_no() != 0)
		{
			logger.error("调用托管bus加密，托管bus错误编号：" + pwdInfo.getErr_no() + ";错误信息：" + pwdInfo.getErr_info());
			throw new BusinessException(ErrorCodeSystem.TG_ENCODE_FAIL);
		}
		DataRow pwdResult = pwdInfo.getData();
		String encodedPwd = pwdResult.getString("password");
		return encodedPwd;
	}
	
	//上传密码到证书BAS
	@Override
	public void uploadPwd(String certuid, String encodedPwd) throws InvokeException
	{
		DataRow uploadPWDData = new DataRow();
		uploadPWDData.set("user_id", certuid);
		uploadPWDData.set("privatekey_pwd", encodedPwd);
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result uploadInfo = certTBASService.uploadPrivateKeyPwd(uploadPWDData);
		if (uploadInfo.getErr_no() != 0)
		{
			logger.error("上传密码到证书bas失败，证书bus错误编号：" + uploadInfo.getErr_no() + ";错误信息：" + uploadInfo.getErr_info());
			throw new BusinessException(ErrorCodeSystem.CERT_UPLOADPWD_FAIL);
		}
	}
	
	@Override
	public DataRow checkCertExist(DataRow userInfo, String cert_source) throws InvokeException
	{
		DataRow input = new DataRow();
		input.set("user_name", userInfo.getString("name"));
		input.set("card_type1", DataFormatUtils.convertIdType(userInfo.getString("identity_type")));
		input.set("nationality", userInfo.getString("nationality"));
		input.set("card_num1", userInfo.getString("identity_num"));
		input.set("cert_source", cert_source);
		CertTBASService certTBASService = (CertTBASService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTTBAS);
		Result checkResult = certTBASService.checkCertExist(input);
		DataRow checkData = checkResult.getData();
		if (checkResult.getErr_no() != 0)
		{
			logger.error("检测证书是否存在失败，证书bus错误编号：" + checkResult.getErr_no() + ";错误信息：" + checkResult.getErr_info());
			throw new BusinessException(ErrorCodeSystem.CERT_CHECKCERTEXIST);
		}
		DataRow certData = checkResult.getData();
		//没有证书用户，没有证书申请下载权限
		if (CertConstants.CERTBUS_NOCERTUSER_ERRORCODE.equals(certData.getString("error_no")))
		{
			return null;
		}
		//如果有证书用户，查询的是中登证书，校验用户权限是否满足，如果权限是0，表示用户没有证书下载权限
		else if (CertConstants.CERTSOURCE_ZD.equals(cert_source) && CertConstants.PERMISSION_TYPE_ZJ.equals(certData.getString("permission_type")))
		{
			return null;
		}
		//有证书下载权限
		else if ("-3009506".equals(certData.getString("error_no")))
		{
			saveCertuid(userInfo.getString("user_id"), checkData.getString("user_id"));
			changeCertApplyType(checkData.getString("user_id"));
			DataRow resultData = new DataRow();
			resultData.set("hasCert", DictionaryConstants.BOL_TRUE);
			resultData.set("hasTgCert", DictionaryConstants.BOL_FALSE);
			return resultData;
		}
		//有证书用户且下载了证书
		else if (StringHelper.isBlank(userInfo.getString("certuid")))
		{
			saveCertuid(userInfo.getString("user_id"), checkData.getString("user_id"));
			changeCertApplyType(checkData.getString("user_id"));
		}
		
		DataRow resultData = new DataRow();
		resultData.set("cert_id", certData.getString("cert_id"));
		resultData.set("cert_type", certData.getString("cert_type"));
		resultData.set("usb_key_id", certData.getString("usb_key_id"));
		resultData.set("cert_dn", certData.getString("cert_dn"));
		resultData.set("cert_dn_cn", certData.getString("cert_dn_cn"));
		resultData.set("pkcs10", certData.getString("pkcs10"));
		resultData.set("cert_status", certData.getString("cert_status"));
		resultData.set("cert_sn", certData.getString("cert_sn"));
		resultData.set("cert_start_time", certData.getString("cert_start_time"));
		resultData.set("cert_end_time", certData.getString("cert_end_time"));
		resultData.set("p7cert", certData.getString("p7cert"));
		resultData.set("x509cert", certData.getString("x509cert"));
		resultData.set("hasTgCert", certData.getString("hasTgCert"));
		return resultData;
	}
	
	private void saveCertuid(String user_id, String certuid)
	{
		UserExtendModel userExtendModel = new UserExtendModel();
		userExtendModel.setUserId(Long.parseLong(user_id));
		userExtendModel.setCertuId(Long.parseLong(certuid));
		UserInfoService userInfoService = (UserInfoService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO);
		userInfoService.updateUserExtend(userExtendModel);
	}
	
	@Override
	public void resetTgCertPwd(String ipaddr, String macaddr, String password, DataRow userInfo, Object cert_type) throws InvokeException
	{
		DataRow input = new DataRow();
		input.set("ipaddr", ipaddr);
		input.set("macaddr", macaddr);
		input.set("privatekey_pwd", password);
		
		input.set("user_id", userInfo.getString("certuid"));
		input.set("nationality", userInfo.getString("nationality"));
		input.set("custname", userInfo.getString("name"));
		input.set("idtype", DataFormatUtils.convertIdType(userInfo.getString("identity_type")));
		input.set("idtype", userInfo.getString("identity_type"));
		input.set("idNo", userInfo.getString("identity_num"));
		input.set("mobileno", userInfo.getString("mobile"));
		CertCofferTBASSService certCofferTBASSService = (CertCofferTBASSService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_CERTCOFFERTBASS);
		Result result = null;
		if (CertConstants.CERT_TYPE_ZD.equals(cert_type))
		{
			result = certCofferTBASSService.reSetCertPwdZD(input);
		}
		else
		{
			result = certCofferTBASSService.reSetCertPwdZJ(input);
		}
		if (result.getErr_no() != 0)
		{
			logger.error("重置托管证书密码失败，证书bus错误编号：" + result.getErr_no() + ";错误信息：" + result.getErr_info());
			throw new BusinessException(ErrorCodeSystem.TG_RESETTGCERTPWD);
		}
	}
	
	@Override
	public void saveTgPwd(String user_id, String privatekey_pwd) throws Exception
	{
		DataRow param = new DataRow();
		param.set("user_id", user_id);
		UserInfoService userInfoService = (UserInfoService) SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO);
		UserExtendModel userExtendModel = userInfoService.queryUserExtendByUserId(Long.parseLong(user_id));
		if (userExtendModel == null || userExtendModel.isEmpty())
		{
			throw new BusinessException(ErrorCodeSystem.NOTEXIST_USER);
		}
		String certuid = userExtendModel.getString("certuid");
		if (StringHelper.isBlank(certuid))
		{
			throw new BusinessException(ErrorCodeSystem.ACCONT_ERROR_NOCERTUID);
		}
		String encodedPwd = "";
		String encrypt_type = Configuration.getString("weixin.encrypt_type", "1");
		if ("1".equals(encrypt_type))
		{
			encodedPwd = this.encodePwdByTGTBas(privatekey_pwd);
		}
		else
		{
			privatekey_pwd = PwdEncryptUtil.encryptionPsw(privatekey_pwd);
		}
		this.uploadPwd(certuid, encodedPwd);
	}
}
