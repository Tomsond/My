package com.thinkive.fxc.ismp.bus.business.function;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.util.BigDecimalUtils;
import com.thinkive.fxc.ismp.bus.business.constants.Constants;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;
import com.thinkive.server.util.SpringUtil;


/**
 * 描述: 获取资金账单列表
 * 版权: Copyright (c) 2010
 * 公司: 思迪科技 
 * 作者: 刘恺
 * 版本: 1.0 
 * 创建日期: 2014年11月20日 
 * 创建时间: 下午5:28:05
 */
public class Function1004425 extends ISMPBaseFunction
{
	
	private static Logger logger = Logger.getLogger(Function1004425.class);
	
	@Override
	public ResultVo execute() throws Exception
	{
		checkInput();
		ResultVo resultVo = new ResultVo();
		String user_id = this.getStrParameter("user_id");//用户ID
		String fundid = this.getStrParameter("fundid"); //请求行数
		String strdate = this.getStrParameter("strdate"); //起始日期
		String enddate = this.getStrParameter("enddate"); //终止日期
		String count = this.getStrParameter("count"); //请求行数
		
		ThirdInterface thirdInterface =  SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow queryData = new DataRow();
		queryData.set("user_id", user_id);
		DataRow userAccountPwd = getUserInfo(user_id, fundid);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userAccountPwd);
		thirdInput.set("strdate", strdate);
		thirdInput.set("enddate", enddate);
		thirdInput.set("count", count);
		List<DataRow> billList = thirdInterface.queryBillList(thirdInput);
		Map<String, DataRow> billCountMap = getBillCount(billList);
		resultVo.setResult("incomeData", billCountMap.get("incomeData"));
		resultVo.setResult("expenditureData", billCountMap.get("expenditureData"));
		resultVo.setResult("iProportion", billCountMap.get("iProportion"));
		resultVo.setResult("eProportion", billCountMap.get("eProportion"));
		resultVo.setResult("billList", billList);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void checkInput() throws InvokeException
	{
		logger.info("入参：" + parametersToString());
		if (StringHelper.isBlank(this.getStrParameter("user_id")))
		{
			throw new InvokeException(getErrorNo(1), "用户ID不能为空");
		}
	}
	
	private Map<String, DataRow> getBillCount(List<DataRow> billList)
	{
		Map<String, DataRow> billCountMap = new HashMap<String, DataRow>();
		//对账单分类(支出)
		Double totalExpenditure = 0D; //总支出
		Double withdrawExpenditure = 0D;//提现支出
		Double stockExpenditure = 0D; //证券买入支出
		Double financeExpenditure = 0D; //理财买入支出
		Double fundExpenditure = 0D; //基金买入支出
		//对账单分类(充入)
		Double totalIncome = 0D; //总收入
		Double rechargeIncome = 0D;//充值转入
		Double stockIncome = 0D; //证券卖出收入
		Double financeIncome = 0D; //理财赎回收入
		Double fundIncome = 0D; //基金赎回收入
		if (billList != null && billList.size() > 0)
		{
			for (DataRow item : billList)
			{
				if (!"1".equals(item.getString("state")))
				{ //未成功处理
					continue;
				}
				String business_type = item.getString("business_type");
				Double amount = item.getDouble("amount");
				if (Constants.FUNDDETAILS_WITHDRAW.equals(business_type))
				{ //提现
					withdrawExpenditure += amount;
					totalExpenditure += amount;
				}
				else if (Constants.FUNDDETAILS_RECHARGE.equals(business_type))
				{ //充值
					rechargeIncome += amount;
					totalIncome += amount;
				}
				else if (Constants.FUNDDETAILS_FINANCEBUY.equals(business_type))
				{ //理财买入
					financeExpenditure += amount;
					totalExpenditure += amount;
				}
				else if (Constants.FUNDDETAILS_FINANCEREDEEM.equals(business_type))
				{ //理财赎回
					financeIncome += amount;
					totalIncome += amount;
				}
				else if (Constants.FUNDDETAILS_STOCKBUY.equals(business_type))
				{ //证券买入
					stockExpenditure += amount;
					totalExpenditure += amount;
				}
				else if (Constants.FUNDDETAILS_STOCKSELL.equals(business_type))
				{ //证券卖出
					stockIncome += amount;
					totalIncome += amount;
				}
				else if (Constants.FundDetails_FUNDBUY.equals(business_type))
				{ //基金买入
					fundExpenditure += amount;
					totalExpenditure += amount;
				}
				else if (Constants.FundDetails_FUNDREDEEM.equals(business_type))
				{ //基金赎回
					fundIncome += amount;
					totalIncome += amount;
				}
			}
		}
		//支出占比
		Double withdrawEProportion = 0D;//提现支出占比
		Double stockEProportion = 0D; //证券买入支出占比
		Double financeEProportion = 0D; //理财买入支出占比
		Double fundEProportion = 0D; //基金买入支出占比
		//收入占比
		Double rechargeIProportion = 0D;//充值转入占比
		Double stockIProportion = 0D; //证券卖出收入占比
		Double financeIProportion = 0D; //理财赎回收入占比
		Double fundIProportion = 0D; //基金赎回收入占比
		//计算支出占比
		int scale = 4;
		if (0 < totalExpenditure)
		{//有支出，计算占比
			withdrawEProportion = BigDecimalUtils.div(withdrawExpenditure, totalExpenditure, scale);
			stockEProportion = BigDecimalUtils.div(stockExpenditure, totalExpenditure, scale);
			financeEProportion = BigDecimalUtils.div(financeExpenditure, totalExpenditure, scale);
			fundEProportion = BigDecimalUtils.div(fundExpenditure, totalExpenditure, scale);
		}
		//计算收入占比
		if (0 < totalIncome)
		{//有收入，计算占比
			rechargeIProportion = BigDecimalUtils.div(rechargeIncome, totalIncome, scale);
			stockIProportion = BigDecimalUtils.div(stockIncome, totalIncome, scale);
			financeIProportion = BigDecimalUtils.div(financeIncome, totalIncome, scale);
			fundIProportion = BigDecimalUtils.div(fundIncome, totalIncome, scale);
		}
		
		DataRow eProportion = new DataRow();
		eProportion.set("withdrawEProportion", withdrawEProportion.intValue());
		eProportion.set("stockEProportion", stockEProportion.intValue());
		eProportion.set("financeEProportion", financeEProportion.intValue());
		eProportion.set("fundEProportion", fundEProportion.intValue());
		
		DataRow iProportion = new DataRow();
		iProportion.set("rechargeIProportion", rechargeIProportion.intValue());
		iProportion.set("stockIProportion", stockIProportion.intValue());
		iProportion.set("financeIProportion", financeIProportion.intValue());
		iProportion.set("fundIProportion", fundIProportion.intValue());
		
		DataRow expenditureData = new DataRow();
		expenditureData.set("totalExpenditure", totalExpenditure.intValue());
		expenditureData.set("withdrawExpenditure", withdrawExpenditure.intValue());
		expenditureData.set("stockExpenditure", stockExpenditure.intValue());
		expenditureData.set("financeExpenditure", financeExpenditure.intValue());
		expenditureData.set("fundExpenditure", fundExpenditure.intValue());
		
		DataRow incomeData = new DataRow();
		incomeData.set("totalIncome", totalIncome);
		incomeData.set("rechargeIncome", rechargeIncome);
		incomeData.set("stockIncome", stockIncome);
		incomeData.set("financeIncome", financeIncome);
		incomeData.set("fundIncome", fundIncome);
		
		billCountMap.put("iProportion", iProportion);
		billCountMap.put("eProportion", eProportion);
		billCountMap.put("expenditureData", expenditureData);
		billCountMap.put("incomeData", incomeData);
		return billCountMap;
	}
	
	private DataRow getUserInfo(String user_id, String fundid)
	{
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		DataRow queryData = new DataRow();
		queryData.set("user_id", user_id);
		DataRow userAccountPwd = null;
		if (!StringHelper.isBlank(fundid))
		{
			queryData.set("fundAccount", fundid);
			userAccountPwd = userInfoService.queryUserInfoVo(queryData);
			if (userAccountPwd == null)
			{
				throw new InvokeException(getErrorNo(99), "数据库中，该用户尚未同步这种类型的资金帐号");
			}
		}
		else
		{
			userAccountPwd = userInfoService.queryUserInfoVo(queryData);
			if (userAccountPwd == null)
			{
				throw new InvokeException(getErrorNo(98), "根据用户ID无法查询到用户信息");
			}
		}
		return userAccountPwd;
	}
}
