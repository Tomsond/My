package com.thinkive.fxc.ismp.bus.base.business.service.impl;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.jdbc.session.SessionFactory;
import com.thinkive.fxc.ismp.bus.base.business.dao.SurveyAnswerRecordDao;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.SurveyAnswerRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.SurveyAnswerRecordService;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.business.service.impl.BusinessCommonServiceImpl;

/**
 * @描述: 业务问卷答案记录服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月29日 下午5:09:54
 */
public class SurveyAnswerRecordServiceImpl extends BusinessCommonServiceImpl implements SurveyAnswerRecordService
{
	
	private SurveyAnswerRecordDao surveyAnswerRecordDao;
	
	public void setSurveyAnswerRecordDao(SurveyAnswerRecordDao surveyAnswerRecordDao)
	{
		this.surveyAnswerRecordDao = surveyAnswerRecordDao;
	}
	
	@Override
	public void addOrUpdateAnswer(String answers, Long businessId, Long subId, String nodeId) throws Exception
	{
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			//先删除目前已有的问卷答案
			surveyAnswerRecordDao.deleteByBusinessId(businessId, nodeId, session);
			//批量添加
			//step4：解析用户答案,计算分数
			String[] answerList = answers.split("\\|");
			for (String answerItem : answerList)
			{
				String[] answerInfo = answerItem.split("_");
				Long questionId = Long.parseLong(answerInfo[0]);
				Long answerId = Long.parseLong(answerInfo[1]);
				Long mark = Long.parseLong(answerInfo[2]);
				SurveyAnswerRecordModel surveyAnswerRecordModel = new SurveyAnswerRecordModel();
				surveyAnswerRecordModel.setQueId(questionId);
				surveyAnswerRecordModel.setAnsId(answerId);
				surveyAnswerRecordModel.setMark(mark);
				surveyAnswerRecordModel.setBusinessId(businessId);
				surveyAnswerRecordModel.setNodeId(nodeId);
				surveyAnswerRecordModel.setSubId(subId);
				surveyAnswerRecordDao.add(surveyAnswerRecordModel);
			}
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public void addBusinessAndaddOrUpdateAnswer(String answers, BusinessEntityModel businessEntityModel, Long subId, String nodeId) throws Exception
	{
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//step1：新增业务办理实例
			this.addBusinessEntityModel(businessEntityModel, session);
			
			//入参
			Long businessId = businessEntityModel.getId();
			String ip = businessEntityModel.getIp();
			String opSource = businessEntityModel.getOpSource();
			String opStation = businessEntityModel.getOpStation();
			
			//step2：新增业务节点记录
			this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//step3：添加节点操作记录
			this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//先删除目前已有的问卷答案
			surveyAnswerRecordDao.deleteByBusinessId(businessId, nodeId, session);
			//批量添加
			//step4：解析用户答案,计算分数
			if (StringUtils.isNotBlank(answers))
			{
				String[] answerList = answers.split("\\|");
				for (String answerItem : answerList)
				{
					String[] answerInfo = answerItem.split("_");
					Long questionId = Long.parseLong(answerInfo[0]);
					Long answerId = Long.parseLong(answerInfo[1]);
					Long mark = Long.parseLong(answerInfo[2]);
					SurveyAnswerRecordModel surveyAnswerRecordModel = new SurveyAnswerRecordModel();
					surveyAnswerRecordModel.setQueId(questionId);
					surveyAnswerRecordModel.setAnsId(answerId);
					surveyAnswerRecordModel.setMark(mark);
					surveyAnswerRecordModel.setBusinessId(businessId);
					surveyAnswerRecordModel.setNodeId(nodeId);
					surveyAnswerRecordModel.setSubId(subId);
					surveyAnswerRecordDao.add(surveyAnswerRecordModel);
				}
			}
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
	}
	
	@Override
	public DataRow querySourceAndDefine(Long businessId, String nodeId)
	{
		return surveyAnswerRecordDao.querySourceAndDefine(businessId, nodeId);
	}
	
}
