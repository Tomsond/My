package com.thinkive.fxc.ismp.bus.business.user.idcardup;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ImageInformationModel;
import com.thinkive.fxc.ismp.bus.base.business.model.UserInfoModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.ImageInformationService;
import com.thinkive.fxc.ismp.bus.base.business.service.ImageUploadService;
import com.thinkive.fxc.ismp.bus.base.business.service.PoliceCheckService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.utils.ModularNodeUtil;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeSystem;
import com.thinkive.fxc.ismp.bus.base.util.ToolsHelper;
import com.thinkive.fxc.ismp.bus.business.rzrq.preMarginTrading.constant.ErrorCodeBusiness;
import com.thinkive.server.ResultVo;

/**
 * @描述: 身份证升位---身份证上传确认    
 *       1.执行这个Function之前一定上传过身份证，业务实例肯定不为空
 *       2.通过节点配置文件判断是否需要信息确认，如果需要，则入参必须包含身份证信息
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年9月10日 上午10:14:43
 */
public class Function1004908 extends IsmpFlowBaseFunction
{
	
	private ImageInformationModel imageInformationModel;//身份证信息
	
	@SuppressWarnings("unchecked")
	public ResultVo execute() throws Exception
	{
		initVar();
		
		//step1：没有业务办理实例
		if (businessEntityAndConfigVO == null)
		{
			throw new BusinessException(ErrorCodeSystem.FLOW_OPERATION_SEQUENCE_ERROR);
		}
		
		//step2：获取节点属性组、节点需要上传的所有影像编号集合、是否需要身份校验
		Map<String, Object> imgNodePropertyMap = ModularNodeUtil.getImgNodeProAndCodesAndNeedConfirm(nodePropertyConfigModelList);
		
		//是否需要信息确认
		String needCheckConfirm = (String) imgNodePropertyMap.get("needCheckConfirm");
		String needPoliceCheck = (String) imgNodePropertyMap.get("needPoliceCheck");
		String policeCheckType = (String) imgNodePropertyMap.get("policeCheckType");
		
		//如果需要公安校验，检查当前公安校验错误次数
		PoliceCheckService policeCheckService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_POLICECHECK, PoliceCheckService.class);
		if (DictionaryConstants.BOL_TRUE.equals(needPoliceCheck))
		{
			int currErrorTime = policeCheckService.getPoliceCheckErrorTime(userId, businessCode);
			int maxErrorTime = Integer.parseInt(policeCheckType);
			int leaveCount = maxErrorTime - currErrorTime;
			if (leaveCount <= 0)
			{
				throw new BusinessException(ErrorCodeSystem.BUSINESS_POLICECHECKMAX);
			}
		}
		
		//需要上传的影像资料集合
		List<String> mediaCodeList = (List<String>) imgNodePropertyMap.get("mediaCodeList");
		
		//节点属性组
		Map<String, DataRow> imageNodePropertyGroup = (Map<String, DataRow>) imgNodePropertyMap.get("imageNodePropertyGroup");
		
		//需要上传的影像资料总数
		int needUploadTotalMedias = imageNodePropertyGroup.size();
		
		//step3：校验影像资料有没有全部上传
		ImageUploadService imageUploadService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_IMAGEUPLOAD,ImageUploadService.class);
		if (!imageUploadService.checkImgUploadComplete(mediaCodeList, businessEntityAndConfigVO.getId(), nodeId, needUploadTotalMedias))
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_UPLOADIMG_NOTALL);
		}
		//step4：如果有影像需要信息确认（目前只有身份证正反面）
		if (DictionaryConstants.BOL_TRUE.equals(needCheckConfirm))
		{
			checkAndSaveInformation(userId, imageInformationModel);
		}
		//step5：公安校验
		if (DictionaryConstants.BOL_TRUE.equals(needPoliceCheck))
		{
			long currErrorTime = policeCheckService.policeCheckAndCacheErrorTime(userId, businessEntityAndConfigVO.getId(), businessCode, imageInformationModel.getIdentityNum(),
					imageInformationModel.getName());
			//公安校验失败是
			if (currErrorTime > 0)
			{
				//目前公安校验类型只能设置当天错误次数
				int maxErrorTime = Integer.parseInt(policeCheckType);
				Long leaveCount = maxErrorTime - currErrorTime;
				if (leaveCount <= 0)
				{
					throw new BusinessException(ErrorCodeSystem.BUSINESS_POLICECHECKMAX);
				}
				throw new BusinessException(ErrorCodeSystem.BUSINESS_POLICECHECKFAIL, new String[] { String.valueOf(leaveCount) });
			}
		}
		
		//保存影像资料信息确认数据
		ImageInformationService imageInformationService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_IMAGEINFORMATION, ImageInformationService.class);
		imageInformationModel.setBusinessId(businessEntityAndConfigVO.getId());
		imageInformationModel.setNodeId(nodeId);
		imageInformationService.add(imageInformationModel);
		
		//如果当前节点是最后一步且业务后台统一审核
		if (DictionaryConstants.FLOW_LASTSTEP_NEXT.equals(submitBprocNodeConfigAndDefineVO.getNextBpNodeId()) && DictionaryConstants.BOL_TRUE.equals(businessEntityAndConfigVO.getNeedAudit()))
		{
			//修改流程节点并添加审核任务并修改当前节点
			BusinessEntityModel businessEntityModel = new BusinessEntityModel();
			businessEntityModel.setId(businessEntityAndConfigVO.getId());
			businessEntityModel.setBusinessCode(businessEntityAndConfigVO.getBusinessCode());
			businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
			businessEntityModel.setOpSource(opSource);
			businessEntityModel.setIp(ip);
			businessEntityModel.setOpStation(opStation);
			BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
			businessEntityService.changeFlowNodeAndAddAutitTask(businessEntityModel, nodeId);
			
		}
		
		ResultVo resultVo = new ResultVo();
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午8:55:24
	 */
	private void initVar()
	{
		String name = this.getStrParameter("name");
		String identityNum = this.getStrParameter("identity_num");
		String papersAddr = this.getStrParameter("papers_addr");
		String signOffice = this.getStrParameter("sign_office");
		String validityBegin = this.getStrParameter("validity_begin");
		String validityEnd = this.getStrParameter("validity_end");
		String sex = this.getStrParameter("sex");
		String birthday = this.getStrParameter("birthday");
		String ethnicName = this.getStrParameter("ethnicname");
		imageInformationModel = new ImageInformationModel();
		if (StringUtils.isNotBlank(name))
		{
			imageInformationModel.setName(name);
		}
		if (StringUtils.isNotBlank(identityNum))
		{
			if (identityNum.length() != DictionaryConstants.IDENTITYNUM_EIGHTEEN)
			{
				throw new BusinessException(ErrorCodeCheckInput.FORMAT_IDCARD);
			}
			imageInformationModel.setIdentityNum(identityNum);
		}
		if (StringUtils.isNotBlank(sex))
		{
			imageInformationModel.setSex(sex);
		}
		if (StringUtils.isNotBlank(birthday))
		{
			imageInformationModel.setBirthday(birthday);
		}
		if (StringUtils.isNotBlank(papersAddr))
		{
			imageInformationModel.setPapersAddr(papersAddr);
		}
		if (StringUtils.isNotBlank(validityBegin))
		{
			imageInformationModel.setValidityBegin(validityBegin);
		}
		if (StringUtils.isNotBlank(validityEnd))
		{
			imageInformationModel.setValidityEnd(validityEnd);
		}
		if (StringUtils.isNotBlank(signOffice))
		{
			imageInformationModel.setSignOffice(signOffice);
		}
		if (StringUtils.isNotBlank(ethnicName))
		{
			imageInformationModel.setEthnicName(ethnicName);
		}
	}
	
	/**
	 * @描述：校验用户提交的数据
	 * @作者：刘恺
	 * @时间：2016年9月11日 下午6:13:02
	 * @param businessId
	 * @param nodeId
	 * @param userId
	 * @param imageInformationModel
	 * @return
	 */
	private void checkAndSaveInformation(Long userId, ImageInformationModel imageInformationModel)
	{
		//用户信息不能为空
		if (imageInformationModel.isEmpty())
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_NOINFORMATION);
		}
		//身份证不能为空
		else if (StringUtils.isBlank(imageInformationModel.getIdentityNum()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_IDNO);
		}
		//姓名不能为空
		else if (StringUtils.isBlank(imageInformationModel.getName()))
		{
			throw new BusinessException(ErrorCodeCheckInput.BLANK_USER_NAME);
		}
		//校验用户身份证与柜台数据是否一致
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoModel userInfoModel = userInfoService.queryUserInfoByUserId(userId);
		if (userInfoModel == null)
		{
			throw new BusinessException(ErrorCodeSystem.NOTEXIST_USER);
		}
		String gtIdNum = userInfoModel.getIdentityNum();
		//如果柜台身份证是18位
		if (DictionaryConstants.IDENTITYNUM_EIGHTEEN == gtIdNum.length())
		{
			throw new BusinessException(ErrorCodeBusiness.IDCARDUP_GTCART_ISEIGHTEEN);
		}
		//将柜台15位身份证转为18位  430722191990031923  430722199003192341
		if (!ToolsHelper.getEighteenByFifteen(gtIdNum).equals(imageInformationModel.getIdentityNum()) || !userInfoModel.getName().equals(imageInformationModel.getName()))
		{
			throw new BusinessException(ErrorCodeSystem.BUSINESS_INFORMATION_ERROR);
		}
	}
}
