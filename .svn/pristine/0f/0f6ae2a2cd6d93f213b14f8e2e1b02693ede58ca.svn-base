package com.thinkive.fxc.ismp.bus.business.resetpwd.function;


import com.thinkive.base.jdbc.DataRow;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.FlowNodeManageService;
import com.thinkive.fxc.ismp.bus.base.business.vo.BprocNodeConfigAndDefineVO;
import com.thinkive.fxc.ismp.bus.base.business.vo.BusinessEntityAndConfigVO;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.resetpwd.constants.ResetPwdConstants;
import com.thinkive.fxc.ismp.bus.business.resetpwd.service.ResetPwdService;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;
import com.thinkive.server.util.SpringUtil;

/**
 * @描述: 重置密码---获取业务办理数据
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 易龙
 * @版本: 2.0.0
 * @创建时间: 2017年09月20日 下午7:10:15
 */
public class Function1004941 extends ISMPBaseFunction {

    protected String opSource;

    protected String businessCode;

    protected String nodeId;

    protected String userId;

    protected String fundAccount;


    @Override
    public ResultVo execute() throws InvokeException, Exception {

        initVar();

        FlowNodeManageService flowNodeManageService = SpringUtil.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_FLOWNODEMANAGE, FlowNodeManageService.class);
        BprocNodeConfigAndDefineVO submitBprocNodeConfigAndDefineVO = flowNodeManageService.getBprocNodeConfigService(businessCode, opSource, nodeId, this.getRequest().getFuncNo());
        ResetPwdService resetPwdService = SpringUtil.getBean(ResetPwdConstants.SERVICE_ID_RESETPWD, ResetPwdService.class);
        BusinessEntityAndConfigVO businessEntityAndConfigVO = resetPwdService.queryEacVoNotCompleteByFundAccount(fundAccount, businessCode);

        flowNodeManageService.checkBusinessEntityCrrNode(submitBprocNodeConfigAndDefineVO, businessEntityAndConfigVO);

        //如果后台配置-需要人工审核，在查询到业务办理实例后，如果nodeid=finish，直接讲业务实例数据+密码重置接口返回给前端
        if (businessEntityAndConfigVO != null && DictionaryConstants.BOL_TRUE.equals(businessEntityAndConfigVO.getNeedAudit())
                && DictionaryConstants.FLOW_LASTSTEP_NEXT.equals(businessEntityAndConfigVO.getNodeId())) {

            ResultVo resultVo = new ResultVo();
            resultVo.setResult("businessEntityModel", businessEntityAndConfigVO);
            resultVo.setResult("defaultDate", new DataRow());
            resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
            resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
            return resultVo;
        }

        BusinessEntityModel businessEntityModel = new BusinessEntityModel();
        businessEntityModel.setUserId(Long.parseLong(userId));
        businessEntityModel.setBusinessCode(businessCode);
        businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
        businessEntityModel.setIp(ip);
        businessEntityModel.setOpSource(opSource);
        businessEntityModel.setOpStation(opStation);

        if (businessEntityAndConfigVO == null) {
            businessEntityModel.setIsComplete(DictionaryConstants.BOL_FALSE);
            resetPwdService.addBusinessEntityAndExtend(businessEntityModel, fundAccount, nodeId);
        } else {
            // 修改流程节点并添加审核任务并修改当前节点
            businessEntityModel.setId(businessEntityAndConfigVO.getId());
            BusinessEntityService businessEntityService = SpringUtil.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
            businessEntityService.changeBusinessFlowNode(businessEntityModel, nodeId);
        }

        ResultVo resultVo = new ResultVo();
        resultVo.setResult("businessEntityModel", businessEntityModel);
        resultVo.setResult("defaultDate", new DataRow());
        resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
        resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
        return resultVo;
    }

    /**
     * @描述: 获取业务入参
     */
    private void initVar() {
        opSource = this.getAndCheckBlankStrParam("op_source", ErrorCodeCheckInput.BLANK_OP_SOURCE);
        fundAccount = this.getAndCheckBlankStrParam("account", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
        userId = this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID);
        businessCode = this.getAndCheckBlankStrParam("businessCode", ErrorCodeCheckInput.BLANK_BUSINESSCODE);
        nodeId = this.getAndCheckBlankStrParam("nodeId", ErrorCodeCheckInput.BLANK_NODEID);
    }

}
