/**
 * 
 */
package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.BusinessConfigDao;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessConfigModel;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 业务属性配置表 <p>t_ismp_business_config</p> 数据层实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 尹杰民
 * @版本: 2.0 
 * @创建时间: 2016年8月15日 下午4:06:06
 */
public class BusinessConfigDaoImpl extends ISMPBaseDao implements BusinessConfigDao
{
	
	/*@Override
	public BusinessConfigModel add(BusinessConfigModel businessConfigModel) 
	{
	    String id = getSeqValue(BussinessTableConstants.T_ISMP_BUSINESS_CONFIG);
	    businessConfigModel.setId(Long.valueOf(id));
	    businessConfigModel.setCreateDate(new Date());
	    this.getJdbcTemplate().insert(BussinessTableConstants.T_ISMP_BUSINESS_CONFIG, businessConfigModel);
	    return businessConfigModel;
	}*/
	
	/* @Override
	 public int update(BusinessConfigModel businessConfigModel) 
	 {
	     businessConfigModel.setUpdateDate(new Date());
	     return this.getJdbcTemplate().update(BussinessTableConstants.T_ISMP_BUSINESS_CONFIG, businessConfigModel, "ID",
	             businessConfigModel.getId());
	 }
	 */
	
	@Override
	public BusinessConfigModel queryByBtypeId(Long btypeId)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID, BTYPE_ID, BUSINESS_TYPE, OP_SOURCE, NEED_AUDIT, DATA_SUBMITTYPE, BREAKPOINT_OPERATION");
		sql.append(", RESET_FLOW, CREATE_DATE, UPDATE_DATE, REATE_USER, LAST_UPDATEUSER  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_CONFIG).append(" WHERE BTYPE_ID = ? ");
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { btypeId });
		return ModelUtil.packInfo(queryResult, BusinessConfigModel.class);
	}
	
	@Override
	public BusinessConfigModel queryByOpSourceAndBusinessCode(String businessCode, String opSource)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT ID, BTYPE_ID, BUSINESS_CODE, OP_SOURCE, NEED_AUDIT, DATA_SUBMITTYPE, BREAKPOINT_OPERATION");
		sql.append(", RESET_FLOW  FROM ");
		sql.append(BusinessTableConstants.T_ISMP_BUSINESS_CONFIG).append(" WHERE BUSINESS_CODE = ? AND OP_SOURCE = ? ");
		DataRow queryResult = this.getJdbcTemplate().queryMap(sql.toString(), new Object[] { businessCode, opSource });
		return ModelUtil.packInfo(queryResult, BusinessConfigModel.class);
	}
	
	/* @Override
	 public int delete(Long id) 
	 {
	     StringBuilder sql = new StringBuilder();
	     sql.append("DELETE FROM ").append(BussinessTableConstants.T_ISMP_BUSINESS_CONFIG);
	     sql.append(" WHERE ID = ? ");
	     return this.getJdbcTemplate().update(sql.toString(), new Object[] { id });
	 }*/
	
}
