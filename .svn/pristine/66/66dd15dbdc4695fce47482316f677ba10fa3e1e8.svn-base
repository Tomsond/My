package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.util.StringUtil;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.SurveyAnswerResultDao;
import com.thinkive.fxc.ismp.bus.base.business.model.SurveyAnswerResultModel;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 问卷测评结果记录表(T_ISMP_SURVEY_ANSWER_RESULT)数据层接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2017年3月13日 下午4:31:06
 */
public class SurveyAnswerResultDaoImpl extends ISMPBaseDao implements SurveyAnswerResultDao
{
	
	@Override
	public SurveyAnswerResultModel add(SurveyAnswerResultModel surveyAnswerResultModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD);
		surveyAnswerResultModel.setId(Long.valueOf(id));
		surveyAnswerResultModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RESULT, surveyAnswerResultModel);
		return surveyAnswerResultModel;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<SurveyAnswerResultModel> queryByParams(SurveyAnswerResultModel surveyAnswerResultModel)
	{
		StringBuilder sql = new StringBuilder();
		List<String> paramsList = new ArrayList<String>();
		sql.append("SELECT ID, BUSINESS_ID, NODE_ID, SUB_ID, SUB_VALUE, VALUE_NAME, VALUE_LEVEL").append("  FROM ").append(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RESULT).append(" WHERE 1=1 ");
		Long businessId = surveyAnswerResultModel.getBusinessId();
		if (0 != businessId)
		{
			sql.append(" AND BUSINESS_ID = ?");
			paramsList.add(businessId.toString());
		}
		String nodeId = surveyAnswerResultModel.getNodeId();
		if (StringUtil.isNotEmpty(nodeId))
		{
			sql.append(" AND NODE_ID = ?");
			paramsList.add(nodeId);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), paramsList.toArray());
		return ModelUtil.packList(queryResult, SurveyAnswerResultModel.class);
	}
	
	@Override
	public int deleteByBusinessId(Long businessId, String nodeId, Session session)
	{
		StringBuilder sql = new StringBuilder("DELETE FROM ");
		sql.append(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RESULT);
		sql.append(" WHERE BUSINESS_ID = ? AND NODE_ID = ? ");
		return session.update(sql.toString(), new Object[] { businessId, nodeId });
	}
	
	@Override
	public int update(SurveyAnswerResultModel surveyAnswerResultModel)
	{
		Long businessId = surveyAnswerResultModel.getBusinessId();
		String nodeId = surveyAnswerResultModel.getNodeId();
		surveyAnswerResultModel.setUpdateDate(new Date());
		int count = this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RESULT, surveyAnswerResultModel, new String[] { "business_id", "node_id" },
				new Object[] { businessId, nodeId });
		surveyAnswerResultModel.setBusinessId(businessId);
		surveyAnswerResultModel.setNodeId(nodeId);
		return count;
	}
}
