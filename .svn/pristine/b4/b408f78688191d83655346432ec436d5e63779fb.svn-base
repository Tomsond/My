package com.thinkive.fxc.ismp.bus.business.fundaccount.function;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.function.IsmpFlowBaseFunction;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessConfigModel;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.model.ChoiceAccountRecordModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessConfigService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.fundaccount.constants.JjConstants;
import com.thinkive.fxc.ismp.bus.business.fundaccount.model.JjExtendModel;
import com.thinkive.fxc.ismp.bus.business.fundaccount.service.JjBusinessService;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

/**
 * 描述: 基金开户
 * 版权: Copyright (c) 2010
 * 公司: 思迪科技 
 * 作者: 刘恺
 * 版本: 1.0 
 * 创建日期: 2016年3月4日 
 * 创建时间: 下午1:55:35
 */
public class Function1004190 extends IsmpFlowBaseFunction
{
	
	private Long userId;
	
	private JjExtendModel jjExtendModel;
	
	private String tacodes; //基金公司,逗号分隔的基金公司代码列表
	
	private String tanames; //基金公司名称，逗号分隔的基金公司名称列表
	

	private Map<String, String> taMap = new HashMap<String, String>(); 
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo execute() throws Exception
	{
		initVar();
		//选择的帐号开通结果
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		
		//查询业务属性
		BusinessConfigService businessConfigService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSCONFIG, BusinessConfigService.class);
		BusinessConfigModel businessConfigModel = businessConfigService.queryByOpSourceAndBusinessCode(BusinessConstants.BUSINESS_OPENFUNDACCOUNT, opSource);
		
		//获取新业务实例对象
		BusinessEntityModel businessEntityModel = getNewBusinessEntity();
		businessEntityModel.setNodeId(submitBprocNodeConfigAndDefineVO.getNextBpNodeId());
		
		JjBusinessService jjBusinessService = SpringHelper.getBean(JjConstants.SERVICE_ID_JJBUSINESS, JjBusinessService.class);
		//如果没有配置业务属性,或者配置为需要审核
		if (businessConfigModel == null || DictionaryConstants.BOL_TRUE.equals(businessConfigModel.getNeedAudit()))
		{
			String[] tacodeArr = tacodes.split(",");
			for (String item : tacodeArr)
			{
				ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
				choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
				choiceAccountRecordModel.setStkbd(item + "|" + taMap.get(item));
				choiceAccountRecordModels.add(choiceAccountRecordModel);
			}
			jjBusinessService.addEntityAndExtendAndAgreeAndAccountAndAuditTask(businessEntityModel, jjExtendModel, submitBprocNodeConfigAndDefineVO.getNodeId(), null, choiceAccountRecordModels);
		}
		//如果是统一跑批,或者
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_PP.equals(businessConfigModel.getDataSubmitType()))
		{
			String[] tacodeArr = tacodes.split(",");
			for (String item : tacodeArr)
			{
				ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
				choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
				choiceAccountRecordModel.setStkbd(item+ "|" + taMap.get(item));
				choiceAccountRecordModels.add(choiceAccountRecordModel);
			}
			jjBusinessService.addEntityAndExtendAndAgreeAndAccountAndPpTask(businessEntityModel, jjExtendModel, submitBprocNodeConfigAndDefineVO.getNodeId(), null, choiceAccountRecordModels);
		}
		//如果是实时提交
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_THIRD.equals(businessConfigModel.getDataSubmitType()))
		{
			Map<String, Object> openResult = openFundAccount();
			choiceAccountRecordModels = (List<ChoiceAccountRecordModel>) openResult.get("choiceAccountRecordModels");
			String dealResult = (String) openResult.get("dealResult");
			businessEntityModel.setDealResult(dealResult);
			businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
			jjBusinessService.addEntityAndExtendAndAgreeAndAccount(businessEntityModel, jjExtendModel, submitBprocNodeConfigAndDefineVO.getNodeId(), null, choiceAccountRecordModels);
		}
		//如果中登服务时间提交第三方、非服务时间跑批
		else if (DictionaryConstants.BUSINESS_DATA_SUBMITTYPE_SERVICETIME.equals(businessConfigModel.getDataSubmitType()))
		{
			TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeService.class);
			//如果不是中登时间则跑批
			if (!tradeTimeService.checkZdTradeTime())
			{
				String[] tacodeArr = tacodes.split(",");
				for (String item : tacodeArr)
				{
					ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
					choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_NOTSTART);
					choiceAccountRecordModel.setStkbd(item+ "|" + taMap.get(item));
					choiceAccountRecordModels.add(choiceAccountRecordModel);
				}
				jjBusinessService.addEntityAndExtendAndAgreeAndAccountAndPpTask(businessEntityModel, jjExtendModel, submitBprocNodeConfigAndDefineVO.getNodeId(), null, choiceAccountRecordModels);
			}
			else
			{
				Map<String, Object> openResult = openFundAccount();
				choiceAccountRecordModels = (List<ChoiceAccountRecordModel>) openResult.get("choiceAccountRecordModels");
				String dealResult = (String) openResult.get("dealResult");
				businessEntityModel.setDealResult(dealResult);
				businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
				jjBusinessService.addEntityAndExtendAndAgreeAndAccount(businessEntityModel, jjExtendModel, submitBprocNodeConfigAndDefineVO.getNodeId(), null, choiceAccountRecordModels);
			}
		}
		
		resultVo.setResult("choiceAccountRecordModels", choiceAccountRecordModels);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	/**
	 * @描述：获取业务入参
	 * @作者：刘恺
	 * @时间：2016年8月23日 下午8:55:24
	 */
	private void initVar()
	{
		String address = this.getAndCheckBlankStrParam("address", ErrorCodeCheckInput.BLANK_ADRESS);
		String postcode = this.getAndCheckBlankStrParam("postcode", ErrorCodeCheckInput.BLANK_POSTCODE);
		String mobile = this.getAndCheckBlankStrParam("mobile", ErrorCodeCheckInput.BLANK_MOBILE);
		String email = this.getAndCheckBlankStrParam("email", ErrorCodeCheckInput.BLANK_EMAIL);
		String education = this.getStrParameter("adapter");
		String occupational = this.getStrParameter("occupational");
		tacodes = this.getAndCheckBlankStrParam("tacodes", ErrorCodeCheckInput.BLANK_TACODES);
		tanames = this.getAndCheckBlankStrParam("tanames", ErrorCodeCheckInput.BLANK_TANAMES);
		String [] tacodeArr = tacodes.split(",");
		String [] tanameArr = tanames.split(",");
		for(int i = 0; i<tacodeArr.length; i++){
			taMap.put(tacodeArr[i], tanameArr[i]);
		}
		
		jjExtendModel = new JjExtendModel();
		jjExtendModel.setEducation(education);
		jjExtendModel.setAddress(address);
		jjExtendModel.setPostcode(postcode);
		jjExtendModel.setMobile(mobile);
		jjExtendModel.setEmail(email);
		jjExtendModel.setOccupational(occupational);
	}
	
	/**
	 * @描述：实时开通基金开户
	 * @作者：刘恺
	 * @时间：2016年9月20日 下午1:06:44
	 * @param thirdInput
	 * @param tacodes
	 * @return
	 * @throws Exception 
	 */
	private Map<String, Object> openFundAccount() throws Exception
	{
		String[] tacodeArr = tacodes.split(",");
		
		//查询用户基本信息
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(userId, ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		
		//开通权限
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		List<ChoiceAccountRecordModel> choiceAccountRecordModels = new ArrayList<ChoiceAccountRecordModel>();
		String dealResult = DictionaryConstants.DEAL_RESULT_SUCCESS;
		for (String tacode : tacodeArr)
		{
			thirdInput.set("ta_code", tacode);
			ChoiceAccountRecordModel choiceAccountRecordModel = new ChoiceAccountRecordModel();
			choiceAccountRecordModel.setStkbd(tacode+ "|" + taMap.get(tacode));
			try
			{
				DataRow openRsult = thirdInterface.openFundAccount(thirdInput);
				choiceAccountRecordModel.setTrdAccount(openRsult.getString("ta_acc"));
				choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_SUCCESS);
				choiceAccountRecordModel.setDescription(DictionaryConstants.CHOICE_ACCOUNT_OPENSUCCESS);
			}
			catch (InvokeException e)
			{
				dealResult = DictionaryConstants.DEAL_RESULT_REAL_TIME_FAILURE;
				String msg = e.getMessage();
				choiceAccountRecordModel.setDescription(msg);
				choiceAccountRecordModel.setState(DictionaryConstants.CHOICEACCOUNT_DEALRESULT_FAIL);
			}
			choiceAccountRecordModels.add(choiceAccountRecordModel);
		}
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("choiceAccountRecordModels", choiceAccountRecordModels);
		result.put("dealResult", dealResult);
		return result;
	}
}
