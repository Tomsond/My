package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.function;

import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ThirdBankModel;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.service.BusinessEntityService;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.BusinessInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankContants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.model.UserBankBindModel;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.ThirdBankService;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;
import com.thinkive.server.InvokeException;
import com.thinkive.server.ResultVo;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/** 
 * @描述: 大额预约取款 
 * @Param:  
 * @return:
 * @Author: xuzong
 * @Date: 2018/9/21 
 */ 
public class Function1004807 extends ISMPBaseFunction
{
	
	private Long userId; //用户编号
	
	private String max_balance;//最大金额

	private String fundAccount;//最大金额

	@Override
	public ResultVo execute() throws Exception
	{
		//step1:接收参数并校验
		initVar();
		
		//step2:根据资金账号获取用户信息
		UserInfoService userInfoService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = userInfoService.queryAndCheckUserByUserIdAndAccount(userId, fundAccount);

		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		DataRow thirdInput = DataFormatUtils.packThirdInput(userInfoVo);
		List<DataRow> thirdbankCardList = thirdInterface.getBingingBankCards(thirdInput);

		String bank_no = "";
		for (int i = 0; i < thirdbankCardList.size(); i++)
		{
			DataRow bank = thirdbankCardList.get(i);
			if("1".equals(bank.getString("is_main_card"))){
				bank_no = bank.getString("bank_code");
			}
		}


		DataRow info = null;
		if(StringHelper.isNotEmpty(bank_no)) {

			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			calendar.add(Calendar.DATE, +1);
			thirdInput.set("precont_date", sdf.format(new Date()));
			thirdInput.set("valid_date", sdf.format(calendar.getTime()));
			thirdInput.set("max_balance", max_balance);
			thirdInput.set("bank_no", bank_no);
			thirdInput.set("fund_account", fundAccount);

			info = thirdInterface.svrbankPreDrawReg(thirdInput);

			BusinessEntityModel businessEntityModel = getNewBusinessEntity();
			businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
			businessEntityModel.setNodeId("finish");
			businessEntityModel.setDealResult(DictionaryConstants.DEAL_RESULT_SUCCESS);
			BusinessEntityService businessEntityService = SpringHelper.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_BUSINESSENTITY, BusinessEntityService.class);
			businessEntityService.add(businessEntityModel);
		}else{
			throw new BusinessException(ThirdBankErrorCode.NO_MATCHING_USERBANKBIND);//用户没有匹配的银行卡
		}

		
		//step6:打包出参
		ResultVo resultVo = new ResultVo();
		resultVo.setResult(info);
		resultVo.setErrorNo(DictionaryConstants.INVOKE_FUNCTION_SUCCESS);
		resultVo.setErrorMsg(DictionaryConstants.INVOKE_FUNCTION_SUCCESSMSG);
		return resultVo;
	}
	
	private void initVar()
	{
		userId = this.formatLongParam(this.getAndCheckBlankStrParam("user_id", ErrorCodeCheckInput.BLANK_USERID), ErrorCodeCheckInput.LONG_FORMAT_ERROR);
		fundAccount = this.getAndCheckBlankStrParam("fundAccount", ErrorCodeCheckInput.BLANK_FUNDACCOUNT);
		businessCode = this.getAndCheckBlankStrParam("businessCode", ErrorCodeCheckInput.BLANK_BUSINESSCODE);
		max_balance = this.getAndCheckBlankStrParam("amount", ErrorCodeCheckInput.AGREEMENT_REALVALUEAMOUNT);

	}
}
