package com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.thinkive.base.config.Configuration;
import com.thinkive.base.exception.BusinessException;
import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.jdbc.session.SessionFactory;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.ThirdBankDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ThirdBankModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.impl.TradeTimeServiceImpl;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.ThirdBankInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessConstants;
import com.thinkive.fxc.ismp.bus.base.business.model.BusinessEntityModel;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankContants;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.contants.ThirdBankErrorCode;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.dao.ThirdBankBusinessInfoDao;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.dao.UserBankBindDao;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.model.ThirdBankExtendModel;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.model.UserBankBindModel;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.service.ThirdBankService;
import com.thinkive.fxc.ismp.bus.business.assets.thirdbank.vo.ThirdBankBusinessInfoVo;
import com.thinkive.fxc.ismp.bus.business.service.impl.BusinessCommonServiceImpl;
import com.thinkive.fxc.ismp.bus.business.util.DataFormatUtils;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdDictionaryConstants;
import com.thinkive.fxc.ismp.bus.third.service.ThirdInterface;

/**
 * @描述: 三方存管同步服务层接口实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年8月24日 下午1:38:36
 */
public class ThirdBankServiceImpl extends BusinessCommonServiceImpl implements ThirdBankService
{
	
	private UserBankBindDao userBankBindDao;
	
	private ThirdBankDao thirdBankDao;
	
	private ThirdBankBusinessInfoDao thirdBankBusinessInfoDao;
	
	public void setUserBankBindDao(UserBankBindDao userBankBindDao)
	{
		this.userBankBindDao = userBankBindDao;
	}
	
	public void setThirdBankDao(ThirdBankDao thirdBankDao)
	{
		this.thirdBankDao = thirdBankDao;
	}
	
	public void setThirdBankBusinessInfoDao(ThirdBankBusinessInfoDao thirdBankBusinessInfoDao)
	{
		this.thirdBankBusinessInfoDao = thirdBankBusinessInfoDao;
	}
	
	@Override
	public void deleteByUserId(Long userId)
	{
		userBankBindDao.deleteByUserId(userId);
	}
	
	@Override
	public Boolean addOrUpdateUserBankBind(DataRow data)
	{
		String userId = data.getString("user_id");
		String account = data.getString("account");
		String fundAccount = data.getString("fund_account");
		
		//如果参数不全，则不执行数据库
		if (StringUtils.isBlank(userId)|| StringUtils.isBlank(fundAccount))
		{
			return false;
		}
		//先进行update操作
		UserBankBindModel userBankBindModel = new UserBankBindModel();
		userBankBindModel.setUserId(Long.valueOf(data.getString("user_id")));
		userBankBindModel.setBankCode(data.getString("bank_code"));
		userBankBindModel.setAccount(data.getString("account"));
		userBankBindModel.setStatus(DictionaryConstants.BOL_TRUE);
		userBankBindModel.setFundAccount(data.getString("fund_account"));
		userBankBindModel.setUpdateTime(new Date());
		userBankBindModel.setIsMainCard(data.getString("is_main_card"));
		userBankBindModel.setContractStatus(data.getString("contract_status"));
		userBankBindModel.setBankToSecurityFlag(data.getString("bankToSecurity_flag"));
		userBankBindModel.setSecuritytToBankFlag(data.getString("securityToBank_flag"));
		Integer total = userBankBindDao.update(userBankBindModel);
		//如果更新记录数小于1则进行add操作
		if (total < 1)
		{
			userBankBindModel.remove("update_time");
			userBankBindDao.add(userBankBindModel);
		}
		return true;
	}
	
	@Override
	public UserBankBindModel addUserBankBind(DataRow data)
	{
		//先进行update操作
		UserBankBindModel userBankBindModel = new UserBankBindModel();
		userBankBindModel.setUserId(Long.valueOf(data.getString("user_id")));
		userBankBindModel.setBankCode(data.getString("bank_code"));
		userBankBindModel.setAccount(data.getString("account"));
		userBankBindModel.setStatus(DictionaryConstants.BOL_TRUE);
		userBankBindModel.setFundAccount(data.getString("fund_account"));
		userBankBindModel.setUpdateTime(new Date());
		userBankBindModel.setIsMainCard(data.getString("is_main_card"));
		userBankBindModel.setContractStatus(data.getString("contract_status"));
		userBankBindModel.setBankToSecurityFlag(data.getString("bankToSecurity_flag"));
		userBankBindModel.setSecuritytToBankFlag(data.getString("securityToBank_flag"));
		userBankBindModel.setMoneyType(data.getString("money_type"));
		int total = userBankBindDao.update(userBankBindModel);
		if(total<1){
		 userBankBindModel.remove("update_time");
		 userBankBindDao.add(userBankBindModel);
		}
		return userBankBindModel;
	}
	
	@Override
	public UserBankBindModel queryByAccountAndUserId(String account, Long userId)
	{
		return userBankBindDao.queryByAccountAndUserId(account, userId);
	}
	
	@Override
	public ThirdBankModel queryThirdBankModelByBankNo(String bankNo)
	{
		return thirdBankDao.queryByBankNo(bankNo);
	}
	
	@Override
	public List<ThirdBankBusinessInfoVo> queryByParams(ThirdBankBusinessInfoVo thirdBankBusinessInfoVo)
	{
		return thirdBankBusinessInfoDao.queryByParams(thirdBankBusinessInfoVo);
	}
	
	@Override
	public Long addThirdBankBusinessInfoVo(ThirdBankBusinessInfoVo thirdBankBusinessInfoVo) throws Exception
	{
		Long businessId = null;
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//获取入参
			String nodeId = thirdBankBusinessInfoVo.getNodeId();
			String ip = thirdBankBusinessInfoVo.getIp();
			String opSource = thirdBankBusinessInfoVo.getOpSource();
			String opStation = thirdBankBusinessInfoVo.getOpStation();
			Long userId = thirdBankBusinessInfoVo.getUserId();
			String isComplete = thirdBankBusinessInfoVo.getIsComplete();
			String dealResult = thirdBankBusinessInfoVo.getDealResult();
			
			//step1:添加三方存管业务实例
			BusinessEntityModel businessEntityModel = new BusinessEntityModel(userId, BusinessConstants.BUSINESS_THIRDBANK, nodeId, isComplete,dealResult, opSource, opStation, ip);
			businessEntityModel = this.addBusinessEntityModel(businessEntityModel, session);
			
			//setp2:添加三方存管业务拓展信息
			businessId = businessEntityModel.getId();
			ThirdBankExtendModel thirdBankExtendModel = new ThirdBankExtendModel();
			thirdBankExtendModel.setBusinessId(businessId);
			thirdBankExtendModel.setOpType(thirdBankBusinessInfoVo.getOpType());
			thirdBankExtendModel.setNewBankcode(thirdBankBusinessInfoVo.getNewBankcode());
			thirdBankExtendModel.setNewBanknum(thirdBankBusinessInfoVo.getNewBanknum());
			thirdBankExtendModel.setOldBankcode(thirdBankBusinessInfoVo.getOldBankcode());
			thirdBankExtendModel.setOldBanknum(thirdBankBusinessInfoVo.getOldBanknum());
			thirdBankExtendModel.setFundAccount(thirdBankBusinessInfoVo.getFundAccount());
			thirdBankExtendModel.setBindErrorCount(thirdBankBusinessInfoVo.getBindErrorCount());
			thirdBankBusinessInfoDao.addThirdBankModel(thirdBankExtendModel, session);
			
			//step3:新增流程节点记录(三方存管新绑定方式为一步式)
			this.addFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//step4：添加节点操作记录
			this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
			session.commitTrans();
		}
		catch (Exception e)
		{
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return businessId;
	}
	
	@Override
	public UserBankBindModel queryByBankCodeAndFundAccountAndUserId(String bankCode, String fundAccount, Long userId)
	{
		return userBankBindDao.queryByBankCodeAndFundAccountAndUserId(bankCode, fundAccount, userId);
	}
	
	@Override
	public List<ThirdBankBusinessInfoVo> queryCancelSuccNoBindInfo(Long userId, String fundAccount)
	{
		//会有有两种不同场景产生解绑成功，但绑定失败的数据 (修改或者先注销再绑定）
		ThirdBankBusinessInfoVo infoVo = new ThirdBankBusinessInfoVo();
		infoVo.setUserId(userId);
		infoVo.setFundAccount(fundAccount);
		infoVo.setIsComplete(DictionaryConstants.BOL_FALSE);//未完成
		infoVo.setOpType(ThirdBankContants.THIRDBANK_OP_TYPE_CANCELANDBIND);
		List<ThirdBankBusinessInfoVo> infoVos = this.thirdBankBusinessInfoDao.queryByParams(infoVo);
		return infoVos;
	}
	
	@Override
	public int completeCancelBindErrorInfo(Long businessId)
	{
		BusinessEntityModel businessEntityModel = new BusinessEntityModel();
		businessEntityModel.setId(businessId);
		businessEntityModel.setIsComplete(DictionaryConstants.BOL_TRUE);
		return businessEntityDao.update(businessEntityModel);
	}
	
	@Override
	public ThirdBankBusinessInfoVo queryByBusinessId(Long businessId)
	{
		return thirdBankBusinessInfoDao.queryByBusinessId(businessId);
	}
	
	@Override
	public DataRow queryThirdbankByBusinessId(Long businessId){
	    return thirdBankBusinessInfoDao.queryThirdbankByBusinessId(businessId);
	}
	
	@Override
	public int updateBindErrorCount(Long businessId, int bindErrorCount)
	{
		ThirdBankExtendModel bankExtendModel = new ThirdBankExtendModel();
		bankExtendModel.setBusinessId(businessId);
		bankExtendModel.setBindErrorCount(bindErrorCount);
		return thirdBankBusinessInfoDao.update(bankExtendModel);
	}
	
	@Override
	public Boolean updateThirdBankBusinessInfoVo(ThirdBankBusinessInfoVo thirdBankBusinessInfoVo) throws Exception
	{
		Boolean flag = true;
		Session session = null;
		try
		{
			//创建session，开启事务
			session = SessionFactory.getSession(SystemConstants.DB_ISMP);
			session.beginTrans();
			
			//获取入参
			Long businessId = thirdBankBusinessInfoVo.getId();
			String nodeId = thirdBankBusinessInfoVo.getNodeId();
			String ip = thirdBankBusinessInfoVo.getIp();
			String opSource = thirdBankBusinessInfoVo.getOpSource();
			String opStation = thirdBankBusinessInfoVo.getOpStation();
			String isComplete = thirdBankBusinessInfoVo.getIsComplete();
			String dealResult = thirdBankBusinessInfoVo.getDealResult();
			
			//step1:添加三方存管业务实例
			BusinessEntityModel businessEntityModel = new BusinessEntityModel();
			businessEntityModel.setId(businessId);
			businessEntityModel.setNodeId(nodeId);
			businessEntityModel.setIsComplete(isComplete);
			businessEntityModel.setDealResult(dealResult);
			int total = this.updateBusinessEntityModel(businessEntityModel, session);
			
			//setp2:添加三方存管业务拓展信息
			ThirdBankExtendModel thirdBankExtendModel = new ThirdBankExtendModel();
			thirdBankExtendModel.setBusinessId(businessId);
			thirdBankExtendModel.setNewBankcode(thirdBankBusinessInfoVo.getNewBankcode());
			thirdBankExtendModel.setNewBanknum(thirdBankBusinessInfoVo.getNewBanknum());
			int total2 = thirdBankBusinessInfoDao.update(thirdBankExtendModel, session);
			
			//step3:新增或流程节点记录(三方存管)
			this.addOrUpdateFlowNodeModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//step4：添加节点操作记录
			this.addNodeLogModel(businessId, nodeId, ip, opSource, opStation, session);
			
			//step5:如果数据存在漏洞，则session回滚并关闭,否则就提交
			if (1 == total && 1 == total2)
			{
				session.commitTrans();
			}
			else
			{
				flag = false;
				session.rollbackTrans();
			}
		}
		catch (Exception e)
		{
			flag = false;
			if (session != null)
			{
				session.rollbackTrans();
			}
			throw e;
		}
		finally
		{
			if (session != null)
			{
				session.close();
			}
		}
		return flag;
	}
	
	@Override
	public List<ThirdBankInfoVo> queryByBindTypeAndIsPwd(String bindtype, String ispwd)
	{
		return thirdBankDao.queryByBindTypeAndIsPwd(bindtype, ispwd);
	}
	
	@Override
	public ThirdBankModel queryThirdBankModelById(Long id)
	{
		return thirdBankDao.queryById(id);
	}
	
	@Override
	public DataRow cancelCheck(String op_account, String fund_account, DataRow thirdInput) throws Exception
	{
		thirdInput.set("account", fund_account);
		thirdInput.set("op_account", op_account);
		String checkFlag = DictionaryConstants.BOL_FALSE;//检查结果


		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);

		DataRow checkResult = new DataRow();

		DataRow outDataResult = thirdInterface.checkCancelBankAccount(thirdInput);
		String check_str = outDataResult.getString("check_str");
		if(outDataResult.getString("flag").equals("1")){
			checkResult.set("checkFlag", DictionaryConstants.BOL_TRUE);
			checkResult.set("check_str", check_str);
		}else if(outDataResult.getString("flag").equals("0")){

			checkResult.set("checkFlag", checkFlag);
			checkResult.set("check_str", check_str);
		}
		return checkResult;
	}
	
	private String checkCurrBusiness(DataRow thirdInput)
	{
		String checkFlag = DictionaryConstants.BOL_TRUE;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		String flag = thirdInterface.hasZtBusiness(thirdInput);
		//如果有在途业务，则无法办理业务，条件不满足
		if (DictionaryConstants.BOL_TRUE.equals(flag))
		{
			checkFlag = DictionaryConstants.BOL_FALSE;
		}
		return checkFlag;
	}
	
	private String checkTradeRecored(DataRow thirdInput)
	{
		String checkFlag = DictionaryConstants.BOL_TRUE;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		//查询当天是否有委托
		String hasTodayWtFlag = thirdInterface.hasTodayWt(thirdInput);
		if (DictionaryConstants.BOL_TRUE.equals(hasTodayWtFlag))
		{
			checkFlag = DictionaryConstants.BOL_FALSE;
		}
		//查询银证转账流水
		String hasBanktransFerflowFlag = thirdInterface.hasBanktransFerflow(thirdInput);
		if (DictionaryConstants.BOL_TRUE.equals(hasBanktransFerflowFlag))
		{
			checkFlag = DictionaryConstants.BOL_FALSE;
		}
		return checkFlag;
	}
	
	private Map<String, String> checkAssetInfo(String op_account, String fund_account, DataRow thirdInput)
	{
		Map<String, String> result = new HashMap<String, String>();
		String checkBalanceFlag = DictionaryConstants.BOL_TRUE;
		String checkInterestBaseFlag = DictionaryConstants.BOL_TRUE;
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		thirdInput.set("fund_account", op_account);
		List<DataRow> assetList = thirdInterface.getAssetInfo(thirdInput);
		DataRow assetInfo = assetList.get(0);
		if (0 != assetInfo.getDouble("fundbal"))
		{
			checkBalanceFlag = DictionaryConstants.BOL_FALSE;
		}
		if (0 != assetInfo.getDouble("integral_balance"))
		{
			checkInterestBaseFlag = DictionaryConstants.BOL_FALSE;
			result.put("checkInterestBase", DictionaryConstants.BOL_FALSE);
		}
		result.put("checkBalanceFlag", checkBalanceFlag);
		result.put("checkInterestBaseFlag", checkInterestBaseFlag);
		return result;
	}
	
	@Override
	public void checkBindBankInfo(ThirdBankModel thirdBankModel, String card_num, String cardPassword)
	{
		String zzbindtype = thirdBankModel.getBindType();//1：一步式 2：预指定；
		//检查银行自动绑定方式字段是否设置正确
		if (!ThirdBankContants.BINDTYPE_ONETYPE.equals(zzbindtype) && !ThirdBankContants.BINDTYPE_PRE_SPECIFIED.equals(zzbindtype))
		{
			throw new BusinessException(ThirdBankErrorCode.ERROR_BIND_TYPE);
		}
		
		// 如果银行三方存管绑定方式为一步式
		if (ThirdBankContants.BINDTYPE_ONETYPE.equals(zzbindtype))
		{
			String isPwd = thirdBankModel.getIsPwd();//一步式是否需要密码 (1需要，0不需要)
			//如果一步式需要密码
			if (ThirdBankContants.IS_PWD_NEED.equals(isPwd))
			{
				if (StringUtils.isBlank(card_num))
				{
					throw new BusinessException(ErrorCodeCheckInput.BLANK_BANKCARD);
				}
				if (StringUtils.isBlank(cardPassword))
				{
					throw new BusinessException(ErrorCodeCheckInput.BLANK_BANKCARDPWD);
				}
			}
		}
		
		//如果银行三方存管绑定方式为预指定
		if (ThirdBankContants.BINDTYPE_PRE_SPECIFIED.equals(zzbindtype))
		{
			String idCard = thirdBankModel.getIsCard();//预指定是否需要输入银行卡卡号 1:需要 0不需要
			//如果预指定需要卡号
			if (ThirdBankContants.IS_CARD_NEED.equals(idCard))
			{
				if (StringUtils.isBlank(card_num))
				{
					throw new BusinessException(ThirdBankErrorCode.PRE_CARD_NO_BLANK);
				}
			}
		}
	}
	
	/**
	 * @描述：校验交易时间
	 * @作者：刘恺
	 * @时间：2017年2月22日 上午11:20:54
	 */
	@Override
	public void checkTradeTime()
	{
		TradeTimeService tradeTimeService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_TRADETIME, TradeTimeServiceImpl.class);
		Boolean tradeTimeFlag = tradeTimeService.checkBankTradeTime();
		if (!tradeTimeFlag)
		{
			throw new BusinessException(ThirdBankErrorCode.NO_TRADEDATE);
		}
	}
	
	@Override
	public void checkBankCount(UserInfoVo userInfoVo, String opType) throws Exception
	{
		
		ThirdInterface thirdInterface = SpringHelper.getBean(ThirdDictionaryConstants.SERVICE_ID_THIRDINTERFACE, ThirdInterface.class);
		List<DataRow> dataRows = thirdInterface.getBingingBankCards(DataFormatUtils.packThirdInput(userInfoVo));//已经绑定过的银行卡
		int isbindingSize = dataRows.size();//已经绑定过的银行卡数量
		int bankNumMax = Configuration.getInt(ThirdBankContants.SYSCONFIG_BANKNUMMAX);//配置文件中设置的最大准许绑定的银行卡数量
		if (isbindingSize > bankNumMax)
		{
			throw new BusinessException(ThirdBankErrorCode.MORE_THAN_THIRDBANKLIMIT);//绑定数量超出上限
		}
		//获取正在办理的修改业务流程总数(如果已绑定银行卡数量没超过，还需要查询正在办理的三方存管业务绑定银行卡数)
		List<ThirdBankBusinessInfoVo> thirdBankBusinessInfoVos = queryCancelSuccNoBindInfo(userInfoVo.getUserId(), userInfoVo.getFundAccount());
		if (null != thirdBankBusinessInfoVos)
		{
			int tbsize = thirdBankBusinessInfoVos.size();//业务办理中的银行卡卡数
			isbindingSize += tbsize;
			//由于绑定后取消业务本身占用了一个银行卡位置，所有还可以绑定的银行卡数量需要-1
			if (ThirdBankContants.THIRDBANK_OP_TYPE_CANCELANDBIND.equals(opType))
			{
				isbindingSize--;
			}
			if (isbindingSize >= bankNumMax)
			{
				throw new BusinessException(ThirdBankErrorCode.MORE_THAN_THIRDBANKLIMIT);//绑定数量超出上限
			}
		}
	}
	
	@Override
	public void checkCardExit(String cardNum, Long userId)
	{
		if (StringUtils.isNotBlank(cardNum))
		{
			UserBankBindModel bankBindModel = queryByAccountAndUserId(cardNum, userId);
			if (bankBindModel != null && !ThirdBankContants.CONTRACT_STATUS_CANCEL.equals(bankBindModel.getContractStatus()))
			{
				throw new BusinessException(ThirdBankErrorCode.BANKCARD_BOUND);
			}
		}
	}

	@Override
	public UserBankBindModel queryUserBindMainCard(Long userId,String fundAccount) {
		return userBankBindDao.queryUserBindMainCard(userId,fundAccount);
	}

	@Override
	public List<ThirdBankBusinessInfoVo> querySuccBindInfo(Long userId, String fundAccount) {

		ThirdBankBusinessInfoVo infoVo = new ThirdBankBusinessInfoVo();
		infoVo.setUserId(userId);
		infoVo.setFundAccount(fundAccount);
		infoVo.setIsComplete(DictionaryConstants.BOL_TRUE);//已完成
		infoVo.setOpType(ThirdBankContants.THIRDBANK_OP_TYPE_CANCELANDBIND);
		List<ThirdBankBusinessInfoVo> infoVos = this.thirdBankBusinessInfoDao.queryByParams(infoVo);
		return infoVos;
	}

	 @Override
    public void addOrUpdateThirdBankModel(ThirdBankExtendModel thirdBankExtendModel) throws Exception{  
        int number=thirdBankBusinessInfoDao.update(thirdBankExtendModel);
        if(number ==0 ){ 
            thirdBankBusinessInfoDao.addThirdBankModel(thirdBankExtendModel);
        }
    }
}
