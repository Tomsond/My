/**
 * 
 */
package com.thinkive.fxc.ismp.bus.base.business.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.jdbc.session.Session;
import com.thinkive.base.util.StringUtil;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BaseTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessTableConstants;
import com.thinkive.fxc.ismp.bus.base.business.dao.SurveyAnswerRecordDao;
import com.thinkive.fxc.ismp.bus.base.business.model.SurveyAnswerRecordModel;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseDao;
import com.thinkive.fxc.ismp.bus.base.constants.SystemConstants;
import com.thinkive.fxc.ismp.bus.base.util.ModelUtil;

/**
 * @描述: 问卷答案记录表(t_ismp_survey_answer)数据层实现类
 * @版权: Copyright (c) 2016 
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 尹杰民
 * @版本: 2.0 
 * @创建时间: 2016年8月16日 上午10:58:03
 */
public class SurveyAnswerRecordDaoImpl extends ISMPBaseDao implements SurveyAnswerRecordDao
{
	
	@Override
	public SurveyAnswerRecordModel add(SurveyAnswerRecordModel surveyAnswerModel)
	{
		String id = getSeqValue(SystemConstants.DB_ISMP,BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD);
		surveyAnswerModel.setId(Long.valueOf(id));
		surveyAnswerModel.setCreateDate(new Date());
		this.getJdbcTemplate().insert(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD, surveyAnswerModel);
		return surveyAnswerModel;
	}
	
	@Override
	public int update(SurveyAnswerRecordModel surveyAnswerModel)
	{
		surveyAnswerModel.setUpdateDate(new Date());
		return this.getJdbcTemplate().update(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD, surveyAnswerModel, "ID", surveyAnswerModel.getId());
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<SurveyAnswerRecordModel> queryByParams(Long businessId, String nodeId)
	{
		StringBuilder sql = new StringBuilder();
		List<String> paramsList = new ArrayList<String>();
		sql.append("SELECT LOG_ID, TASK_ID, FLOW_ID, EXEC_STATUS, START_DATE, END_DATE, MARK").append("  FROM ").append(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD).append(" WHERE 1=1 ");
		if (null != businessId)
		{
			sql.append(" AND BUSINESS_ID = ?");
			paramsList.add(businessId.toString());
		}
		
		if (StringUtil.isNotEmpty(nodeId))
		{
			sql.append(" AND NODE_ID = ?");
			paramsList.add(nodeId);
		}
		List<DataRow> queryResult = this.getJdbcTemplate().query(sql.toString(), paramsList.toArray());
		return ModelUtil.packList(queryResult, SurveyAnswerRecordModel.class);
	}
	
	@Override
	public void deleteByBusinessId(Long businessId, String nodeId, Session session) throws Exception
	{
		StringBuilder sql = new StringBuilder("DELETE FROM ");
		sql.append(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD);
		sql.append(" WHERE BUSINESS_ID = ? AND NODE_ID = ? ");
		session.update(sql.toString(), new Object[] { businessId, nodeId });
	}
	
	@Override
    public DataRow querySourceAndDefine(Long businessId, String nodeId)
    {
        StringBuilder sql=new StringBuilder();
        sql.append(" SELECT TD.SUBJECT_ID,TA.SCORE,TD.DEFINE,TD.DEFINE_VALUE ");
        sql.append(" FROM ").append(BaseTableConstants.T_FXC_SURVEY_DEFINE).append(" TD ,");
        sql.append(" (SELECT DISTINCT SUB_ID FROM ").append(BusinessTableConstants.T_ISMP_SURVEY_ANSWER_RECORD).append(" WHERE BUSINESS_ID = ? AND NODE_ID = ? ) TR ,");
        sql.append(" (SELECT SUM(TN.MARK) SCORE FROM T_ISMP_SURVEY_ANSWER_RECORD TR INNER JOIN T_FXC_SURVEY_ANSWER TN ON TR.ANS_ID = TN.ID ");
        sql.append(" WHERE TR.BUSINESS_ID = ? AND TR.NODE_ID = ? )TA");
        sql.append(" WHERE TD.SUBJECT_ID = TR.SUB_ID  AND TD.UPLIMIT>=TA.SCORE AND TD.DOWNLIMIT<= TA.SCORE ");
        DataRow dataRow=this.getJdbcTemplate().queryMap(sql.toString(), new Object[]{businessId,nodeId,businessId,nodeId});
        return dataRow;
    }
}
