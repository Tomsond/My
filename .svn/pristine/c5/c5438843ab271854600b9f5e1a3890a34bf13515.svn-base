package com.thinkive.fxc.ismp.bus.base.business.function;

import java.util.*;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.SpringHelper;
import com.thinkive.base.util.StringHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.contants.BasicServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.EnumValueModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.AgreeMentService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.BranchInfoService;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.EnumInfoService;
import com.thinkive.fxc.ismp.bus.base.basicdata.vo.AgreementInfoVo;
import com.thinkive.fxc.ismp.bus.base.business.constants.BusinessServiceBeanIdConstants;
import com.thinkive.fxc.ismp.bus.base.business.service.UserInfoService;
import com.thinkive.fxc.ismp.bus.base.business.vo.UserInfoVo;
import com.thinkive.fxc.ismp.bus.base.common.ISMPBaseFunction;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;
import com.thinkive.fxc.ismp.bus.base.constants.ErrorCodeCheckInput;
import com.thinkive.fxc.ismp.bus.third.constants.ThirdInterfaceConstant;
import com.thinkive.server.ResultVo;
import com.thinkive.server.util.SpringUtil;
import org.springframework.ui.Model;

/**
 * @描述: 根据电子协议类别查询该类别下的电子协议
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 田源
 * @版本: 2.0.0 
 * @创建时间: 2016年9月16日 下午3:27:08
 */
public class Function1004178 extends ISMPBaseFunction
{
	private String user_id;

	private UserInfoService userInfoService;
	@Override
	public ResultVo execute() throws Exception
	{
		
		//获取入参并校验
		String agreeCodes = this.getAndCheckBlankStrParam("agreeCodes", ErrorCodeCheckInput.BLANK_AGREE_NO); //协议编号字符串，按','划分；
		String ifmd5 = this.getStrParameter("ifmd5", DictionaryConstants.BOL_TRUE);//默认只查MD5，而不是原文


		user_id=this.getStrParameter("user_id");
		userInfoService = SpringUtil.getBean(BusinessServiceBeanIdConstants.SERVICE_ID_USERINFO, UserInfoService.class);
		UserInfoVo userInfoVo = new UserInfoVo();
		if( StringHelper.isNotEmpty(user_id)){
			userInfoVo = userInfoService.queryAndCheckUserByUserIdAndType(Long.valueOf(user_id), ThirdInterfaceConstant.USER_ACCOUNT_TYPE_ZQ);
		}
		//查询电子协议
		//如果传递的是协议类型没有或者为一个
		String[] agreeArrs = agreeCodes.split(",");
		AgreeMentService service = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_AGREEMENT, AgreeMentService.class);
		List<AgreementInfoVo> infoVos = new ArrayList<AgreementInfoVo>();
		if (null != agreeArrs)
		{
			for (String string : agreeArrs)
			{
				if (DictionaryConstants.BOL_TRUE.equals(ifmd5))
				{
					AgreementInfoVo agreementInfoVo = service.queryInfoAndMdByCode(string);
					if (null != agreementInfoVo)
					{
						infoVos.add(agreementInfoVo);
					}
				}
				else
				{
					AgreementInfoVo agreementInfoVo = service.queryInfoAndContentByCode(string);
					if (null != agreementInfoVo)
					{
						if(StringHelper.isNotEmpty(getContent(agreementInfoVo, userInfoVo))){
							agreementInfoVo.set("agree_content", getContent(agreementInfoVo, userInfoVo));
						}
						infoVos.add(agreementInfoVo);
					}
				}
			}
		}
		
		//出参
		ResultVo resultVo = new ResultVo();
		resultVo.setResult(infoVos);
		resultVo.setErrorNo(0);
		resultVo.setErrorMsg("调用成功");
		return resultVo;
	}

	public String getContent(AgreementInfoVo modelMsg,UserInfoVo userInfoVo){
		String agree_content= modelMsg.getString("agree_content");//协议文本
		if(userInfoVo!=null&&userInfoVo.size()>0){
			Map<String, String> keyWords = new HashMap<String, String>();
			Calendar now = Calendar.getInstance();
			keyWords.put("username", userInfoVo.getName());//客户名称
			keyWords.put("clientid", userInfoVo.getClientId());//客户号
			keyWords.put("fundaccount", userInfoVo.getFundAccount());
			keyWords.put("branchname", getBranchNameByNO(userInfoVo.getBranchNo()));
			keyWords.put("identitytype", getIdentityVal(userInfoVo.getIdentityType()));
			keyWords.put("address", userInfoVo.getAddress());
			keyWords.put("mobile", userInfoVo.getMobile());
			keyWords.put("email", userInfoVo.getEmail());
			keyWords.put("postcode", userInfoVo.getPostcode());
			keyWords.put("identitynum", userInfoVo.getIdentityNum());
			keyWords.put("year", now.get(Calendar.YEAR)+"");//占位符替换为当年 年份
			keyWords.put("month", (now.get(Calendar.MONTH) + 1) + "");//占位符替换为当年 月份
			keyWords.put("day", now.get(Calendar.DAY_OF_MONTH) + "");//占位符替换为当年 日
			keyWords.put("create_date",now.get(Calendar.YEAR)+"年"+(now.get(Calendar.MONTH) + 1) + "月"+ now.get(Calendar.DAY_OF_MONTH) + "日");//占位符替换为当年 日
			keyWords.put("client_id", userInfoVo.getClientId());//客户号
			keyWords.put("name", userInfoVo.getName());//姓名
			for (Map.Entry<String, String> item : keyWords.entrySet())
			{
				String key = item.getKey();
				String value = item.getValue();
				String keys="\\{"+ key+"\\}";
				agree_content = agree_content.replaceAll(keys, value);
			}
			return agree_content;
		}
		return  agree_content;
	}


	private String getBranchNameByNO(String branch_no){
		BranchInfoService branchInfoService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_BRANCHINFO, BranchInfoService.class);
		String branch_name ="";
		try {
			List<DataRow> branchinfo = branchInfoService.queryList(branch_no);
			if(branchinfo!=null && branchinfo.size()>0){
				branch_name = branchinfo.get(0).getString("branch_name");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return branch_name;
	}

	private  String getIdentityVal(String identitytype){
		EnumInfoService enumService = SpringHelper.getBean(BasicServiceBeanIdConstants.SERVICE_ID_ENUMINFO, EnumInfoService.class);
		EnumValueModel enumValueModel = enumService.getEnumByTypeAndValue(DictionaryConstants.ENUMNO_IDENTITY_TYPE, identitytype);
		String identityVal = enumValueModel.getItemName();
		return identityVal;

	}
}
