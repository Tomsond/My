package com.thinkive.fxc.ismp.bus.base.basicdata.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.swing.text.StyledEditorKit.BoldAction;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.thinkive.base.jdbc.DataRow;
import com.thinkive.base.util.DateHelper;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.ServicetimeDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.dao.TradeDateDao;
import com.thinkive.fxc.ismp.bus.base.basicdata.model.ServicetimeModel;
import com.thinkive.fxc.ismp.bus.base.basicdata.service.TradeTimeService;
import com.thinkive.fxc.ismp.bus.base.constants.DictionaryConstants;

/**
 * @描述: 交易时间服务实现类
 * @版权: Copyright (c) 2010
 * @公司: 深圳市思迪信息技术股份有限公司
 * @作者: 刘恺
 * @版本: 2.0.0 
 * @创建时间: 2016年8月25日 下午10:15:22
 */
public class TradeTimeServiceImpl implements TradeTimeService
{
	
	private Logger logger = Logger.getLogger(TradeTimeServiceImpl.class);
	
	private TradeDateDao tradeDateDao;
	
	private ServicetimeDao serviceTimeDao;
	
	public void setTradeDateDao(TradeDateDao tradeDateDao)
	{
		this.tradeDateDao = tradeDateDao;
	}
	
	public void setServiceTimeDao(ServicetimeDao serviceTimeDao)
	{
		this.serviceTimeDao = serviceTimeDao;
	}
	
	@Override
	public boolean checkZdTradeTime()
	{
		//step1：查询今天是不是交易日
		DataRow isTradeDate = tradeDateDao.queryIfTradingDayByDate(DateHelper.formatDate(new Date(), "yyyy-MM-dd"));
		
		//step2：未查询到交易日信息，不进行中登查询判断,不是交易时间
		if (isTradeDate == null)
		{
			logger.warn("未查询到交易日信息，不进行中登交易时间判断");
			return false;
		}
		
		String iftradingday = isTradeDate.getString("iftradingday");
		
		//step3：如果今天不是交易日则不是中登交易时间
		if (!DictionaryConstants.BOL_TRUE.equals(iftradingday))
		{
			return false;
		}
		
		//step4:查询中登服务时间
		List<ServicetimeModel> serviceTimes = serviceTimeDao.queryByServiceType(DictionaryConstants.SERVICETIME_TYPE_ZDTRADE);
		
		//step5：如果没有配置服务时间，无法进行时间判断，不是服务时间
		if (serviceTimes == null || serviceTimes.size() == 0)
		{
			logger.warn("未查询到中登交易服务时间，不进行中登交易时间判断");
			return false;
		}
		
		//step6：检查当前时间是否在服务时间组内
		for (ServicetimeModel serviceTimeItem : serviceTimes)
		{
			String startTime = serviceTimeItem.getStartTime();
			String endTime = serviceTimeItem.getEndTime();
			if (StringUtils.isBlank(startTime) || StringUtils.isBlank(endTime))
			{
				logger.warn("编号【" + serviceTimeItem.getId() + "】中登服务时间未设计开始或结束时间");
				continue;
			}
			//当前时间
			Date nowDate = new Date();
			//当前时间日志字符串
			String nowDateString = DateHelper.formatDate(nowDate, "yyyy-MM-dd");
			//当前服务开始时间
			Date stime = DateHelper.parseString(nowDateString + " " + startTime);
			//当前服务结束时间
			Date etime = DateHelper.parseString(nowDateString + " " + endTime);
			//如果当前时间不小于开始时间也不大于结束时间
			if (nowDate.before(stime) == false && nowDate.after(etime) == false)
			{
				return true;
			}
		}
		return false;
	}
	
	@Override
	public boolean checkBankTradeTime()
	{
		//step4:查询中登服务时间
		List<ServicetimeModel> serviceTimes = serviceTimeDao.queryByServiceType(DictionaryConstants.SERVICETIME_TYPE_BANKTRADE);
		
		//step5：如果没有配置服务时间，无法进行时间判断，不是服务时间
		if (serviceTimes == null || serviceTimes.size() == 0)
		{
			logger.warn("未查询到银行交易服务时间，不进行银行交易时间判断");
			return false;
		}
		
		//step6：检查当前时间是否在服务时间组内
		for (ServicetimeModel serviceTimeItem : serviceTimes)
		{
			String startTime = serviceTimeItem.getStartTime();
			String endTime = serviceTimeItem.getEndTime();
			if (StringUtils.isBlank(startTime) || StringUtils.isBlank(endTime))
			{
				logger.warn("编号【" + serviceTimeItem.getId() + "】中登服务时间未设计开始或结束时间");
				continue;
			}
			//当前时间
			Date nowDate = new Date();
			//当前时间日志字符串
			String nowDateString = DateHelper.formatDate(nowDate, "yyyy-MM-dd");
			//当前服务开始时间
			Date stime = DateHelper.parseString(nowDateString + " " + startTime);
			//当前服务结束时间
			Date etime = DateHelper.parseString(nowDateString + " " + endTime);
			//如果当前时间不小于开始时间也不大于结束时间
			if (nowDate.before(stime) == false && nowDate.after(etime) == false)
			{
				return true;
			}
		}
		return false;
	}

	@Override
	public DataRow checkTradingDay() {
		//查询交易日数据
		String time =DateHelper.formatDate(new Date(),"yyyy-MM-dd");
		DataRow serviceTimes = tradeDateDao.queryIfTradingDayByDate(time);	
		return serviceTimes;
	}
	
	@Override
	public DataRow getTradeTime() throws Exception {
		String isTradeTime = "0";
		DataRow trData = serviceTimeDao.getTradeTime();
		String beginTime = trData.getString("begintime");
		String endTime = trData.getString("endtime");
		logger.info("**beginTime****"+beginTime);
		logger.info("**endTime****"+endTime);
		Date stime = DateHelper.parseString(DateHelper.formatDate(new Date(), "yyyy-MM-dd") + " " + beginTime);// 上班时间
		Date etime = DateHelper.parseString(DateHelper.formatDate(new Date(), "yyyy-MM-dd") + " " + endTime);// 下班时间
		SimpleDateFormat simple = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date1 = simple.format(new Date()); // 获取当前登录时间
		Date time = DateHelper.parseString(date1);// 当前登录时间
		logger.info("******time*****"+time);
		logger.info("******stime*****"+stime);
		logger.info("******etime*****"+etime);
		if (time.before(stime) == false && time.after(etime) == false)
		{
			isTradeTime = "1";
		}
		DataRow dataRow = new DataRow();
		dataRow.set("isTradeTime",isTradeTime);
		dataRow.set("beginTime",beginTime);
		dataRow.set("endTime",endTime);
		return dataRow;
	}

    @Override
    public boolean checkZdTradeTimeOfEnum() throws Exception
    {
        //step1：查询今天是不是交易日
        DataRow isTradeDate = tradeDateDao.queryIfTradingDayByDate(DateHelper.formatDate(new Date(), "yyyy-MM-dd"));
        
        //step2：未查询到交易日信息，不进行中登查询判断,不是交易时间
        if (isTradeDate == null)
        {
            logger.warn("未查询到交易日信息，不进行中登交易时间判断");
            return false;
        }
        
        String iftradingday = isTradeDate.getString("iftradingday");
        
        //step3：如果今天不是交易日则不是中登交易时间
        if (!DictionaryConstants.BOL_TRUE.equals(iftradingday))
        {
            return false;
        }
        
        //step4:查询数据字典配置的交易时间
        DataRow trData = serviceTimeDao.getTradeTime();
        
        //step5：如果没有配置服务时间，无法进行时间判断，不是服务时间
        if (trData == null )
        {
            logger.warn("未查询到数据字典配置的交易时间，不进行中登交易时间判断");
            return false;
        }
        
        //step6：检查当前时间是否在服务时间组内
        String startTime = trData.getString("begintime");
        String endTime = trData.getString("endtime");
        if (StringUtils.isBlank(startTime) || StringUtils.isBlank(endTime))
        {
            logger.warn("服务时间未设计开始或结束时间");
            return false;
        }
        //当前时间
        Date nowDate = new Date();
        //当前时间日志字符串
        String nowDateString = DateHelper.formatDate(nowDate, "yyyy-MM-dd");
        //当前服务开始时间
        Date stime = DateHelper.parseString(nowDateString + " " + startTime);
        //当前服务结束时间
        Date etime = DateHelper.parseString(nowDateString + " " + endTime);
        //如果当前时间不小于开始时间也不大于结束时间
        if (nowDate.before(stime) == false && nowDate.after(etime) == false)
        {
            return true;
        }
        return false;
    }
}
